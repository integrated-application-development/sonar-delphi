<ruleset name="Delphi Default">
	<description>All default rules</description>

	<rule class="org.sonar.plugins.delphi.pmd.rules.ThenTryRule"
				message="No 'begin' before 'try' at 'if' statement"
				name="ThenTryRule">
		<description>You always should place 'begin' statement after 'try', this helps to prevent errors.
		</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
		<example>
			<![CDATA[		
					<b>try</b>		
					( ... )		//WRONG, no begin statement		
					<b>except</b>		
					( ... )		
					<b>end;</b>		
							
					<b>try</b>		
						<b>begin</b>	//GOOD		
						(...)		 
						<b>end;</b>		
					<b>except</b>		
					(...)		
					<b>end;		
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.XPathRule"
				message="No function return type specified"
				name="NoFunctionReturnTypeRule">
		<description>All functions should have return type specified.</description>
		<properties>
			<property name="baseEffort" value="1min" />
			<property name="xpath">
				<value>
					<![CDATA[	
							//FUNCTION/TkFunctionReturn[count(child::*)=0]
						]]>
				</value>
			</property>
		</properties>
		<example>
			<![CDATA[		
					<b>function</b> TMainWindow.foo(x : byte);		//WRONG, no return type		
		
					<b>function</b> TMainWindow.foo(x : byte): integer;	//GOOD		
 				]]>
		 </example>
	</rule>

	<!-- YOU CAN COPY THIS RULE, JUST CHANGE THE PARAMETERS YOU WISH TO SEARCH FOR -->
	<rule class="org.sonar.plugins.delphi.pmd.rules.ClassPerFileRule" 
	    	message="File has too many classes."
				name="ClassPerFileRule">
		<description>A file should not include too many classes, for clarity reasons.</description>
		<properties>
			<property name="baseEffort" value="1h" />
			<property name="limit" value="1" />
		</properties>
	</rule>

	<!-- YOU CAN COPY THIS RULE, JUST CHANGE THE PARAMETERS YOU WISH TO SEARCH FOR -->
	<rule class="org.sonar.plugins.delphi.pmd.rules.NodeSequenceRule"
				message="Inherited method, with no additional code."
				name="InheritedMethodWithNoCodeRule">
		<description>Some methods that only inherits parent method behaviour are not needed (redundant).</description>
		<properties>
			<property name="baseEffort" value="10min" />
			<property name="sequence" value="begin|inherited|;|end" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.NodeSequenceRule"
				message="Empty 'except' block"
				name="EmptyExceptBlockRule">
		<description>Empty 'except' block, you should catch some exceptions.</description>
		<properties>
			<property name="baseEffort" value="10min" />
			<property name="sequence" value="except|end" />
		</properties>
		<example>
			<![CDATA[
					<b>try</b>
					( ... code ... )
					<b>except</b>	//WRONG, except statement does not catch anything
					<b>end;</b>
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.NodeSequenceRule"
				message="Empty 'finally' block"
				name="EmptyFinallyBlockRule">
		<description>Avoid empty finally blocks - these can be deleted.</description>
		<properties>
			<property name="baseEffort" value="5min" />
			<property name="sequence" value="finally|end" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.XPathRule"
				message="Empty interface declaration"
				name="EmptyInterfaceRule">
		<description>You may have forgotten to fill some interface with methods.</description>
		<properties>
			<property name="baseEffort" value="20min" />
			<property name="xpath">
				<value>
					<![CDATA[
						//TkNewType/*/TkInterface/INTERFACE[count(following-sibling::*) < 3]
 						]]>	
				</value>
			</property>
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.TooLongMethodRule"
				message="Method too long"
				name="TooLongMethodRule">
		<description>A method that grows too large tends to aggregate too many responsibilities. 
			Such methods inevitably become harder to understand and therefore harder to maintain. 
			Above a specific threshold, it is strongly advised to refactor into smaller methods which 
			focus on well-defined tasks. 
			Those smaller methods will not only be easier to understand, but also probably easier to test.
		</description>
		<properties>
			<property name="baseEffort" value="30min" />
			<property name="limit" value="150" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.TooManyArgumentsRule"
				message="Too many arguments"
				name="TooManyArgumentsRule">
		<description>Function may have too many arguments, maximum number of arguments is 6</description>
		<properties>
			<property name="baseEffort" value="1h" />
			<property name="limit" value="6" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.TooManyVariablesRule"
				message="Too many variables"
				name="TooManyVariablesRule">
		<description>Function may have too many variables, maximum number of variables is 10</description>
		<properties>
			<property name="baseEffort" value="30min" />
			<property name="limit" value="10" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.XPathRule"
		message="No semi after method declaration"
		name="NoSemiAfterMethodDeclarationRule">
		<description>You should put a semicolon ';' at the end of method declarations.</description>
		<priority>5</priority>
		<properties>
			<property name="baseEffort" value="5min" />
			<property name="xpath">
				<value>
					<![CDATA[
							//PROCEDURE/*[last()][name() != "SEMI"] |
							//FUNCTION/*[last()][name() != "SEMI"]
						]]>
				</value>
			</property>
		</properties>
		<example>
			<![CDATA[
					<b>procedure</b> foo1(x: integer); <b>overload</b>	//WRONG, no ; at end

					<b>procedure</b> foo2(x: integer); <b>overload</b>;	//GOOD
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.InterfaceNameRule"
				message="Interface Name doesn't comply with a naming convention"
				name="InterfaceNameRule">
		<description>
			Interface name should begin with "I"
		</description>
		<properties>
			<property name="baseEffort" value="1min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.RecordNameRule"
				message="Record Name should comply with a naming convention"
				name="RecordNameRule">
		<description>According to Object Pascal Style Guide record name should begin with capital 'T' letter.
		</description>
		<properties>
			<property name="baseEffort" value="30min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.PointerNameRule"
				message="Pointer Name should comply with a naming convention"
				name="PointerNameRule">
		<description>Pointer name should begin with 'P' letter.</description>
		<properties>
			<property name="baseEffort" value="30min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.MethodNameRule"
				message="Method Name should comply with a naming convention"
				name="MethodNameRule">
		<description>According to Object Pascal Style Guide method name should follow Pascal Case.
		</description>
		<properties>
			<property name="baseEffort" value="30min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.FieldNameRule"
				message="Field names should comply with a naming convention"
				name="FieldNameRule">
		<description>According to Object Pascal Style Guide field name should begin with 'F' letter..
		</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.UnitNameRule"
				message="Unit names should comply with a naming convention"
				name="UnitNameRule">
		<description>According to Object Pascal Style Guide unit name should follow Pascal Case.
		</description>
		<properties>
			<property name="baseEffort" value="30min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.NodeSequenceRule"
				message="Catching general exception"
				name="CatchingGeneralExceptionRule">
		<description>You should not catch general exceptions but descendants of Exception class.
		</description>
		<properties>
			<property name="baseEffort" value="15min" />
			<property name="sequence" value=":|exception|do" />
		</properties>
		<example>
			<![CDATA[
					<b>except</b>
					<b>on</b> e : Exception <b>do</b>		//WRONG, catching general Exception class

					<b>except</b>
					<b>on</b> e : MyException <b>do</b>		//GOOD, catching specific exception type
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.NodeSequenceRule"
				message="Raising general exception"
				name="RaisingGeneralExceptionRule">
		<description>You should not raise a general Exception class.</description>
		<properties>
			<property name="baseEffort" value="15min" />
			<property name="sequence" value="raise|exception|.|create" />
		</properties>
		<example>
			<![CDATA[
					<b>raise</b> Exception.create('blah');		//WRONG, raising general exception class

					<b>raise</b> MyException.create('blah');	//GOOD, raising specific exception
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.XPathRule"
				message="Avoid 'out' parameters, they are evil"
				name="AvoidOutParameterRule">
		<description>Avoid 'out' variable parameters. Nasty.</description>
		<properties>
			<property name="baseEffort" value="30min" />
			<property name="xpath">
				<value>
					<![CDATA[
						//TkVariableParam/OUT
					]]>
				</value>
			</property>
		</properties>
		<example>
			<![CDATA[
					<b>function</b> TMainWindow.foo(<u>out</u> x : byte);	//WRONG, using 'out' parameter
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.IfTrueRule"
				message="Change from 'if (x=true)' to 'if x'"
				name="IfTrueRule">
		<description>You don't need to write 'if x = true', this is redundant. Instead write 'if x'.</description>
		<properties>
			<property name="baseEffort" value="1min" />
			<property name="limit" value="0" />
			<property name="start" value="if" />
			<property name="end" value="then" />
		</properties>
		<example>
			<![CDATA[
					<b>if</b> (x = true) <b>or</b> (y.designator = true) <b>then</b> ...		//WRONG

					<b>if</b> (x) <b>or</b> (y) <b>then</b> ...		//GOOD
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.IfNotFalseRule"
				message="Change from 'if not (x=false)' to 'if not x'"
				name="IfNotFalseRule">
		<description>You don't need to write 'if not (x = false)', this is redundant. Instead write 'if
			x'.
		</description>
		<properties>
			<property name="baseEffort" value="1min" />
			<property name="limit" value="0" />
			<property name="start" value="if" />
			<property name="end" value="then" />
		</properties>
		<example>
			<![CDATA[
					<b>if</b> <b>not</b> (x = false) <b>then</b> ...	//WRONG

					<b>if</b>(x) <b>then</b> ...	//GOOD
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.PublicFieldsRule"
				message="Avoid using public fields"
				name="PublicFieldsRule">
		<description>You shouldn't make public fields. Instead make fields private/protected and define 
			a public property to access them instead.
		</description>
		<properties>
			<property name="baseEffort" value="3min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.UnusedArgumentsRule"
				message="Unused method parameters should be removed"
				name="UnusedArgumentsRule">
		<description>You should always use every passed function argument.</description>
		<properties>
			<property name="baseEffort" value="5min" />
			<property name="excluded_args" value="Sender|ASender|DataSet|ADataSet" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.XPathRule"
				message="No Guid in interface declaration"
				name="NoGuidRule">
		<description>Every interface should contain unique Guid.</description>
		<properties>
			<property name="baseEffort" value="5min" />
			<property name="xpath">
				<value>
					<![CDATA[
						//TkNewType/*/TkInterface/INTERFACE[following-sibling::*[2][count(child::*) = 0]]
					]]>			
				</value>
			</property>
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.AssignedAndFreeRule"
				message="You don't have to check for assignment when calling Free"
				name="AssignedAndFreeRule">
		<description>Free() method does check if the freed variable is not nil, you don't have to do it
			manually.
		</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
		<example>
			<![CDATA[
					<b>if</b> <b>Assigned</b>(x) <b>then</b> x.Free;		//WRONG

					<b>if</b> x &lt;&gt; <b>nil</b> <b>then</b> x.Free;		//WRONG

					x.Free;			//GOOD, sufficient enough
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.XPathRule"
				message="Empty 'else' statement"
				name="EmptyElseStatementRule">
		<description>You should not write an empty 'else' statement.</description>
		<properties>
			<property name="baseEffort" value="5min" />
			<property name="xpath">
				<value>
					<![CDATA[
						//ELSE[following-sibling::*[1][name()='END']]
					]]>	
				</value>
			</property>
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.XPathRule"
				message="Empty 'begin' statement"
				name="EmptyBeginStatementRule">
		<description>You should not write an empty 'begin' statement.</description>
		<properties>
			<property name="baseEffort" value="5min" />
			<property name="xpath">
				<value>
					<![CDATA[
						//BEGIN[count(child::*) = 1]
					]]>	
				</value>
			</property>
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.DprFunctionRule"
				message=".dpr/.dpk file should not have procedures/functions."
				name="ProjectFileNoFunctionsRule">
		<description>.dpr/.dpk files should not have procedures/functions.</description>
		<properties>
			<property name="baseEffort" value="15min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.DprVariableRule"
				message=".dpr/.dpk file should not have variables."
				name="ProjectFileNoVariablesRule">
		<description>.dpr/.dpk files should not have variables.</description>
		<properties>
			<property name="baseEffort" value="15min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.XPathRule"
				message="Do not use type aliases"
				name="TypeAliasRule">
		<description>You should not use type aliases.</description>
		<properties>
			<property name="baseEffort" value="10min" />
			<property name="xpath">
				<value>
					<![CDATA[
						//TkNewType[TkNewTypeDecl/*[1][name() = 'TkIdentifier'][not(child::ARRAY)][not(following-sibling::DOTDOT)]] |
						//TkNewType[TkNewTypeDecl/*[1][name() = 'TYPE'][following-sibling::TkIdentifier]]
					]]>	
				</value>
			</property>
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.UppercaseReservedWordsRule"
				message="Keywords should comply with a naming convention."
				name="UppercaseReservedKeywordsRule">
		<description>Avoid using uppercase reserved keywords.</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.MixedNamesRule"
				message="Avoid using mixed names for functions / variables."
				name="MixedNamesRule">
		<description>Avoid using uppercase reserved keywords.</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.DelphiRule"
				message="Unused unit."
				name="UnusedUnitRule">
		<description>Unused unit. No other unit has this unit in it's uses section. Probably you could
			remove this unit from project.
		</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.DelphiRule"
				message="Unused function/procedure."
				name="UnusedFunctionRule">
		<description>Unused function/procedure. No other unit uses this function/procedure in it's uses
			section. Probably you could remove it from project.
		</description>
		<properties>
			<property name="baseEffort" value="15min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.ConstructorWithoutInheritedStatementRule"
				message="Constructor without 'inherited' statement."
				name="ConstructorWithoutInheritedStatementRule">
		<description>Constructor without 'inherited' statement.</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.DestructorWithoutInheritedStatementRule"
				message="Destructor without 'inherited' statement."
				name="DestructorWithoutInheritedStatementRule">
		<description>Destructor without 'inherited' statement.</description>
		<properties>
			<property name="baseEffort" value="30min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.NoBeginAfterDoRule"
				message="No 'begin' after 'do' statement"
				name="NoBeginAfterDoRule">
		<description>'Begin' statement should be placed after 'do' statement to prevent errors.
		</description>
		<properties>
			<property name="baseEffort" value="10min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.WithAfterDoThenRule"
				message="'with' statement after 'do', 'begin' omitted"
				name="WithAfterDoThenRule">
		<description>'with' statement used directly after 'do' or 'then' statements. You should place 
			'begin' directly after 'do' or 'then' statements.
		</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.NoSemicolonRule"
				message="No semicolon at the end of code block."
				name="NoSemicolonRule">
		<description>No semicolon at the end of code block.</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.CastAndFreeRule"
				message="Don't cast then free."
				name="CastAndFreeRule">
		<description>You should not cast an object before freeing it.</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.DelphiRule"
				message="Methods should not be too complex."
				name="MethodCyclomaticComplexityRule">
		<description>The cyclomatic complexity of methods should not exceed a defined threshold. Complex
			code can perform poorly and will in any case be difficult to understand and therefore to
			maintain.
		</description>
		<properties>
			<property name="baseEffort" value="10min" />
			<property name="limit" value="20" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.ConstantNotationRule"
				message="Constants should begin with C_"
				name="ConstantNotationRule">
		  <description>Constants should begin with C_</description>
		<properties>
			<property name="baseEffort" value="1min" />
		</properties>
	</rule>

    <rule class="org.sonar.plugins.delphi.pmd.rules.TooManySubProceduresRule"
					message="Code should not contain too many sub procedures or functions"
          name="TooManySubProceduresRule">
        <description>Methods must not have too many sub procedures</description>
        <properties>
            <property name="baseEffort" value="30min" />
            <property name="limit" value="3" />
        </properties>
    </rule>
  
	<rule class="org.sonar.plugins.delphi.pmd.rules.ClassNameRule"
				message="Class and enumeration name declarations should begin with T, TForm, or E"
		  	name="ClassNameRule">
		<description>Class and enumeration name declarations should begin with T, TForm, or E</description>
		<properties>
			<property name="baseEffort" value="1min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.ConstructorCreateRule"
				message="Constructor name declarations should begin with Create"
				name="ConstructorCreateRule">
		<description>Constructors should begin with Create</description>
		<properties>
			<property name="baseEffort" value="1min" />
		</properties>
	</rule>

    <rule class="org.sonar.plugins.delphi.pmd.rules.AvoidWithRule"
					message="Use of 'with' should be avoided"
          name="AvoidWithRule">
			<description>Use of 'with' should be avoided</description>
			<properties>
					<property name="baseEffort" value="5min" />
			</properties>
    </rule>
  
	<rule class="org.sonar.plugins.delphi.pmd.rules.TooLongLineRule"
				message="Line too long"
		  	name="TooLongLineRule">
		<description>Code lines should not be too long.</description>
		<properties>
			<property name="baseEffort" value="2min" />
			<property name="limit" value="100" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.ReRaiseExceptionRule"
				message="Previously declared exceptions should not be re-raised"
				name="ReRaiseExceptionRule">
		<description>Raising a previously declared exception at the end of an except block actually raises two exceptions.
      You should use 'raise;' instead of 'raise (exception);'.</description>
		<properties>
			<property name="baseEffort" value="5min" />
		</properties>
		<example>
			<![CDATA[
					// Non compliant
					begin
							ShowMessage('Exception message = ' + E.Message);
							raise E;  // E not needed, raises a second exception
					end;

					// Compliant
					begin
						ShowMessage('Exception message = ' + E.Message);
						raise;  // Acceptable
					end;
 				]]>
		</example>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.EmptyBracketsRule"
				message="Empty brackets for method without parameters"
				name="EmptyBracketsRule">
		  <description>
			  When calling a method, there is no need to use brackets if there are no parameters to be passed.
		  </description>
		<properties>
			<property name="baseEffort" value="1min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.DuplicatesRule"
				message="List must be sorted before checking for duplicates"
				name="DuplicatesRule">
		<description>List must be sorted immediately before checking for duplicates</description>
		<properties>
				<property name="baseEffort" value="2min" />
		</properties>
	</rule>

	<rule class="org.sonar.plugins.delphi.pmd.rules.LowerCaseReservedWordsRule"
				message="Keywords 'not, or, and' must always be in lower case."
		  	name="LowerCaseReservedWordsRule">
		<description> Always use lower case when using keywords and , or, not etc.</description>
		<properties>
			<property name="baseEffort" value="1min" />
		</properties>
	</rule>

  <rule class="org.sonar.plugins.delphi.pmd.rules.VariableNameRule"
				message="Identifiers should begin with a capital letter."
  			name="VariableNameRule">
    <description>It is good convention to start variable identifiers with capitals.</description>
    <properties>
      <property name="baseEffort" value="1min" />
    </properties>
  </rule>

</ruleset>
