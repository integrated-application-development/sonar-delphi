// $ANTLR 3.5.1 ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g 2019-06-14 16:53:07

/*
 * Sonar Delphi Plugin
 * Copyright (C) 2010 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package org.sonar.plugins.delphi.antlr.generated;

/**
* Delphi Parser class generated by Antlr. Provides tokens and tree parsing methods.
**/


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class DelphiParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSOLUTE", "ABSTRACT", "ADD", 
		"AND", "ANSISTRING", "ARRAY", "AS", "ASM", "ASSEMBLER", "ASSEMBLY", "ASSIGN", 
		"AT", "AT2", "AUTOMATED", "Alpha", "BEGIN", "BREAK", "CASE", "CDECL", 
		"CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONSTRUCTOR", "CONTAINS", 
		"CONTINUE", "ControlString", "Controlchar", "DEFAULT", "DEPRECATED", "DESTRUCTOR", 
		"DISPID", "DISPINTERFACE", "DIV", "DO", "DOT", "DOTDOT", "DOWNTO", "DQ", 
		"DW", "DYNAMIC", "Digit", "Digitseq", "ELSE", "END", "EQUAL", "EXCEPT", 
		"EXIT", "EXPERIMENTAL", "EXPORT", "EXPORTS", "EXTERNAL", "FALSE", "FAR", 
		"FILE", "FINAL", "FINALIZATION", "FINALLY", "FOR", "FORWARD", "FUNCTION", 
		"GE", "GOTO", "GT", "HELPER", "Hexdigit", "Hexdigitseq", "IF", "IMPLEMENTATION", 
		"IMPLEMENTS", "IN", "INDEX", "INHERITED", "INITIALIZATION", "INLINE", 
		"INTERFACE", "IS", "LABEL", "LBRACK", "LBRACK2", "LCURLY", "LE", "LIBRARY", 
		"LOCAL", "LPAREN", "LT", "MESSAGE", "MINUS", "MOD", "NAME", "NEAR", "NIL", 
		"NODEFAULT", "NOT", "NOT_EQUAL", "OBJECT", "OF", "ON", "OPERATOR", "OR", 
		"OUT", "OVERLOAD", "OVERRIDE", "PACKAGE", "PACKED", "PASCAL", "PLATFORM", 
		"PLUS", "POINTER", "POINTER2", "PRIVATE", "PROCEDURE", "PROGRAM", "PROPERTY", 
		"PROTECTED", "PUBLIC", "PUBLISHED", "QuotedString", "RAISE", "RBRACK", 
		"RBRACK2", "RCURLY", "READ", "READONLY", "RECORD", "REFERENCE", "REGISTER", 
		"REINTRODUCE", "REMOVE", "REPEAT", "REQUIRES", "RESIDENT", "RESOURCESTRING", 
		"RPAREN", "SAFECALL", "SEALED", "SEMI", "SET", "SHL", "SHR", "SLASH", 
		"STAR", "STATIC", "STDCALL", "STORED", "STRICT", "STRING", "THEN", "THREADVAR", 
		"TO", "TRUE", "TRY", "TYPE", "TkAnonymousExpression", "TkAsmHexNum", "TkClass", 
		"TkClassField", "TkClassOfType", "TkClassParents", "TkCustomAttribute", 
		"TkCustomAttributeArgs", "TkFunctionArgs", "TkFunctionBody", "TkFunctionName", 
		"TkFunctionReturn", "TkGlobalFunction", "TkGuid", "TkHexNum", "TkIdentifier", 
		"TkIntNum", "TkInterface", "TkNewType", "TkObject", "TkRealNum", "TkRecord", 
		"TkRecordHelper", "TkVariableIdents", "TkVariableParam", "TkVariableType", 
		"UNIT", "UNSAFE", "UNTIL", "USES", "UnicodeBOM", "VAR", "VARARGS", "VARIANT", 
		"VIRTUAL", "WHILE", "WITH", "WRITE", "WRITEONLY", "WS", "XOR", "'&'"
	};
	public static final int EOF=-1;
	public static final int T__199=199;
	public static final int ABSOLUTE=4;
	public static final int ABSTRACT=5;
	public static final int ADD=6;
	public static final int AND=7;
	public static final int ANSISTRING=8;
	public static final int ARRAY=9;
	public static final int AS=10;
	public static final int ASM=11;
	public static final int ASSEMBLER=12;
	public static final int ASSEMBLY=13;
	public static final int ASSIGN=14;
	public static final int AT=15;
	public static final int AT2=16;
	public static final int AUTOMATED=17;
	public static final int Alpha=18;
	public static final int BEGIN=19;
	public static final int BREAK=20;
	public static final int CASE=21;
	public static final int CDECL=22;
	public static final int CLASS=23;
	public static final int COLON=24;
	public static final int COMMA=25;
	public static final int COMMENT=26;
	public static final int CONST=27;
	public static final int CONSTRUCTOR=28;
	public static final int CONTAINS=29;
	public static final int CONTINUE=30;
	public static final int ControlString=31;
	public static final int Controlchar=32;
	public static final int DEFAULT=33;
	public static final int DEPRECATED=34;
	public static final int DESTRUCTOR=35;
	public static final int DISPID=36;
	public static final int DISPINTERFACE=37;
	public static final int DIV=38;
	public static final int DO=39;
	public static final int DOT=40;
	public static final int DOTDOT=41;
	public static final int DOWNTO=42;
	public static final int DQ=43;
	public static final int DW=44;
	public static final int DYNAMIC=45;
	public static final int Digit=46;
	public static final int Digitseq=47;
	public static final int ELSE=48;
	public static final int END=49;
	public static final int EQUAL=50;
	public static final int EXCEPT=51;
	public static final int EXIT=52;
	public static final int EXPERIMENTAL=53;
	public static final int EXPORT=54;
	public static final int EXPORTS=55;
	public static final int EXTERNAL=56;
	public static final int FALSE=57;
	public static final int FAR=58;
	public static final int FILE=59;
	public static final int FINAL=60;
	public static final int FINALIZATION=61;
	public static final int FINALLY=62;
	public static final int FOR=63;
	public static final int FORWARD=64;
	public static final int FUNCTION=65;
	public static final int GE=66;
	public static final int GOTO=67;
	public static final int GT=68;
	public static final int HELPER=69;
	public static final int Hexdigit=70;
	public static final int Hexdigitseq=71;
	public static final int IF=72;
	public static final int IMPLEMENTATION=73;
	public static final int IMPLEMENTS=74;
	public static final int IN=75;
	public static final int INDEX=76;
	public static final int INHERITED=77;
	public static final int INITIALIZATION=78;
	public static final int INLINE=79;
	public static final int INTERFACE=80;
	public static final int IS=81;
	public static final int LABEL=82;
	public static final int LBRACK=83;
	public static final int LBRACK2=84;
	public static final int LCURLY=85;
	public static final int LE=86;
	public static final int LIBRARY=87;
	public static final int LOCAL=88;
	public static final int LPAREN=89;
	public static final int LT=90;
	public static final int MESSAGE=91;
	public static final int MINUS=92;
	public static final int MOD=93;
	public static final int NAME=94;
	public static final int NEAR=95;
	public static final int NIL=96;
	public static final int NODEFAULT=97;
	public static final int NOT=98;
	public static final int NOT_EQUAL=99;
	public static final int OBJECT=100;
	public static final int OF=101;
	public static final int ON=102;
	public static final int OPERATOR=103;
	public static final int OR=104;
	public static final int OUT=105;
	public static final int OVERLOAD=106;
	public static final int OVERRIDE=107;
	public static final int PACKAGE=108;
	public static final int PACKED=109;
	public static final int PASCAL=110;
	public static final int PLATFORM=111;
	public static final int PLUS=112;
	public static final int POINTER=113;
	public static final int POINTER2=114;
	public static final int PRIVATE=115;
	public static final int PROCEDURE=116;
	public static final int PROGRAM=117;
	public static final int PROPERTY=118;
	public static final int PROTECTED=119;
	public static final int PUBLIC=120;
	public static final int PUBLISHED=121;
	public static final int QuotedString=122;
	public static final int RAISE=123;
	public static final int RBRACK=124;
	public static final int RBRACK2=125;
	public static final int RCURLY=126;
	public static final int READ=127;
	public static final int READONLY=128;
	public static final int RECORD=129;
	public static final int REFERENCE=130;
	public static final int REGISTER=131;
	public static final int REINTRODUCE=132;
	public static final int REMOVE=133;
	public static final int REPEAT=134;
	public static final int REQUIRES=135;
	public static final int RESIDENT=136;
	public static final int RESOURCESTRING=137;
	public static final int RPAREN=138;
	public static final int SAFECALL=139;
	public static final int SEALED=140;
	public static final int SEMI=141;
	public static final int SET=142;
	public static final int SHL=143;
	public static final int SHR=144;
	public static final int SLASH=145;
	public static final int STAR=146;
	public static final int STATIC=147;
	public static final int STDCALL=148;
	public static final int STORED=149;
	public static final int STRICT=150;
	public static final int STRING=151;
	public static final int THEN=152;
	public static final int THREADVAR=153;
	public static final int TO=154;
	public static final int TRUE=155;
	public static final int TRY=156;
	public static final int TYPE=157;
	public static final int TkAnonymousExpression=158;
	public static final int TkAsmHexNum=159;
	public static final int TkClass=160;
	public static final int TkClassField=161;
	public static final int TkClassOfType=162;
	public static final int TkClassParents=163;
	public static final int TkCustomAttribute=164;
	public static final int TkCustomAttributeArgs=165;
	public static final int TkFunctionArgs=166;
	public static final int TkFunctionBody=167;
	public static final int TkFunctionName=168;
	public static final int TkFunctionReturn=169;
	public static final int TkGlobalFunction=170;
	public static final int TkGuid=171;
	public static final int TkHexNum=172;
	public static final int TkIdentifier=173;
	public static final int TkIntNum=174;
	public static final int TkInterface=175;
	public static final int TkNewType=176;
	public static final int TkObject=177;
	public static final int TkRealNum=178;
	public static final int TkRecord=179;
	public static final int TkRecordHelper=180;
	public static final int TkVariableIdents=181;
	public static final int TkVariableParam=182;
	public static final int TkVariableType=183;
	public static final int UNIT=184;
	public static final int UNSAFE=185;
	public static final int UNTIL=186;
	public static final int USES=187;
	public static final int UnicodeBOM=188;
	public static final int VAR=189;
	public static final int VARARGS=190;
	public static final int VARIANT=191;
	public static final int VIRTUAL=192;
	public static final int WHILE=193;
	public static final int WITH=194;
	public static final int WRITE=195;
	public static final int WRITEONLY=196;
	public static final int WS=197;
	public static final int XOR=198;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public DelphiParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public DelphiParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		this.state.ruleMemo = new HashMap[647+1];


	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return DelphiParser.tokenNames; }
	@Override public String getGrammarFileName() { return "***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g"; }


	public static class file_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "file"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:1: file : ( program | library | unit | packageE );
	public final DelphiParser.file_return file() throws RecognitionException {
		DelphiParser.file_return retval = new DelphiParser.file_return();
		retval.start = input.LT(1);
		int file_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope program1 =null;
		ParserRuleReturnScope library2 =null;
		ParserRuleReturnScope unit3 =null;
		ParserRuleReturnScope packageE4 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:30: ( program | library | unit | packageE )
			int alt1=4;
			switch ( input.LA(1) ) {
			case ASM:
			case BEGIN:
			case CLASS:
			case CONST:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case DOT:
			case EXPORTS:
			case FUNCTION:
			case LABEL:
			case LBRACK:
			case PROCEDURE:
			case PROGRAM:
			case RESOURCESTRING:
			case THREADVAR:
			case TYPE:
			case USES:
			case VAR:
				{
				alt1=1;
				}
				break;
			case LIBRARY:
				{
				alt1=2;
				}
				break;
			case UNIT:
				{
				alt1=3;
				}
				break;
			case PACKAGE:
				{
				alt1=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}
			switch (alt1) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:32: program
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_program_in_file84);
					program1=program();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, program1.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:42: library
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_library_in_file88);
					library2=library();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, library2.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:52: unit
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unit_in_file92);
					unit3=unit();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unit3.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:70:59: packageE
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_packageE_in_file96);
					packageE4=packageE();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, packageE4.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 1, file_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "file"


	public static class program_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "program"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:1: program : ( programHead )? ( usesFileClause )? block '.' ;
	public final DelphiParser.program_return program() throws RecognitionException {
		DelphiParser.program_return retval = new DelphiParser.program_return();
		retval.start = input.LT(1);
		int program_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal8=null;
		ParserRuleReturnScope programHead5 =null;
		ParserRuleReturnScope usesFileClause6 =null;
		ParserRuleReturnScope block7 =null;

		Object char_literal8_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:30: ( ( programHead )? ( usesFileClause )? block '.' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:32: ( programHead )? ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:32: ( programHead )?
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==PROGRAM) ) {
				alt2=1;
			}
			switch (alt2) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:33: programHead
					{
					pushFollow(FOLLOW_programHead_in_program159);
					programHead5=programHead();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programHead5.getTree());

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:47: ( usesFileClause )?
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==USES) ) {
				alt3=1;
			}
			switch (alt3) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:76:48: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_program164);
					usesFileClause6=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause6.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_program168);
			block7=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block7.getTree());

			char_literal8=(Token)match(input,DOT,FOLLOW_DOT_in_program170); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal8_tree = (Object)adaptor.create(char_literal8);
			adaptor.addChild(root_0, char_literal8_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 2, program_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "program"


	public static class programHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programHead"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:1: programHead : 'program' namespaceName ( programParmSeq )? ';' ;
	public final DelphiParser.programHead_return programHead() throws RecognitionException {
		DelphiParser.programHead_return retval = new DelphiParser.programHead_return();
		retval.start = input.LT(1);
		int programHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal9=null;
		Token char_literal12=null;
		ParserRuleReturnScope namespaceName10 =null;
		ParserRuleReturnScope programParmSeq11 =null;

		Object string_literal9_tree=null;
		Object char_literal12_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:30: ( 'program' namespaceName ( programParmSeq )? ';' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:32: 'program' namespaceName ( programParmSeq )? ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal9=(Token)match(input,PROGRAM,FOLLOW_PROGRAM_in_programHead224); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal9_tree = (Object)adaptor.create(string_literal9);
			adaptor.addChild(root_0, string_literal9_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_programHead226);
			namespaceName10=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName10.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:56: ( programParmSeq )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==LPAREN) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:78:57: programParmSeq
					{
					pushFollow(FOLLOW_programParmSeq_in_programHead229);
					programParmSeq11=programParmSeq();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, programParmSeq11.getTree());

					}
					break;

			}

			char_literal12=(Token)match(input,SEMI,FOLLOW_SEMI_in_programHead233); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal12_tree = (Object)adaptor.create(char_literal12);
			adaptor.addChild(root_0, char_literal12_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 3, programHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programHead"


	public static class programParmSeq_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "programParmSeq"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:1: programParmSeq : '(' ( ident ( ',' ident )* )? ')' ;
	public final DelphiParser.programParmSeq_return programParmSeq() throws RecognitionException {
		DelphiParser.programParmSeq_return retval = new DelphiParser.programParmSeq_return();
		retval.start = input.LT(1);
		int programParmSeq_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal13=null;
		Token char_literal15=null;
		Token char_literal17=null;
		ParserRuleReturnScope ident14 =null;
		ParserRuleReturnScope ident16 =null;

		Object char_literal13_tree=null;
		Object char_literal15_tree=null;
		Object char_literal17_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:30: ( '(' ( ident ( ',' ident )* )? ')' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:32: '(' ( ident ( ',' ident )* )? ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal13=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_programParmSeq284); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal13_tree = (Object)adaptor.create(char_literal13);
			adaptor.addChild(root_0, char_literal13_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:36: ( ident ( ',' ident )* )?
			int alt6=2;
			int LA6_0 = input.LA(1);
			if ( (LA6_0==ADD||LA6_0==ANSISTRING||LA6_0==AT||LA6_0==BREAK||(LA6_0 >= CONTAINS && LA6_0 <= CONTINUE)||(LA6_0 >= DEFAULT && LA6_0 <= DEPRECATED)||LA6_0==EXIT||LA6_0==EXPORT||LA6_0==FINAL||LA6_0==HELPER||LA6_0==IMPLEMENTS||LA6_0==INDEX||LA6_0==LOCAL||LA6_0==MESSAGE||LA6_0==NAME||LA6_0==OBJECT||LA6_0==OPERATOR||LA6_0==OUT||LA6_0==PACKAGE||LA6_0==POINTER||(LA6_0 >= READ && LA6_0 <= READONLY)||(LA6_0 >= REFERENCE && LA6_0 <= REGISTER)||LA6_0==REMOVE||(LA6_0 >= STORED && LA6_0 <= STRING)||LA6_0==TkIdentifier||LA6_0==VARIANT||LA6_0==WRITE||LA6_0==199) ) {
				alt6=1;
			}
			switch (alt6) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:37: ident ( ',' ident )*
					{
					pushFollow(FOLLOW_ident_in_programParmSeq287);
					ident14=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident14.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:43: ( ',' ident )*
					loop5:
					while (true) {
						int alt5=2;
						int LA5_0 = input.LA(1);
						if ( (LA5_0==COMMA) ) {
							alt5=1;
						}

						switch (alt5) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:80:44: ',' ident
							{
							char_literal15=(Token)match(input,COMMA,FOLLOW_COMMA_in_programParmSeq290); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal15_tree = (Object)adaptor.create(char_literal15);
							adaptor.addChild(root_0, char_literal15_tree);
							}

							pushFollow(FOLLOW_ident_in_programParmSeq292);
							ident16=ident();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, ident16.getTree());

							}
							break;

						default :
							break loop5;
						}
					}

					}
					break;

			}

			char_literal17=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_programParmSeq299); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal17_tree = (Object)adaptor.create(char_literal17);
			adaptor.addChild(root_0, char_literal17_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 4, programParmSeq_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "programParmSeq"


	public static class library_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "library"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:1: library : libraryHead ( usesFileClause )? block '.' ;
	public final DelphiParser.library_return library() throws RecognitionException {
		DelphiParser.library_return retval = new DelphiParser.library_return();
		retval.start = input.LT(1);
		int library_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal21=null;
		ParserRuleReturnScope libraryHead18 =null;
		ParserRuleReturnScope usesFileClause19 =null;
		ParserRuleReturnScope block20 =null;

		Object char_literal21_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:30: ( libraryHead ( usesFileClause )? block '.' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:32: libraryHead ( usesFileClause )? block '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_libraryHead_in_library357);
			libraryHead18=libraryHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, libraryHead18.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:44: ( usesFileClause )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==USES) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:82:45: usesFileClause
					{
					pushFollow(FOLLOW_usesFileClause_in_library360);
					usesFileClause19=usesFileClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usesFileClause19.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_block_in_library364);
			block20=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block20.getTree());

			char_literal21=(Token)match(input,DOT,FOLLOW_DOT_in_library366); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal21_tree = (Object)adaptor.create(char_literal21);
			adaptor.addChild(root_0, char_literal21_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 5, library_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "library"


	public static class libraryHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "libraryHead"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:1: libraryHead : 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) ;
	public final DelphiParser.libraryHead_return libraryHead() throws RecognitionException {
		DelphiParser.libraryHead_return retval = new DelphiParser.libraryHead_return();
		retval.start = input.LT(1);
		int libraryHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal22=null;
		Token char_literal25=null;
		ParserRuleReturnScope namespaceName23 =null;
		ParserRuleReturnScope hintingDirective24 =null;

		Object string_literal22_tree=null;
		Object char_literal25_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_LIBRARY=new RewriteRuleTokenStream(adaptor,"token LIBRARY");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:30: ( 'library' namespaceName ( hintingDirective )* ';' -> ^( 'library' namespaceName ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:32: 'library' namespaceName ( hintingDirective )* ';'
			{
			string_literal22=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_libraryHead420); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LIBRARY.add(string_literal22);

			pushFollow(FOLLOW_namespaceName_in_libraryHead422);
			namespaceName23=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName23.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:56: ( hintingDirective )*
			loop8:
			while (true) {
				int alt8=2;
				int LA8_0 = input.LA(1);
				if ( (LA8_0==DEPRECATED||LA8_0==EXPERIMENTAL||LA8_0==LIBRARY||LA8_0==PLATFORM) ) {
					alt8=1;
				}

				switch (alt8) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:57: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_libraryHead425);
					hintingDirective24=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective24.getTree());
					}
					break;

				default :
					break loop8;
				}
			}

			char_literal25=(Token)match(input,SEMI,FOLLOW_SEMI_in_libraryHead429); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal25);

			// AST REWRITE
			// elements: LIBRARY, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 84:80: -> ^( 'library' namespaceName )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:84:83: ^( 'library' namespaceName )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_LIBRARY.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 6, libraryHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "libraryHead"


	public static class packageE_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageE"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:1: packageE : packageHead requiresClause ( containsClause )? 'end' '.' ;
	public final DelphiParser.packageE_return packageE() throws RecognitionException {
		DelphiParser.packageE_return retval = new DelphiParser.packageE_return();
		retval.start = input.LT(1);
		int packageE_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal29=null;
		Token char_literal30=null;
		ParserRuleReturnScope packageHead26 =null;
		ParserRuleReturnScope requiresClause27 =null;
		ParserRuleReturnScope containsClause28 =null;

		Object string_literal29_tree=null;
		Object char_literal30_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:30: ( packageHead requiresClause ( containsClause )? 'end' '.' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:32: packageHead requiresClause ( containsClause )? 'end' '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_packageHead_in_packageE494);
			packageHead26=packageHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, packageHead26.getTree());

			pushFollow(FOLLOW_requiresClause_in_packageE496);
			requiresClause27=requiresClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, requiresClause27.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:59: ( containsClause )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==CONTAINS) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:86:60: containsClause
					{
					pushFollow(FOLLOW_containsClause_in_packageE499);
					containsClause28=containsClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, containsClause28.getTree());

					}
					break;

			}

			string_literal29=(Token)match(input,END,FOLLOW_END_in_packageE503); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal29_tree = (Object)adaptor.create(string_literal29);
			adaptor.addChild(root_0, string_literal29_tree);
			}

			char_literal30=(Token)match(input,DOT,FOLLOW_DOT_in_packageE505); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal30_tree = (Object)adaptor.create(char_literal30);
			adaptor.addChild(root_0, char_literal30_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 7, packageE_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageE"


	public static class packageHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "packageHead"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:1: packageHead : 'package' namespaceName ';' ;
	public final DelphiParser.packageHead_return packageHead() throws RecognitionException {
		DelphiParser.packageHead_return retval = new DelphiParser.packageHead_return();
		retval.start = input.LT(1);
		int packageHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal31=null;
		Token char_literal33=null;
		ParserRuleReturnScope namespaceName32 =null;

		Object string_literal31_tree=null;
		Object char_literal33_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:30: ( 'package' namespaceName ';' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:88:32: 'package' namespaceName ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal31=(Token)match(input,PACKAGE,FOLLOW_PACKAGE_in_packageHead559); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal31_tree = (Object)adaptor.create(string_literal31);
			adaptor.addChild(root_0, string_literal31_tree);
			}

			pushFollow(FOLLOW_namespaceName_in_packageHead561);
			namespaceName32=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName32.getTree());

			char_literal33=(Token)match(input,SEMI,FOLLOW_SEMI_in_packageHead563); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal33_tree = (Object)adaptor.create(char_literal33);
			adaptor.addChild(root_0, char_literal33_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 8, packageHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "packageHead"


	public static class unit_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unit"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:1: unit : unitHead unitInterface unitImplementation unitBlock '.' ;
	public final DelphiParser.unit_return unit() throws RecognitionException {
		DelphiParser.unit_return retval = new DelphiParser.unit_return();
		retval.start = input.LT(1);
		int unit_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal38=null;
		ParserRuleReturnScope unitHead34 =null;
		ParserRuleReturnScope unitInterface35 =null;
		ParserRuleReturnScope unitImplementation36 =null;
		ParserRuleReturnScope unitBlock37 =null;

		Object char_literal38_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:30: ( unitHead unitInterface unitImplementation unitBlock '.' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:90:32: unitHead unitInterface unitImplementation unitBlock '.'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_unitHead_in_unit624);
			unitHead34=unitHead();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitHead34.getTree());

			pushFollow(FOLLOW_unitInterface_in_unit626);
			unitInterface35=unitInterface();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInterface35.getTree());

			pushFollow(FOLLOW_unitImplementation_in_unit628);
			unitImplementation36=unitImplementation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitImplementation36.getTree());

			pushFollow(FOLLOW_unitBlock_in_unit630);
			unitBlock37=unitBlock();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unitBlock37.getTree());

			char_literal38=(Token)match(input,DOT,FOLLOW_DOT_in_unit632); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal38_tree = (Object)adaptor.create(char_literal38);
			adaptor.addChild(root_0, char_literal38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 9, unit_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unit"


	public static class unitHead_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitHead"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:1: unitHead : 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) ;
	public final DelphiParser.unitHead_return unitHead() throws RecognitionException {
		DelphiParser.unitHead_return retval = new DelphiParser.unitHead_return();
		retval.start = input.LT(1);
		int unitHead_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal39=null;
		Token char_literal42=null;
		ParserRuleReturnScope namespaceName40 =null;
		ParserRuleReturnScope hintingDirective41 =null;

		Object string_literal39_tree=null;
		Object char_literal42_tree=null;
		RewriteRuleTokenStream stream_UNIT=new RewriteRuleTokenStream(adaptor,"token UNIT");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:30: ( 'unit' namespaceName ( hintingDirective )* ';' -> ^( 'unit' namespaceName ( hintingDirective )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:32: 'unit' namespaceName ( hintingDirective )* ';'
			{
			string_literal39=(Token)match(input,UNIT,FOLLOW_UNIT_in_unitHead689); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_UNIT.add(string_literal39);

			pushFollow(FOLLOW_namespaceName_in_unitHead691);
			namespaceName40=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName40.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:53: ( hintingDirective )*
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==DEPRECATED||LA10_0==EXPERIMENTAL||LA10_0==LIBRARY||LA10_0==PLATFORM) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:54: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_unitHead694);
					hintingDirective41=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective41.getTree());
					}
					break;

				default :
					break loop10;
				}
			}

			char_literal42=(Token)match(input,SEMI,FOLLOW_SEMI_in_unitHead698); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal42);

			// AST REWRITE
			// elements: UNIT, hintingDirective, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 92:77: -> ^( 'unit' namespaceName ( hintingDirective )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:80: ^( 'unit' namespaceName ( hintingDirective )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_UNIT.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceName.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:92:103: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_1, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 10, unitHead_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitHead"


	public static class unitInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInterface"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:1: unitInterface : 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) ;
	public final DelphiParser.unitInterface_return unitInterface() throws RecognitionException {
		DelphiParser.unitInterface_return retval = new DelphiParser.unitInterface_return();
		retval.start = input.LT(1);
		int unitInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal43=null;
		ParserRuleReturnScope usesClause44 =null;
		ParserRuleReturnScope interfaceDecl45 =null;

		Object string_literal43_tree=null;
		RewriteRuleTokenStream stream_INTERFACE=new RewriteRuleTokenStream(adaptor,"token INTERFACE");
		RewriteRuleSubtreeStream stream_interfaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceDecl");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:30: ( 'interface' ( usesClause )? ( interfaceDecl )* -> ^( 'interface' ( usesClause )? ( interfaceDecl )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:32: 'interface' ( usesClause )? ( interfaceDecl )*
			{
			string_literal43=(Token)match(input,INTERFACE,FOLLOW_INTERFACE_in_unitInterface763); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_INTERFACE.add(string_literal43);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:44: ( usesClause )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==USES) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:45: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitInterface766);
					usesClause44=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause44.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:58: ( interfaceDecl )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==EOF||LA12_0==ADD||(LA12_0 >= ANSISTRING && LA12_0 <= ARRAY)||(LA12_0 >= AT && LA12_0 <= AT2)||LA12_0==BREAK||LA12_0==CLASS||(LA12_0 >= CONST && LA12_0 <= ControlString)||(LA12_0 >= DEFAULT && LA12_0 <= DESTRUCTOR)||LA12_0==DISPINTERFACE||LA12_0==EXIT||(LA12_0 >= EXPORT && LA12_0 <= EXPORTS)||LA12_0==FALSE||(LA12_0 >= FILE && LA12_0 <= FINAL)||LA12_0==FUNCTION||LA12_0==HELPER||LA12_0==IMPLEMENTS||(LA12_0 >= INDEX && LA12_0 <= INHERITED)||LA12_0==INTERFACE||LA12_0==LBRACK||(LA12_0 >= LOCAL && LA12_0 <= LPAREN)||(LA12_0 >= MESSAGE && LA12_0 <= MINUS)||LA12_0==NAME||LA12_0==NIL||LA12_0==NOT||LA12_0==OBJECT||LA12_0==OPERATOR||LA12_0==OUT||(LA12_0 >= PACKAGE && LA12_0 <= PACKED)||(LA12_0 >= PLUS && LA12_0 <= POINTER2)||LA12_0==PROCEDURE||LA12_0==PROPERTY||LA12_0==QuotedString||(LA12_0 >= READ && LA12_0 <= REGISTER)||LA12_0==REMOVE||LA12_0==RESOURCESTRING||LA12_0==SET||(LA12_0 >= STORED && LA12_0 <= STRING)||LA12_0==THREADVAR||LA12_0==TRUE||LA12_0==TYPE||LA12_0==TkAsmHexNum||(LA12_0 >= TkHexNum && LA12_0 <= TkIntNum)||LA12_0==TkRealNum||LA12_0==VAR||LA12_0==VARIANT||LA12_0==WRITE||LA12_0==199) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:59: interfaceDecl
					{
					pushFollow(FOLLOW_interfaceDecl_in_unitInterface771);
					interfaceDecl45=interfaceDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceDecl.add(interfaceDecl45.getTree());
					}
					break;

				default :
					break loop12;
				}
			}

			// AST REWRITE
			// elements: INTERFACE, usesClause, interfaceDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 94:75: -> ^( 'interface' ( usesClause )? ( interfaceDecl )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:78: ^( 'interface' ( usesClause )? ( interfaceDecl )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:92: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:94:106: ( interfaceDecl )*
				while ( stream_interfaceDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_interfaceDecl.nextTree());
				}
				stream_interfaceDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 11, unitInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInterface"


	public static class unitImplementation_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitImplementation"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:1: unitImplementation : 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) ;
	public final DelphiParser.unitImplementation_return unitImplementation() throws RecognitionException {
		DelphiParser.unitImplementation_return retval = new DelphiParser.unitImplementation_return();
		retval.start = input.LT(1);
		int unitImplementation_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal46=null;
		ParserRuleReturnScope usesClause47 =null;
		ParserRuleReturnScope declSection48 =null;

		Object string_literal46_tree=null;
		RewriteRuleTokenStream stream_IMPLEMENTATION=new RewriteRuleTokenStream(adaptor,"token IMPLEMENTATION");
		RewriteRuleSubtreeStream stream_declSection=new RewriteRuleSubtreeStream(adaptor,"rule declSection");
		RewriteRuleSubtreeStream stream_usesClause=new RewriteRuleSubtreeStream(adaptor,"rule usesClause");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:30: ( 'implementation' ( usesClause )? ( declSection )* -> ^( 'implementation' ( usesClause )? ( declSection )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:32: 'implementation' ( usesClause )? ( declSection )*
			{
			string_literal46=(Token)match(input,IMPLEMENTATION,FOLLOW_IMPLEMENTATION_in_unitImplementation836); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IMPLEMENTATION.add(string_literal46);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:49: ( usesClause )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==USES) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:50: usesClause
					{
					pushFollow(FOLLOW_usesClause_in_unitImplementation839);
					usesClause47=usesClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_usesClause.add(usesClause47.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:63: ( declSection )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==EOF||LA14_0==ADD||(LA14_0 >= ANSISTRING && LA14_0 <= ARRAY)||(LA14_0 >= AT && LA14_0 <= AT2)||LA14_0==BREAK||LA14_0==CLASS||(LA14_0 >= CONST && LA14_0 <= ControlString)||(LA14_0 >= DEFAULT && LA14_0 <= DESTRUCTOR)||LA14_0==DISPINTERFACE||LA14_0==EXIT||(LA14_0 >= EXPORT && LA14_0 <= EXPORTS)||LA14_0==FALSE||(LA14_0 >= FILE && LA14_0 <= FINAL)||LA14_0==FUNCTION||LA14_0==HELPER||LA14_0==IMPLEMENTS||(LA14_0 >= INDEX && LA14_0 <= INHERITED)||LA14_0==INTERFACE||(LA14_0 >= LABEL && LA14_0 <= LBRACK)||(LA14_0 >= LOCAL && LA14_0 <= LPAREN)||(LA14_0 >= MESSAGE && LA14_0 <= MINUS)||LA14_0==NAME||LA14_0==NIL||LA14_0==NOT||LA14_0==OBJECT||LA14_0==OPERATOR||LA14_0==OUT||(LA14_0 >= PACKAGE && LA14_0 <= PACKED)||(LA14_0 >= PLUS && LA14_0 <= POINTER2)||LA14_0==PROCEDURE||LA14_0==PROPERTY||LA14_0==QuotedString||(LA14_0 >= READ && LA14_0 <= REGISTER)||LA14_0==REMOVE||LA14_0==RESOURCESTRING||LA14_0==SET||(LA14_0 >= STORED && LA14_0 <= STRING)||LA14_0==THREADVAR||LA14_0==TRUE||LA14_0==TYPE||LA14_0==TkAsmHexNum||(LA14_0 >= TkHexNum && LA14_0 <= TkIntNum)||LA14_0==TkRealNum||LA14_0==VAR||LA14_0==VARIANT||LA14_0==WRITE||LA14_0==199) ) {
					alt14=1;
				}

				switch (alt14) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:64: declSection
					{
					pushFollow(FOLLOW_declSection_in_unitImplementation844);
					declSection48=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_declSection.add(declSection48.getTree());
					}
					break;

				default :
					break loop14;
				}
			}

			// AST REWRITE
			// elements: declSection, usesClause, IMPLEMENTATION
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 96:78: -> ^( 'implementation' ( usesClause )? ( declSection )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:81: ^( 'implementation' ( usesClause )? ( declSection )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_IMPLEMENTATION.nextNode(), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:100: ( usesClause )?
				if ( stream_usesClause.hasNext() ) {
					adaptor.addChild(root_1, stream_usesClause.nextTree());
				}
				stream_usesClause.reset();

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:96:114: ( declSection )*
				while ( stream_declSection.hasNext() ) {
					adaptor.addChild(root_1, stream_declSection.nextTree());
				}
				stream_declSection.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 12, unitImplementation_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitImplementation"


	public static class unitBlock_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitBlock"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:1: unitBlock : ( unitInitialization 'end' | compoundStatement | 'end' );
	public final DelphiParser.unitBlock_return unitBlock() throws RecognitionException {
		DelphiParser.unitBlock_return retval = new DelphiParser.unitBlock_return();
		retval.start = input.LT(1);
		int unitBlock_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal50=null;
		Token string_literal52=null;
		ParserRuleReturnScope unitInitialization49 =null;
		ParserRuleReturnScope compoundStatement51 =null;

		Object string_literal50_tree=null;
		Object string_literal52_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:30: ( unitInitialization 'end' | compoundStatement | 'end' )
			int alt15=3;
			switch ( input.LA(1) ) {
			case INITIALIZATION:
				{
				alt15=1;
				}
				break;
			case BEGIN:
				{
				alt15=2;
				}
				break;
			case END:
				{
				alt15=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 15, 0, input);
				throw nvae;
			}
			switch (alt15) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:98:32: unitInitialization 'end'
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unitInitialization_in_unitBlock918);
					unitInitialization49=unitInitialization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitInitialization49.getTree());

					string_literal50=(Token)match(input,END,FOLLOW_END_in_unitBlock920); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal50_tree = (Object)adaptor.create(string_literal50);
					adaptor.addChild(root_0, string_literal50_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:99:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_unitBlock953);
					compoundStatement51=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement51.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:100:32: 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal52=(Token)match(input,END,FOLLOW_END_in_unitBlock986); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal52_tree = (Object)adaptor.create(string_literal52);
					adaptor.addChild(root_0, string_literal52_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 13, unitBlock_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitBlock"


	public static class unitInitialization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitInitialization"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:1: unitInitialization : 'initialization' statementList ( unitFinalization )? ;
	public final DelphiParser.unitInitialization_return unitInitialization() throws RecognitionException {
		DelphiParser.unitInitialization_return retval = new DelphiParser.unitInitialization_return();
		retval.start = input.LT(1);
		int unitInitialization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal53=null;
		ParserRuleReturnScope statementList54 =null;
		ParserRuleReturnScope unitFinalization55 =null;

		Object string_literal53_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:30: ( 'initialization' statementList ( unitFinalization )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:32: 'initialization' statementList ( unitFinalization )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal53=(Token)match(input,INITIALIZATION,FOLLOW_INITIALIZATION_in_unitInitialization1033); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal53_tree = (Object)adaptor.create(string_literal53);
			adaptor.addChild(root_0, string_literal53_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitInitialization1035);
			statementList54=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList54.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:63: ( unitFinalization )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==FINALIZATION) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:102:64: unitFinalization
					{
					pushFollow(FOLLOW_unitFinalization_in_unitInitialization1038);
					unitFinalization55=unitFinalization();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unitFinalization55.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 14, unitInitialization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitInitialization"


	public static class unitFinalization_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unitFinalization"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:1: unitFinalization : 'finalization' statementList ;
	public final DelphiParser.unitFinalization_return unitFinalization() throws RecognitionException {
		DelphiParser.unitFinalization_return retval = new DelphiParser.unitFinalization_return();
		retval.start = input.LT(1);
		int unitFinalization_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal56=null;
		ParserRuleReturnScope statementList57 =null;

		Object string_literal56_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:30: ( 'finalization' statementList )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:104:32: 'finalization' statementList
			{
			root_0 = (Object)adaptor.nil();


			string_literal56=(Token)match(input,FINALIZATION,FOLLOW_FINALIZATION_in_unitFinalization1089); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal56_tree = (Object)adaptor.create(string_literal56);
			adaptor.addChild(root_0, string_literal56_tree);
			}

			pushFollow(FOLLOW_statementList_in_unitFinalization1091);
			statementList57=statementList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList57.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 15, unitFinalization_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unitFinalization"


	public static class containsClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "containsClause"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:1: containsClause : 'contains' namespaceFileNameList ;
	public final DelphiParser.containsClause_return containsClause() throws RecognitionException {
		DelphiParser.containsClause_return retval = new DelphiParser.containsClause_return();
		retval.start = input.LT(1);
		int containsClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal58=null;
		ParserRuleReturnScope namespaceFileNameList59 =null;

		Object string_literal58_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:30: ( 'contains' namespaceFileNameList )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:109:32: 'contains' namespaceFileNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal58=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_containsClause1145); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal58_tree = (Object)adaptor.create(string_literal58);
			adaptor.addChild(root_0, string_literal58_tree);
			}

			pushFollow(FOLLOW_namespaceFileNameList_in_containsClause1147);
			namespaceFileNameList59=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceFileNameList59.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 16, containsClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "containsClause"


	public static class requiresClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "requiresClause"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:1: requiresClause : 'requires' namespaceNameList ;
	public final DelphiParser.requiresClause_return requiresClause() throws RecognitionException {
		DelphiParser.requiresClause_return retval = new DelphiParser.requiresClause_return();
		retval.start = input.LT(1);
		int requiresClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal60=null;
		ParserRuleReturnScope namespaceNameList61 =null;

		Object string_literal60_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:30: ( 'requires' namespaceNameList )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:111:32: 'requires' namespaceNameList
			{
			root_0 = (Object)adaptor.nil();


			string_literal60=(Token)match(input,REQUIRES,FOLLOW_REQUIRES_in_requiresClause1198); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal60_tree = (Object)adaptor.create(string_literal60);
			adaptor.addChild(root_0, string_literal60_tree);
			}

			pushFollow(FOLLOW_namespaceNameList_in_requiresClause1200);
			namespaceNameList61=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceNameList61.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 17, requiresClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "requiresClause"


	public static class usesClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesClause"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:1: usesClause : 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) ;
	public final DelphiParser.usesClause_return usesClause() throws RecognitionException {
		DelphiParser.usesClause_return retval = new DelphiParser.usesClause_return();
		retval.start = input.LT(1);
		int usesClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal62=null;
		ParserRuleReturnScope namespaceNameList63 =null;

		Object string_literal62_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:30: ( 'uses' namespaceNameList -> ^( 'uses' namespaceNameList ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:32: 'uses' namespaceNameList
			{
			string_literal62=(Token)match(input,USES,FOLLOW_USES_in_usesClause1255); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal62);

			pushFollow(FOLLOW_namespaceNameList_in_usesClause1257);
			namespaceNameList63=namespaceNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceNameList.add(namespaceNameList63.getTree());
			// AST REWRITE
			// elements: USES, namespaceNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 113:57: -> ^( 'uses' namespaceNameList )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:113:60: ^( 'uses' namespaceNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 18, usesClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesClause"


	public static class usesFileClause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usesFileClause"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:1: usesFileClause : 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) ;
	public final DelphiParser.usesFileClause_return usesFileClause() throws RecognitionException {
		DelphiParser.usesFileClause_return retval = new DelphiParser.usesFileClause_return();
		retval.start = input.LT(1);
		int usesFileClause_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal64=null;
		ParserRuleReturnScope namespaceFileNameList65 =null;

		Object string_literal64_tree=null;
		RewriteRuleTokenStream stream_USES=new RewriteRuleTokenStream(adaptor,"token USES");
		RewriteRuleSubtreeStream stream_namespaceFileNameList=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileNameList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:30: ( 'uses' namespaceFileNameList -> ^( 'uses' namespaceFileNameList ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:32: 'uses' namespaceFileNameList
			{
			string_literal64=(Token)match(input,USES,FOLLOW_USES_in_usesFileClause1316); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_USES.add(string_literal64);

			pushFollow(FOLLOW_namespaceFileNameList_in_usesFileClause1318);
			namespaceFileNameList65=namespaceFileNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileNameList.add(namespaceFileNameList65.getTree());
			// AST REWRITE
			// elements: USES, namespaceFileNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 115:61: -> ^( 'uses' namespaceFileNameList )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:115:64: ^( 'uses' namespaceFileNameList )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_USES.nextNode(), root_1);
				adaptor.addChild(root_1, stream_namespaceFileNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 19, usesFileClause_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usesFileClause"


	public static class namespaceFileNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileNameList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:1: namespaceFileNameList : namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* ;
	public final DelphiParser.namespaceFileNameList_return namespaceFileNameList() throws RecognitionException {
		DelphiParser.namespaceFileNameList_return retval = new DelphiParser.namespaceFileNameList_return();
		retval.start = input.LT(1);
		int namespaceFileNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal67=null;
		Token char_literal69=null;
		ParserRuleReturnScope namespaceFileName66 =null;
		ParserRuleReturnScope namespaceFileName68 =null;

		Object char_literal67_tree=null;
		Object char_literal69_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceFileName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceFileName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:30: ( namespaceFileName ( ',' namespaceFileName )* ';' -> namespaceFileName ( namespaceFileName )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:32: namespaceFileName ( ',' namespaceFileName )* ';'
			{
			pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1370);
			namespaceFileName66=namespaceFileName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName66.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:50: ( ',' namespaceFileName )*
			loop17:
			while (true) {
				int alt17=2;
				int LA17_0 = input.LA(1);
				if ( (LA17_0==COMMA) ) {
					alt17=1;
				}

				switch (alt17) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:51: ',' namespaceFileName
					{
					char_literal67=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceFileNameList1373); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal67);

					pushFollow(FOLLOW_namespaceFileName_in_namespaceFileNameList1375);
					namespaceFileName68=namespaceFileName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceFileName.add(namespaceFileName68.getTree());
					}
					break;

				default :
					break loop17;
				}
			}

			char_literal69=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceFileNameList1379); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal69);

			// AST REWRITE
			// elements: namespaceFileName, namespaceFileName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 117:79: -> namespaceFileName ( namespaceFileName )*
			{
				adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:117:100: ( namespaceFileName )*
				while ( stream_namespaceFileName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceFileName.nextTree());
				}
				stream_namespaceFileName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 20, namespaceFileNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileNameList"


	public static class namespaceFileName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceFileName"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:1: namespaceFileName : namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) ;
	public final DelphiParser.namespaceFileName_return namespaceFileName() throws RecognitionException {
		DelphiParser.namespaceFileName_return retval = new DelphiParser.namespaceFileName_return();
		retval.start = input.LT(1);
		int namespaceFileName_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal71=null;
		Token QuotedString72=null;
		ParserRuleReturnScope namespaceName70 =null;

		Object string_literal71_tree=null;
		Object QuotedString72_tree=null;
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:30: ( namespaceName ( 'in' QuotedString )? -> ^( namespaceName ( QuotedString )? ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:32: namespaceName ( 'in' QuotedString )?
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceFileName1436);
			namespaceName70=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName70.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:46: ( 'in' QuotedString )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==IN) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:47: 'in' QuotedString
					{
					string_literal71=(Token)match(input,IN,FOLLOW_IN_in_namespaceFileName1439); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IN.add(string_literal71);

					QuotedString72=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_namespaceFileName1441); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString72);

					}
					break;

			}

			// AST REWRITE
			// elements: namespaceName, QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 119:67: -> ^( namespaceName ( QuotedString )? )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:70: ^( namespaceName ( QuotedString )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_namespaceName.nextNode(), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:119:86: ( QuotedString )?
				if ( stream_QuotedString.hasNext() ) {
					adaptor.addChild(root_1, stream_QuotedString.nextNode());
				}
				stream_QuotedString.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 21, namespaceFileName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceFileName"


	public static class namespaceNameList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceNameList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:1: namespaceNameList : namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* ;
	public final DelphiParser.namespaceNameList_return namespaceNameList() throws RecognitionException {
		DelphiParser.namespaceNameList_return retval = new DelphiParser.namespaceNameList_return();
		retval.start = input.LT(1);
		int namespaceNameList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal74=null;
		Token char_literal76=null;
		ParserRuleReturnScope namespaceName73 =null;
		ParserRuleReturnScope namespaceName75 =null;

		Object char_literal74_tree=null;
		Object char_literal76_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_namespaceName=new RewriteRuleSubtreeStream(adaptor,"rule namespaceName");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:30: ( namespaceName ( ',' namespaceName )* ';' -> namespaceName ( namespaceName )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:32: namespaceName ( ',' namespaceName )* ';'
			{
			pushFollow(FOLLOW_namespaceName_in_namespaceNameList1502);
			namespaceName73=namespaceName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName73.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:46: ( ',' namespaceName )*
			loop19:
			while (true) {
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==COMMA) ) {
					alt19=1;
				}

				switch (alt19) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:47: ',' namespaceName
					{
					char_literal74=(Token)match(input,COMMA,FOLLOW_COMMA_in_namespaceNameList1505); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal74);

					pushFollow(FOLLOW_namespaceName_in_namespaceNameList1507);
					namespaceName75=namespaceName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_namespaceName.add(namespaceName75.getTree());
					}
					break;

				default :
					break loop19;
				}
			}

			char_literal76=(Token)match(input,SEMI,FOLLOW_SEMI_in_namespaceNameList1511); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal76);

			// AST REWRITE
			// elements: namespaceName, namespaceName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 121:71: -> namespaceName ( namespaceName )*
			{
				adaptor.addChild(root_0, stream_namespaceName.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:121:88: ( namespaceName )*
				while ( stream_namespaceName.hasNext() ) {
					adaptor.addChild(root_0, stream_namespaceName.nextTree());
				}
				stream_namespaceName.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 22, namespaceNameList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceNameList"


	public static class block_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "block"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:1: block : ( declSection )* ( blockBody )? ;
	public final DelphiParser.block_return block() throws RecognitionException {
		DelphiParser.block_return retval = new DelphiParser.block_return();
		retval.start = input.LT(1);
		int block_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope declSection77 =null;
		ParserRuleReturnScope blockBody78 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:30: ( ( declSection )* ( blockBody )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: ( declSection )* ( blockBody )?
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:32: ( declSection )*
			loop20:
			while (true) {
				int alt20=2;
				switch ( input.LA(1) ) {
				case LBRACK:
					{
					int LA20_2 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CLASS:
					{
					int LA20_3 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case PROCEDURE:
					{
					int LA20_4 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case FUNCTION:
					{
					int LA20_5 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA20_6 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case TYPE:
					{
					int LA20_7 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA20_8 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case LABEL:
					{
					int LA20_9 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA20_10 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				case EXPORTS:
					{
					int LA20_11 = input.LA(2);
					if ( (synpred23_Delphi()) ) {
						alt20=1;
					}

					}
					break;
				}
				switch (alt20) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: declSection
					{
					pushFollow(FOLLOW_declSection_in_block1584);
					declSection77=declSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, declSection77.getTree());

					}
					break;

				default :
					break loop20;
				}
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:47: ( blockBody )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==BEGIN) ) {
				int LA21_1 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			else if ( (LA21_0==ASM) ) {
				int LA21_2 = input.LA(2);
				if ( (synpred24_Delphi()) ) {
					alt21=1;
				}
			}
			switch (alt21) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: blockBody
					{
					pushFollow(FOLLOW_blockBody_in_block1589);
					blockBody78=blockBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, blockBody78.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 23, block_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "block"


	public static class blockBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "blockBody"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:1: blockBody : ( compoundStatement | assemblerStatement );
	public final DelphiParser.blockBody_return blockBody() throws RecognitionException {
		DelphiParser.blockBody_return retval = new DelphiParser.blockBody_return();
		retval.start = input.LT(1);
		int blockBody_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope compoundStatement79 =null;
		ParserRuleReturnScope assemblerStatement80 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:30: ( compoundStatement | assemblerStatement )
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==BEGIN) ) {
				alt22=1;
			}
			else if ( (LA22_0==ASM) ) {
				alt22=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}

			switch (alt22) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:128:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_blockBody1647);
					compoundStatement79=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement79.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:129:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_blockBody1680);
					assemblerStatement80=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement80.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 24, blockBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "blockBody"


	public static class declSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "declSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:1: declSection : ( labelDeclSection | constSection | typeSection | varSection | methodDecl | procDecl | exportedProcHeading | exportsSection );
	public final DelphiParser.declSection_return declSection() throws RecognitionException {
		DelphiParser.declSection_return retval = new DelphiParser.declSection_return();
		retval.start = input.LT(1);
		int declSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope labelDeclSection81 =null;
		ParserRuleReturnScope constSection82 =null;
		ParserRuleReturnScope typeSection83 =null;
		ParserRuleReturnScope varSection84 =null;
		ParserRuleReturnScope methodDecl85 =null;
		ParserRuleReturnScope procDecl86 =null;
		ParserRuleReturnScope exportedProcHeading87 =null;
		ParserRuleReturnScope exportsSection88 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:30: ( labelDeclSection | constSection | typeSection | varSection | methodDecl | procDecl | exportedProcHeading | exportsSection )
			int alt23=8;
			switch ( input.LA(1) ) {
			case LABEL:
				{
				alt23=1;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt23=2;
				}
				break;
			case TYPE:
				{
				alt23=3;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt23=4;
				}
				break;
			case LBRACK:
				{
				int LA23_5 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt23=5;
				}
				break;
			case PROCEDURE:
				{
				int LA23_7 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}
				else if ( (synpred32_Delphi()) ) {
					alt23=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FUNCTION:
				{
				int LA23_8 = input.LA(2);
				if ( (synpred30_Delphi()) ) {
					alt23=5;
				}
				else if ( (synpred31_Delphi()) ) {
					alt23=6;
				}
				else if ( (synpred32_Delphi()) ) {
					alt23=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 23, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXPORTS:
				{
				alt23=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 23, 0, input);
				throw nvae;
			}
			switch (alt23) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:131:32: labelDeclSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_labelDeclSection_in_declSection1734);
					labelDeclSection81=labelDeclSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, labelDeclSection81.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:132:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_declSection1767);
					constSection82=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection82.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:133:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_declSection1800);
					typeSection83=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection83.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:134:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_declSection1833);
					varSection84=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection84.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_declSection1866);
					methodDecl85=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl85.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_declSection1899);
					procDecl86=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl86.getTree());

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: exportedProcHeading
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportedProcHeading_in_declSection1932);
					exportedProcHeading87=exportedProcHeading();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportedProcHeading87.getTree());

					}
					break;
				case 8 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:138:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_declSection1965);
					exportsSection88=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection88.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 25, declSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "declSection"


	public static class interfaceDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:1: interfaceDecl : ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl );
	public final DelphiParser.interfaceDecl_return interfaceDecl() throws RecognitionException {
		DelphiParser.interfaceDecl_return retval = new DelphiParser.interfaceDecl_return();
		retval.start = input.LT(1);
		int interfaceDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constSection89 =null;
		ParserRuleReturnScope typeSection90 =null;
		ParserRuleReturnScope varSection91 =null;
		ParserRuleReturnScope exportedProcHeading92 =null;
		ParserRuleReturnScope exportsSection93 =null;
		ParserRuleReturnScope procDecl94 =null;
		ParserRuleReturnScope methodDecl95 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:30: ( constSection | typeSection | varSection | exportedProcHeading | exportsSection | procDecl | methodDecl )
			int alt24=7;
			switch ( input.LA(1) ) {
			case CONST:
			case RESOURCESTRING:
				{
				alt24=1;
				}
				break;
			case TYPE:
				{
				alt24=2;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt24=3;
				}
				break;
			case PROCEDURE:
				{
				int LA24_4 = input.LA(2);
				if ( (synpred36_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case FUNCTION:
				{
				int LA24_5 = input.LA(2);
				if ( (synpred36_Delphi()) ) {
					alt24=4;
				}
				else if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case EXPORTS:
				{
				alt24=5;
				}
				break;
			case LBRACK:
				{
				int LA24_7 = input.LA(2);
				if ( (synpred38_Delphi()) ) {
					alt24=6;
				}
				else if ( (true) ) {
					alt24=7;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
				{
				alt24=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 24, 0, input);
				throw nvae;
			}
			switch (alt24) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:140:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_interfaceDecl2017);
					constSection89=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection89.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:141:32: typeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeSection_in_interfaceDecl2050);
					typeSection90=typeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeSection90.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:142:32: varSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_varSection_in_interfaceDecl2083);
					varSection91=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection91.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: exportedProcHeading
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportedProcHeading_in_interfaceDecl2116);
					exportedProcHeading92=exportedProcHeading();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportedProcHeading92.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:144:32: exportsSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exportsSection_in_interfaceDecl2149);
					exportsSection93=exportsSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportsSection93.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procDecl_in_interfaceDecl2182);
					procDecl94=procDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procDecl94.getTree());

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:146:32: methodDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodDecl_in_interfaceDecl2215);
					methodDecl95=methodDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDecl95.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 26, interfaceDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceDecl"


	public static class labelDeclSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "labelDeclSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:1: labelDeclSection : 'label' label ( ',' label )* ';' ;
	public final DelphiParser.labelDeclSection_return labelDeclSection() throws RecognitionException {
		DelphiParser.labelDeclSection_return retval = new DelphiParser.labelDeclSection_return();
		retval.start = input.LT(1);
		int labelDeclSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal96=null;
		Token char_literal98=null;
		Token char_literal100=null;
		ParserRuleReturnScope label97 =null;
		ParserRuleReturnScope label99 =null;

		Object string_literal96_tree=null;
		Object char_literal98_tree=null;
		Object char_literal100_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:30: ( 'label' label ( ',' label )* ';' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:32: 'label' label ( ',' label )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal96=(Token)match(input,LABEL,FOLLOW_LABEL_in_labelDeclSection2264); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal96_tree = (Object)adaptor.create(string_literal96);
			adaptor.addChild(root_0, string_literal96_tree);
			}

			pushFollow(FOLLOW_label_in_labelDeclSection2266);
			label97=label();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, label97.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:46: ( ',' label )*
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==COMMA) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:148:47: ',' label
					{
					char_literal98=(Token)match(input,COMMA,FOLLOW_COMMA_in_labelDeclSection2269); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal98_tree = (Object)adaptor.create(char_literal98);
					adaptor.addChild(root_0, char_literal98_tree);
					}

					pushFollow(FOLLOW_label_in_labelDeclSection2271);
					label99=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label99.getTree());

					}
					break;

				default :
					break loop25;
				}
			}

			char_literal100=(Token)match(input,SEMI,FOLLOW_SEMI_in_labelDeclSection2275); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal100_tree = (Object)adaptor.create(char_literal100);
			adaptor.addChild(root_0, char_literal100_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 27, labelDeclSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "labelDeclSection"


	public static class constSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:1: constSection : constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) ;
	public final DelphiParser.constSection_return constSection() throws RecognitionException {
		DelphiParser.constSection_return retval = new DelphiParser.constSection_return();
		retval.start = input.LT(1);
		int constSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope constKey101 =null;
		ParserRuleReturnScope constDeclaration102 =null;

		RewriteRuleSubtreeStream stream_constDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constDeclaration");
		RewriteRuleSubtreeStream stream_constKey=new RewriteRuleSubtreeStream(adaptor,"rule constKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:30: ( constKey ( constDeclaration )* -> ^( constKey ( constDeclaration )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:32: constKey ( constDeclaration )*
			{
			pushFollow(FOLLOW_constKey_in_constSection2328);
			constKey101=constKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constKey.add(constKey101.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:41: ( constDeclaration )*
			loop26:
			while (true) {
				int alt26=2;
				alt26 = dfa26.predict(input);
				switch (alt26) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: constDeclaration
					{
					pushFollow(FOLLOW_constDeclaration_in_constSection2331);
					constDeclaration102=constDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constDeclaration.add(constDeclaration102.getTree());
					}
					break;

				default :
					break loop26;
				}
			}

			// AST REWRITE
			// elements: constDeclaration, constKey
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 150:61: -> ^( constKey ( constDeclaration )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:64: ^( constKey ( constDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_constKey.nextNode(), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:75: ( constDeclaration )*
				while ( stream_constDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_constDeclaration.nextTree());
				}
				stream_constDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 28, constSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constSection"


	public static class constKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constKey"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:1: constKey : ( 'const' | 'resourcestring' );
	public final DelphiParser.constKey_return constKey() throws RecognitionException {
		DelphiParser.constKey_return retval = new DelphiParser.constKey_return();
		retval.start = input.LT(1);
		int constKey_StartIndex = input.index();

		Object root_0 = null;

		Token set103=null;

		Object set103_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:152:30: ( 'const' | 'resourcestring' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set103=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==RESOURCESTRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set103));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 29, constKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constKey"


	public static class constDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constDeclaration"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:1: constDeclaration : ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression ;
	public final DelphiParser.constDeclaration_return constDeclaration() throws RecognitionException {
		DelphiParser.constDeclaration_return retval = new DelphiParser.constDeclaration_return();
		retval.start = input.LT(1);
		int constDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal106=null;
		Token char_literal108=null;
		Token char_literal111=null;
		ParserRuleReturnScope customAttribute104 =null;
		ParserRuleReturnScope ident105 =null;
		ParserRuleReturnScope typeDecl107 =null;
		ParserRuleReturnScope constExpression109 =null;
		ParserRuleReturnScope hintingDirective110 =null;

		Object char_literal106_tree=null;
		Object char_literal108_tree=null;
		Object char_literal111_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_constExpression=new RewriteRuleSubtreeStream(adaptor,"rule constExpression");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:30: ( ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';' -> ident ( typeDecl )? '=' constExpression )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:32: ( customAttribute )? ident ( ':' typeDecl )? '=' constExpression ( hintingDirective )* ';'
			{
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:32: ( customAttribute )?
			int alt27=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt27=1;
					}
					break;
				case TkIdentifier:
					{
					int LA27_2 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case 199:
					{
					int LA27_3 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA27_4 = input.LA(2);
					if ( (synpred42_Delphi()) ) {
						alt27=1;
					}
					}
					break;
			}
			switch (alt27) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_constDeclaration2486);
					customAttribute104=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute104.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_ident_in_constDeclaration2490);
			ident105=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident105.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:57: ( ':' typeDecl )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==COLON) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:58: ':' typeDecl
					{
					char_literal106=(Token)match(input,COLON,FOLLOW_COLON_in_constDeclaration2493); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal106);

					pushFollow(FOLLOW_typeDecl_in_constDeclaration2495);
					typeDecl107=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl107.getTree());
					}
					break;

			}

			char_literal108=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_constDeclaration2499); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal108);

			pushFollow(FOLLOW_constExpression_in_constDeclaration2501);
			constExpression109=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constExpression.add(constExpression109.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:93: ( hintingDirective )*
			loop29:
			while (true) {
				int alt29=2;
				int LA29_0 = input.LA(1);
				if ( (LA29_0==DEPRECATED||LA29_0==EXPERIMENTAL||LA29_0==LIBRARY||LA29_0==PLATFORM) ) {
					alt29=1;
				}

				switch (alt29) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:94: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_constDeclaration2504);
					hintingDirective110=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective110.getTree());
					}
					break;

				default :
					break loop29;
				}
			}

			char_literal111=(Token)match(input,SEMI,FOLLOW_SEMI_in_constDeclaration2508); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal111);

			// AST REWRITE
			// elements: typeDecl, constExpression, ident, EQUAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 155:117: -> ident ( typeDecl )? '=' constExpression
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:126: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_0, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, stream_EQUAL.nextNode());
				adaptor.addChild(root_0, stream_constExpression.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 30, constDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constDeclaration"


	public static class typeSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:1: typeSection : 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) ;
	public final DelphiParser.typeSection_return typeSection() throws RecognitionException {
		DelphiParser.typeSection_return retval = new DelphiParser.typeSection_return();
		retval.start = input.LT(1);
		int typeSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal112=null;
		ParserRuleReturnScope typeDeclaration113 =null;
		ParserRuleReturnScope typeDeclaration114 =null;

		Object string_literal112_tree=null;
		RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:30: ( 'type' typeDeclaration ( typeDeclaration )* -> ^( 'type' typeDeclaration ( typeDeclaration )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:32: 'type' typeDeclaration ( typeDeclaration )*
			{
			string_literal112=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeSection2575); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TYPE.add(string_literal112);

			pushFollow(FOLLOW_typeDeclaration_in_typeSection2577);
			typeDeclaration113=typeDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration113.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:55: ( typeDeclaration )*
			loop30:
			while (true) {
				int alt30=2;
				alt30 = dfa30.predict(input);
				switch (alt30) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: typeDeclaration
					{
					pushFollow(FOLLOW_typeDeclaration_in_typeSection2580);
					typeDeclaration114=typeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration114.getTree());
					}
					break;

				default :
					break loop30;
				}
			}

			// AST REWRITE
			// elements: typeDeclaration, typeDeclaration, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 157:74: -> ^( 'type' typeDeclaration ( typeDeclaration )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:77: ^( 'type' typeDeclaration ( typeDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_TYPE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:102: ( typeDeclaration )*
				while ( stream_typeDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				}
				stream_typeDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 31, typeSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeSection"


	public static class innerTypeSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "innerTypeSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:1: innerTypeSection : 'type' ( typeDeclaration )* -> ^( 'type' ( typeDeclaration )* ) ;
	public final DelphiParser.innerTypeSection_return innerTypeSection() throws RecognitionException {
		DelphiParser.innerTypeSection_return retval = new DelphiParser.innerTypeSection_return();
		retval.start = input.LT(1);
		int innerTypeSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal115=null;
		ParserRuleReturnScope typeDeclaration116 =null;

		Object string_literal115_tree=null;
		RewriteRuleTokenStream stream_TYPE=new RewriteRuleTokenStream(adaptor,"token TYPE");
		RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:30: ( 'type' ( typeDeclaration )* -> ^( 'type' ( typeDeclaration )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:32: 'type' ( typeDeclaration )*
			{
			string_literal115=(Token)match(input,TYPE,FOLLOW_TYPE_in_innerTypeSection2644); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_TYPE.add(string_literal115);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:39: ( typeDeclaration )*
			loop31:
			while (true) {
				int alt31=2;
				switch ( input.LA(1) ) {
				case STRICT:
					{
					int LA31_2 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}

					}
					break;
				case LBRACK:
					{
					int LA31_8 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}

					}
					break;
				case OPERATOR:
					{
					int LA31_12 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}

					}
					break;
				case TkIdentifier:
					{
					int LA31_13 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}

					}
					break;
				case 199:
					{
					int LA31_14 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA31_15 = input.LA(2);
					if ( (synpred46_Delphi()) ) {
						alt31=1;
					}

					}
					break;
				}
				switch (alt31) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:40: typeDeclaration
					{
					pushFollow(FOLLOW_typeDeclaration_in_innerTypeSection2647);
					typeDeclaration116=typeDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration116.getTree());
					}
					break;

				default :
					break loop31;
				}
			}

			// AST REWRITE
			// elements: typeDeclaration, TYPE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 159:58: -> ^( 'type' ( typeDeclaration )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:61: ^( 'type' ( typeDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_TYPE.nextNode(), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:70: ( typeDeclaration )*
				while ( stream_typeDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDeclaration.nextTree());
				}
				stream_typeDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 32, innerTypeSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "innerTypeSection"


	public static class typeDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDeclaration"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:1: typeDeclaration : ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) ;
	public final DelphiParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
		DelphiParser.typeDeclaration_return retval = new DelphiParser.typeDeclaration_return();
		retval.start = input.LT(1);
		int typeDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal119=null;
		Token char_literal122=null;
		ParserRuleReturnScope customAttribute117 =null;
		ParserRuleReturnScope genericTypeIdent118 =null;
		ParserRuleReturnScope typeDecl120 =null;
		ParserRuleReturnScope hintingDirective121 =null;

		Object char_literal119_tree=null;
		Object char_literal122_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:30: ( ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';' -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:32: ( customAttribute )? genericTypeIdent '=' typeDecl ( hintingDirective )* ';'
			{
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:32: ( customAttribute )?
			int alt32=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt32=1;
					}
					break;
				case TkIdentifier:
					{
					int LA32_2 = input.LA(2);
					if ( (synpred47_Delphi()) ) {
						alt32=1;
					}
					}
					break;
				case 199:
					{
					int LA32_3 = input.LA(2);
					if ( (synpred47_Delphi()) ) {
						alt32=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA32_4 = input.LA(2);
					if ( (synpred47_Delphi()) ) {
						alt32=1;
					}
					}
					break;
			}
			switch (alt32) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_typeDeclaration2711);
					customAttribute117=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute117.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_genericTypeIdent_in_typeDeclaration2715);
			genericTypeIdent118=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent118.getTree());
			char_literal119=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_typeDeclaration2717); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(char_literal119);

			pushFollow(FOLLOW_typeDecl_in_typeDeclaration2719);
			typeDecl120=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl120.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:81: ( hintingDirective )*
			loop33:
			while (true) {
				int alt33=2;
				int LA33_0 = input.LA(1);
				if ( (LA33_0==DEPRECATED||LA33_0==EXPERIMENTAL||LA33_0==LIBRARY||LA33_0==PLATFORM) ) {
					alt33=1;
				}

				switch (alt33) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:82: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_typeDeclaration2722);
					hintingDirective121=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective121.getTree());
					}
					break;

				default :
					break loop33;
				}
			}

			char_literal122=(Token)match(input,SEMI,FOLLOW_SEMI_in_typeDeclaration2726); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal122);

			// AST REWRITE
			// elements: typeDecl, hintingDirective, customAttribute, genericTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 161:105: -> ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:108: ^( TkNewType ( customAttribute )? ^( genericTypeIdent typeDecl ( hintingDirective )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkNewType, "TkNewType"), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:120: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_1, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:139: ^( genericTypeIdent typeDecl ( hintingDirective )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_genericTypeIdent.nextNode(), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:167: ( hintingDirective )*
				while ( stream_hintingDirective.hasNext() ) {
					adaptor.addChild(root_2, stream_hintingDirective.nextTree());
				}
				stream_hintingDirective.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 33, typeDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDeclaration"


	public static class varSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:1: varSection : varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) ;
	public final DelphiParser.varSection_return varSection() throws RecognitionException {
		DelphiParser.varSection_return retval = new DelphiParser.varSection_return();
		retval.start = input.LT(1);
		int varSection_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope varKey123 =null;
		ParserRuleReturnScope varDeclaration124 =null;
		ParserRuleReturnScope varDeclaration125 =null;

		RewriteRuleSubtreeStream stream_varDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule varDeclaration");
		RewriteRuleSubtreeStream stream_varKey=new RewriteRuleSubtreeStream(adaptor,"rule varKey");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:30: ( varKey varDeclaration ( varDeclaration )* -> ^( varKey varDeclaration ( varDeclaration )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:32: varKey varDeclaration ( varDeclaration )*
			{
			pushFollow(FOLLOW_varKey_in_varSection2803);
			varKey123=varKey();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varKey.add(varKey123.getTree());
			pushFollow(FOLLOW_varDeclaration_in_varSection2805);
			varDeclaration124=varDeclaration();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration124.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:54: ( varDeclaration )*
			loop34:
			while (true) {
				int alt34=2;
				alt34 = dfa34.predict(input);
				switch (alt34) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:55: varDeclaration
					{
					pushFollow(FOLLOW_varDeclaration_in_varSection2808);
					varDeclaration125=varDeclaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varDeclaration.add(varDeclaration125.getTree());
					}
					break;

				default :
					break loop34;
				}
			}

			// AST REWRITE
			// elements: varKey, varDeclaration, varDeclaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 163:72: -> ^( varKey varDeclaration ( varDeclaration )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:75: ^( varKey varDeclaration ( varDeclaration )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_varKey.nextNode(), root_1);
				adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:99: ( varDeclaration )*
				while ( stream_varDeclaration.hasNext() ) {
					adaptor.addChild(root_1, stream_varDeclaration.nextTree());
				}
				stream_varDeclaration.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 34, varSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varSection"


	public static class varKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varKey"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:1: varKey : ( 'var' | 'threadvar' );
	public final DelphiParser.varKey_return varKey() throws RecognitionException {
		DelphiParser.varKey_return retval = new DelphiParser.varKey_return();
		retval.start = input.LT(1);
		int varKey_StartIndex = input.index();

		Object root_0 = null;

		Token set126=null;

		Object set126_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:165:30: ( 'var' | 'threadvar' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set126=input.LT(1);
			if ( input.LA(1)==THREADVAR||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set126));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 35, varKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varKey"


	public static class varDeclaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varDeclaration"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:1: varDeclaration : ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) ;
	public final DelphiParser.varDeclaration_return varDeclaration() throws RecognitionException {
		DelphiParser.varDeclaration_return retval = new DelphiParser.varDeclaration_return();
		retval.start = input.LT(1);
		int varDeclaration_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal129=null;
		Token char_literal133=null;
		ParserRuleReturnScope customAttribute127 =null;
		ParserRuleReturnScope identListFlat128 =null;
		ParserRuleReturnScope typeDecl130 =null;
		ParserRuleReturnScope varValueSpec131 =null;
		ParserRuleReturnScope hintingDirective132 =null;

		Object char_literal129_tree=null;
		Object char_literal133_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_varValueSpec=new RewriteRuleSubtreeStream(adaptor,"rule varValueSpec");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:30: ( ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';' -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: ( customAttribute )? identListFlat ':' typeDecl ( varValueSpec )? ( hintingDirective )* ';'
			{
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:32: ( customAttribute )?
			int alt35=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt35=1;
					}
					break;
				case TkIdentifier:
					{
					int LA35_2 = input.LA(2);
					if ( (synpred51_Delphi()) ) {
						alt35=1;
					}
					}
					break;
				case 199:
					{
					int LA35_3 = input.LA(2);
					if ( (synpred51_Delphi()) ) {
						alt35=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA35_4 = input.LA(2);
					if ( (synpred51_Delphi()) ) {
						alt35=1;
					}
					}
					break;
			}
			switch (alt35) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_varDeclaration2968);
					customAttribute127=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute127.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_varDeclaration2972);
			identListFlat128=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat128.getTree());
			char_literal129=(Token)match(input,COLON,FOLLOW_COLON_in_varDeclaration2974); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal129);

			pushFollow(FOLLOW_typeDecl_in_varDeclaration2976);
			typeDecl130=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl130.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:78: ( varValueSpec )?
			int alt36=2;
			int LA36_0 = input.LA(1);
			if ( (LA36_0==ABSOLUTE||LA36_0==EQUAL) ) {
				alt36=1;
			}
			switch (alt36) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:79: varValueSpec
					{
					pushFollow(FOLLOW_varValueSpec_in_varDeclaration2979);
					varValueSpec131=varValueSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varValueSpec.add(varValueSpec131.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:94: ( hintingDirective )*
			loop37:
			while (true) {
				int alt37=2;
				int LA37_0 = input.LA(1);
				if ( (LA37_0==DEPRECATED||LA37_0==EXPERIMENTAL||LA37_0==LIBRARY||LA37_0==PLATFORM) ) {
					alt37=1;
				}

				switch (alt37) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:95: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_varDeclaration2984);
					hintingDirective132=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective132.getTree());
					}
					break;

				default :
					break loop37;
				}
			}

			char_literal133=(Token)match(input,SEMI,FOLLOW_SEMI_in_varDeclaration2988); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal133);

			// AST REWRITE
			// elements: typeDecl, customAttribute, identListFlat
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 169:118: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType typeDecl )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:121: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:140: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:174: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 36, varDeclaration_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varDeclaration"


	public static class varValueSpec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varValueSpec"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:1: varValueSpec : ( 'absolute' ident | 'absolute' constExpression | '=' constExpression );
	public final DelphiParser.varValueSpec_return varValueSpec() throws RecognitionException {
		DelphiParser.varValueSpec_return retval = new DelphiParser.varValueSpec_return();
		retval.start = input.LT(1);
		int varValueSpec_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal134=null;
		Token string_literal136=null;
		Token char_literal138=null;
		ParserRuleReturnScope ident135 =null;
		ParserRuleReturnScope constExpression137 =null;
		ParserRuleReturnScope constExpression139 =null;

		Object string_literal134_tree=null;
		Object string_literal136_tree=null;
		Object char_literal138_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:30: ( 'absolute' ident | 'absolute' constExpression | '=' constExpression )
			int alt38=3;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==ABSOLUTE) ) {
				switch ( input.LA(2) ) {
				case TkIdentifier:
					{
					int LA38_3 = input.LA(3);
					if ( (synpred54_Delphi()) ) {
						alt38=1;
					}
					else if ( (synpred55_Delphi()) ) {
						alt38=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 38, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case 199:
					{
					int LA38_4 = input.LA(3);
					if ( (LA38_4==TkIdentifier) ) {
						int LA38_9 = input.LA(4);
						if ( (synpred54_Delphi()) ) {
							alt38=1;
						}
						else if ( (synpred55_Delphi()) ) {
							alt38=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 38, 9, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 38, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case STRING:
					{
					int LA38_5 = input.LA(3);
					if ( (synpred54_Delphi()) ) {
						alt38=1;
					}
					else if ( (synpred55_Delphi()) ) {
						alt38=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 38, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case AT2:
				case ControlString:
				case FALSE:
				case FILE:
				case FUNCTION:
				case INHERITED:
				case LBRACK:
				case LPAREN:
				case MINUS:
				case NIL:
				case NOT:
				case PLUS:
				case PROCEDURE:
				case QuotedString:
				case TRUE:
				case TkAsmHexNum:
				case TkHexNum:
				case TkIntNum:
				case TkRealNum:
					{
					alt38=2;
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case VARIANT:
				case WRITE:
					{
					int LA38_7 = input.LA(3);
					if ( (synpred54_Delphi()) ) {
						alt38=1;
					}
					else if ( (synpred55_Delphi()) ) {
						alt38=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 38, 7, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 38, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA38_0==EQUAL) ) {
				alt38=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 38, 0, input);
				throw nvae;
			}

			switch (alt38) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:32: 'absolute' ident
					{
					root_0 = (Object)adaptor.nil();


					string_literal134=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec3060); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal134_tree = (Object)adaptor.create(string_literal134);
					adaptor.addChild(root_0, string_literal134_tree);
					}

					pushFollow(FOLLOW_ident_in_varValueSpec3062);
					ident135=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident135.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:172:32: 'absolute' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal136=(Token)match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_varValueSpec3095); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal136_tree = (Object)adaptor.create(string_literal136);
					adaptor.addChild(root_0, string_literal136_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3097);
					constExpression137=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression137.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:173:32: '=' constExpression
					{
					root_0 = (Object)adaptor.nil();


					char_literal138=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_varValueSpec3130); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal138_tree = (Object)adaptor.create(char_literal138);
					adaptor.addChild(root_0, char_literal138_tree);
					}

					pushFollow(FOLLOW_constExpression_in_varValueSpec3132);
					constExpression139=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression139.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 37, varValueSpec_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "varValueSpec"


	public static class exportsSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportsSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:1: exportsSection : 'exports' ident exportItem ( ',' ident exportItem )* ';' ;
	public final DelphiParser.exportsSection_return exportsSection() throws RecognitionException {
		DelphiParser.exportsSection_return retval = new DelphiParser.exportsSection_return();
		retval.start = input.LT(1);
		int exportsSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal140=null;
		Token char_literal143=null;
		Token char_literal146=null;
		ParserRuleReturnScope ident141 =null;
		ParserRuleReturnScope exportItem142 =null;
		ParserRuleReturnScope ident144 =null;
		ParserRuleReturnScope exportItem145 =null;

		Object string_literal140_tree=null;
		Object char_literal143_tree=null;
		Object char_literal146_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:30: ( 'exports' ident exportItem ( ',' ident exportItem )* ';' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:32: 'exports' ident exportItem ( ',' ident exportItem )* ';'
			{
			root_0 = (Object)adaptor.nil();


			string_literal140=(Token)match(input,EXPORTS,FOLLOW_EXPORTS_in_exportsSection3183); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal140_tree = (Object)adaptor.create(string_literal140);
			adaptor.addChild(root_0, string_literal140_tree);
			}

			pushFollow(FOLLOW_ident_in_exportsSection3185);
			ident141=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident141.getTree());

			pushFollow(FOLLOW_exportItem_in_exportsSection3187);
			exportItem142=exportItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem142.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:59: ( ',' ident exportItem )*
			loop39:
			while (true) {
				int alt39=2;
				int LA39_0 = input.LA(1);
				if ( (LA39_0==COMMA) ) {
					alt39=1;
				}

				switch (alt39) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:175:60: ',' ident exportItem
					{
					char_literal143=(Token)match(input,COMMA,FOLLOW_COMMA_in_exportsSection3190); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal143_tree = (Object)adaptor.create(char_literal143);
					adaptor.addChild(root_0, char_literal143_tree);
					}

					pushFollow(FOLLOW_ident_in_exportsSection3192);
					ident144=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident144.getTree());

					pushFollow(FOLLOW_exportItem_in_exportsSection3194);
					exportItem145=exportItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportItem145.getTree());

					}
					break;

				default :
					break loop39;
				}
			}

			char_literal146=(Token)match(input,SEMI,FOLLOW_SEMI_in_exportsSection3198); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal146_tree = (Object)adaptor.create(char_literal146);
			adaptor.addChild(root_0, char_literal146_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 38, exportsSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportsSection"


	public static class exportItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:1: exportItem : ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? ;
	public final DelphiParser.exportItem_return exportItem() throws RecognitionException {
		DelphiParser.exportItem_return retval = new DelphiParser.exportItem_return();
		retval.start = input.LT(1);
		int exportItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal147=null;
		Token char_literal149=null;
		Token INDEX150=null;
		Token NAME152=null;
		Token string_literal154=null;
		ParserRuleReturnScope formalParameterList148 =null;
		ParserRuleReturnScope expression151 =null;
		ParserRuleReturnScope expression153 =null;

		Object char_literal147_tree=null;
		Object char_literal149_tree=null;
		Object INDEX150_tree=null;
		Object NAME152_tree=null;
		Object string_literal154_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:30: ( ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:32: ( '(' ( formalParameterList )? ')' )? ( INDEX expression )? ( NAME expression )? ( 'resident' )?
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:32: ( '(' ( formalParameterList )? ')' )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==LPAREN) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:33: '(' ( formalParameterList )? ')'
					{
					char_literal147=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_exportItem3254); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal147_tree = (Object)adaptor.create(char_literal147);
					adaptor.addChild(root_0, char_literal147_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:37: ( formalParameterList )?
					int alt40=2;
					int LA40_0 = input.LA(1);
					if ( (LA40_0==EOF||LA40_0==ADD||(LA40_0 >= ANSISTRING && LA40_0 <= ARRAY)||(LA40_0 >= AT && LA40_0 <= AT2)||LA40_0==BREAK||LA40_0==CLASS||(LA40_0 >= CONST && LA40_0 <= ControlString)||(LA40_0 >= DEFAULT && LA40_0 <= DESTRUCTOR)||LA40_0==DISPINTERFACE||LA40_0==EXIT||LA40_0==EXPORT||LA40_0==FALSE||(LA40_0 >= FILE && LA40_0 <= FINAL)||LA40_0==FUNCTION||LA40_0==HELPER||LA40_0==IMPLEMENTS||(LA40_0 >= INDEX && LA40_0 <= INHERITED)||LA40_0==INTERFACE||LA40_0==LBRACK||(LA40_0 >= LOCAL && LA40_0 <= LPAREN)||(LA40_0 >= MESSAGE && LA40_0 <= MINUS)||LA40_0==NAME||LA40_0==NIL||LA40_0==NOT||LA40_0==OBJECT||LA40_0==OPERATOR||LA40_0==OUT||(LA40_0 >= PACKAGE && LA40_0 <= PACKED)||(LA40_0 >= PLUS && LA40_0 <= POINTER2)||LA40_0==PROCEDURE||LA40_0==PROPERTY||LA40_0==QuotedString||(LA40_0 >= READ && LA40_0 <= REGISTER)||LA40_0==REMOVE||LA40_0==SET||(LA40_0 >= STORED && LA40_0 <= STRING)||LA40_0==TRUE||LA40_0==TYPE||LA40_0==TkAsmHexNum||(LA40_0 >= TkHexNum && LA40_0 <= TkIntNum)||LA40_0==TkRealNum||LA40_0==VAR||LA40_0==VARIANT||LA40_0==WRITE||LA40_0==199) ) {
						alt40=1;
					}
					switch (alt40) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:38: formalParameterList
							{
							pushFollow(FOLLOW_formalParameterList_in_exportItem3257);
							formalParameterList148=formalParameterList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList148.getTree());

							}
							break;

					}

					char_literal149=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_exportItem3261); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal149_tree = (Object)adaptor.create(char_literal149);
					adaptor.addChild(root_0, char_literal149_tree);
					}

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:66: ( INDEX expression )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==INDEX) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:67: INDEX expression
					{
					INDEX150=(Token)match(input,INDEX,FOLLOW_INDEX_in_exportItem3266); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX150_tree = (Object)adaptor.create(INDEX150);
					adaptor.addChild(root_0, INDEX150_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3268);
					expression151=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression151.getTree());

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:86: ( NAME expression )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==NAME) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:87: NAME expression
					{
					NAME152=(Token)match(input,NAME,FOLLOW_NAME_in_exportItem3273); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NAME152_tree = (Object)adaptor.create(NAME152);
					adaptor.addChild(root_0, NAME152_tree);
					}

					pushFollow(FOLLOW_expression_in_exportItem3275);
					expression153=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression153.getTree());

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:105: ( 'resident' )?
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==RESIDENT) ) {
				alt44=1;
			}
			switch (alt44) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:177:106: 'resident'
					{
					string_literal154=(Token)match(input,RESIDENT,FOLLOW_RESIDENT_in_exportItem3280); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal154_tree = (Object)adaptor.create(string_literal154);
					adaptor.addChild(root_0, string_literal154_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 39, exportItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportItem"


	public static class typeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:1: typeDecl : ( strucType | pointerType | stringType | procedureType | variantType | subRangeType | ( 'type' )? typeId ( genericPostfix )? | simpleType );
	public final DelphiParser.typeDecl_return typeDecl() throws RecognitionException {
		DelphiParser.typeDecl_return retval = new DelphiParser.typeDecl_return();
		retval.start = input.LT(1);
		int typeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal161=null;
		ParserRuleReturnScope strucType155 =null;
		ParserRuleReturnScope pointerType156 =null;
		ParserRuleReturnScope stringType157 =null;
		ParserRuleReturnScope procedureType158 =null;
		ParserRuleReturnScope variantType159 =null;
		ParserRuleReturnScope subRangeType160 =null;
		ParserRuleReturnScope typeId162 =null;
		ParserRuleReturnScope genericPostfix163 =null;
		ParserRuleReturnScope simpleType164 =null;

		Object string_literal161_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:30: ( strucType | pointerType | stringType | procedureType | variantType | subRangeType | ( 'type' )? typeId ( genericPostfix )? | simpleType )
			int alt47=8;
			switch ( input.LA(1) ) {
			case ARRAY:
			case CLASS:
			case DISPINTERFACE:
			case INTERFACE:
			case PACKED:
			case RECORD:
			case SET:
				{
				alt47=1;
				}
				break;
			case FILE:
				{
				int LA47_4 = input.LA(2);
				if ( (synpred62_Delphi()) ) {
					alt47=1;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case OBJECT:
				{
				int LA47_7 = input.LA(2);
				if ( (synpred62_Delphi()) ) {
					alt47=1;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case POINTER2:
				{
				alt47=2;
				}
				break;
			case POINTER:
				{
				int LA47_10 = input.LA(2);
				if ( (synpred63_Delphi()) ) {
					alt47=2;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case STRING:
				{
				int LA47_11 = input.LA(2);
				if ( (synpred64_Delphi()) ) {
					alt47=3;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case TYPE:
				{
				int LA47_12 = input.LA(2);
				if ( (synpred64_Delphi()) ) {
					alt47=3;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANSISTRING:
				{
				int LA47_13 = input.LA(2);
				if ( (synpred64_Delphi()) ) {
					alt47=3;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case FUNCTION:
				{
				int LA47_14 = input.LA(2);
				if ( (synpred65_Delphi()) ) {
					alt47=4;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCEDURE:
				{
				int LA47_15 = input.LA(2);
				if ( (synpred65_Delphi()) ) {
					alt47=4;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 15, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REFERENCE:
				{
				int LA47_16 = input.LA(2);
				if ( (synpred65_Delphi()) ) {
					alt47=4;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case VARIANT:
				{
				int LA47_17 = input.LA(2);
				if ( (synpred66_Delphi()) ) {
					alt47=5;
				}
				else if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case AT2:
			case ControlString:
			case FALSE:
			case INHERITED:
			case LBRACK:
			case MINUS:
			case NIL:
			case NOT:
			case PLUS:
			case QuotedString:
			case TRUE:
			case TkAsmHexNum:
			case TkHexNum:
			case TkIntNum:
			case TkRealNum:
				{
				alt47=6;
				}
				break;
			case TkIdentifier:
				{
				int LA47_23 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case 199:
				{
				int LA47_24 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case WRITE:
				{
				int LA47_25 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (synpred70_Delphi()) ) {
					alt47=7;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			case LPAREN:
				{
				int LA47_29 = input.LA(2);
				if ( (synpred67_Delphi()) ) {
					alt47=6;
				}
				else if ( (true) ) {
					alt47=8;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 47, 0, input);
				throw nvae;
			}
			switch (alt47) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: strucType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_strucType_in_typeDecl3342);
					strucType155=strucType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, strucType155.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: pointerType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_pointerType_in_typeDecl3375);
					pointerType156=pointerType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pointerType156.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: stringType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringType_in_typeDecl3408);
					stringType157=stringType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringType157.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: procedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureType_in_typeDecl3441);
					procedureType158=procedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureType158.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:32: variantType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantType_in_typeDecl3474);
					variantType159=variantType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantType159.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:187:32: subRangeType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subRangeType_in_typeDecl3507);
					subRangeType160=subRangeType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subRangeType160.getTree());

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'type' )? typeId ( genericPostfix )?
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'type' )?
					int alt45=2;
					int LA45_0 = input.LA(1);
					if ( (LA45_0==TYPE) ) {
						alt45=1;
					}
					switch (alt45) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:33: 'type'
							{
							string_literal161=(Token)match(input,TYPE,FOLLOW_TYPE_in_typeDecl3541); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal161_tree = (Object)adaptor.create(string_literal161);
							adaptor.addChild(root_0, string_literal161_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_typeId_in_typeDecl3545);
					typeId162=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId162.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:49: ( genericPostfix )?
					int alt46=2;
					int LA46_0 = input.LA(1);
					if ( (LA46_0==LT) ) {
						alt46=1;
					}
					switch (alt46) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:50: genericPostfix
							{
							pushFollow(FOLLOW_genericPostfix_in_typeDecl3548);
							genericPostfix163=genericPostfix();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericPostfix163.getTree());

							}
							break;

					}

					}
					break;
				case 8 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:189:32: simpleType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleType_in_typeDecl3583);
					simpleType164=simpleType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleType164.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 40, typeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeDecl"


	public static class strucType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:1: strucType : ( 'packed' )? strucTypePart -> strucTypePart ;
	public final DelphiParser.strucType_return strucType() throws RecognitionException {
		DelphiParser.strucType_return retval = new DelphiParser.strucType_return();
		retval.start = input.LT(1);
		int strucType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal165=null;
		ParserRuleReturnScope strucTypePart166 =null;

		Object string_literal165_tree=null;
		RewriteRuleTokenStream stream_PACKED=new RewriteRuleTokenStream(adaptor,"token PACKED");
		RewriteRuleSubtreeStream stream_strucTypePart=new RewriteRuleSubtreeStream(adaptor,"rule strucTypePart");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:30: ( ( 'packed' )? strucTypePart -> strucTypePart )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: ( 'packed' )? strucTypePart
			{
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:32: ( 'packed' )?
			int alt48=2;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==PACKED) ) {
				alt48=1;
			}
			switch (alt48) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:191:33: 'packed'
					{
					string_literal165=(Token)match(input,PACKED,FOLLOW_PACKED_in_strucType3640); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PACKED.add(string_literal165);

					}
					break;

			}

			pushFollow(FOLLOW_strucTypePart_in_strucType3644);
			strucTypePart166=strucTypePart();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_strucTypePart.add(strucTypePart166.getTree());
			// AST REWRITE
			// elements: strucTypePart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 191:58: -> strucTypePart
			{
				adaptor.addChild(root_0, stream_strucTypePart.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 41, strucType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucType"


	public static class strucTypePart_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "strucTypePart"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:1: strucTypePart : ( arrayType | setType | fileType | classDecl );
	public final DelphiParser.strucTypePart_return strucTypePart() throws RecognitionException {
		DelphiParser.strucTypePart_return retval = new DelphiParser.strucTypePart_return();
		retval.start = input.LT(1);
		int strucTypePart_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope arrayType167 =null;
		ParserRuleReturnScope setType168 =null;
		ParserRuleReturnScope fileType169 =null;
		ParserRuleReturnScope classDecl170 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:30: ( arrayType | setType | fileType | classDecl )
			int alt49=4;
			switch ( input.LA(1) ) {
			case ARRAY:
				{
				alt49=1;
				}
				break;
			case SET:
				{
				alt49=2;
				}
				break;
			case FILE:
				{
				alt49=3;
				}
				break;
			case CLASS:
			case DISPINTERFACE:
			case INTERFACE:
			case OBJECT:
			case RECORD:
				{
				alt49=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 49, 0, input);
				throw nvae;
			}
			switch (alt49) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:193:32: arrayType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_arrayType_in_strucTypePart3700);
					arrayType167=arrayType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayType167.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:194:32: setType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setType_in_strucTypePart3733);
					setType168=setType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setType168.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:195:32: fileType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_fileType_in_strucTypePart3766);
					fileType169=fileType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fileType169.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:196:32: classDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classDecl_in_strucTypePart3799);
					classDecl170=classDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classDecl170.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 42, strucTypePart_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "strucTypePart"


	public static class arrayType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:1: arrayType : 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) ;
	public final DelphiParser.arrayType_return arrayType() throws RecognitionException {
		DelphiParser.arrayType_return retval = new DelphiParser.arrayType_return();
		retval.start = input.LT(1);
		int arrayType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal171=null;
		Token char_literal172=null;
		Token char_literal174=null;
		Token char_literal176=null;
		Token string_literal177=null;
		ParserRuleReturnScope arrayIndex173 =null;
		ParserRuleReturnScope arrayIndex175 =null;
		ParserRuleReturnScope arraySubType178 =null;

		Object string_literal171_tree=null;
		Object char_literal172_tree=null;
		Object char_literal174_tree=null;
		Object char_literal176_tree=null;
		Object string_literal177_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_ARRAY=new RewriteRuleTokenStream(adaptor,"token ARRAY");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_arraySubType=new RewriteRuleSubtreeStream(adaptor,"rule arraySubType");
		RewriteRuleSubtreeStream stream_arrayIndex=new RewriteRuleSubtreeStream(adaptor,"rule arrayIndex");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:30: ( 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:33: 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? 'of' arraySubType
			{
			string_literal171=(Token)match(input,ARRAY,FOLLOW_ARRAY_in_arrayType3857); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ARRAY.add(string_literal171);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:41: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==LBRACK) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:42: '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']'
					{
					char_literal172=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_arrayType3860); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LBRACK.add(char_literal172);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:46: ( arrayIndex )?
					int alt50=2;
					int LA50_0 = input.LA(1);
					if ( (LA50_0==ADD||LA50_0==ANSISTRING||(LA50_0 >= AT && LA50_0 <= AT2)||LA50_0==BREAK||(LA50_0 >= CONTAINS && LA50_0 <= ControlString)||(LA50_0 >= DEFAULT && LA50_0 <= DEPRECATED)||LA50_0==EXIT||LA50_0==EXPORT||LA50_0==FALSE||(LA50_0 >= FILE && LA50_0 <= FINAL)||LA50_0==FUNCTION||LA50_0==HELPER||LA50_0==IMPLEMENTS||(LA50_0 >= INDEX && LA50_0 <= INHERITED)||LA50_0==LBRACK||(LA50_0 >= LOCAL && LA50_0 <= LPAREN)||(LA50_0 >= MESSAGE && LA50_0 <= MINUS)||LA50_0==NAME||LA50_0==NIL||LA50_0==NOT||LA50_0==OBJECT||LA50_0==OPERATOR||LA50_0==OUT||LA50_0==PACKAGE||(LA50_0 >= PLUS && LA50_0 <= POINTER)||LA50_0==PROCEDURE||LA50_0==QuotedString||(LA50_0 >= READ && LA50_0 <= READONLY)||(LA50_0 >= REFERENCE && LA50_0 <= REGISTER)||LA50_0==REMOVE||(LA50_0 >= STORED && LA50_0 <= STRING)||LA50_0==TRUE||LA50_0==TkAsmHexNum||(LA50_0 >= TkHexNum && LA50_0 <= TkIntNum)||LA50_0==TkRealNum||LA50_0==VARIANT||LA50_0==WRITE||LA50_0==199) ) {
						alt50=1;
					}
					switch (alt50) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:47: arrayIndex
							{
							pushFollow(FOLLOW_arrayIndex_in_arrayType3863);
							arrayIndex173=arrayIndex();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex173.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:60: ( ',' ( arrayIndex )? )*
					loop52:
					while (true) {
						int alt52=2;
						int LA52_0 = input.LA(1);
						if ( (LA52_0==COMMA) ) {
							alt52=1;
						}

						switch (alt52) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:61: ',' ( arrayIndex )?
							{
							char_literal174=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayType3868); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(char_literal174);

							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:65: ( arrayIndex )?
							int alt51=2;
							int LA51_0 = input.LA(1);
							if ( (LA51_0==ADD||LA51_0==ANSISTRING||(LA51_0 >= AT && LA51_0 <= AT2)||LA51_0==BREAK||(LA51_0 >= CONTAINS && LA51_0 <= ControlString)||(LA51_0 >= DEFAULT && LA51_0 <= DEPRECATED)||LA51_0==EXIT||LA51_0==EXPORT||LA51_0==FALSE||(LA51_0 >= FILE && LA51_0 <= FINAL)||LA51_0==FUNCTION||LA51_0==HELPER||LA51_0==IMPLEMENTS||(LA51_0 >= INDEX && LA51_0 <= INHERITED)||LA51_0==LBRACK||(LA51_0 >= LOCAL && LA51_0 <= LPAREN)||(LA51_0 >= MESSAGE && LA51_0 <= MINUS)||LA51_0==NAME||LA51_0==NIL||LA51_0==NOT||LA51_0==OBJECT||LA51_0==OPERATOR||LA51_0==OUT||LA51_0==PACKAGE||(LA51_0 >= PLUS && LA51_0 <= POINTER)||LA51_0==PROCEDURE||LA51_0==QuotedString||(LA51_0 >= READ && LA51_0 <= READONLY)||(LA51_0 >= REFERENCE && LA51_0 <= REGISTER)||LA51_0==REMOVE||(LA51_0 >= STORED && LA51_0 <= STRING)||LA51_0==TRUE||LA51_0==TkAsmHexNum||(LA51_0 >= TkHexNum && LA51_0 <= TkIntNum)||LA51_0==TkRealNum||LA51_0==VARIANT||LA51_0==WRITE||LA51_0==199) ) {
								alt51=1;
							}
							switch (alt51) {
								case 1 :
									// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:199:66: arrayIndex
									{
									pushFollow(FOLLOW_arrayIndex_in_arrayType3871);
									arrayIndex175=arrayIndex();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_arrayIndex.add(arrayIndex175.getTree());
									}
									break;

							}

							}
							break;

						default :
							break loop52;
						}
					}

					char_literal176=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_arrayType3877); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RBRACK.add(char_literal176);

					}
					break;

			}

			string_literal177=(Token)match(input,OF,FOLLOW_OF_in_arrayType3881); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal177);

			pushFollow(FOLLOW_arraySubType_in_arrayType3883);
			arraySubType178=arraySubType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_arraySubType.add(arraySubType178.getTree());
			// AST REWRITE
			// elements: LBRACK, ARRAY, arraySubType, COMMA, RBRACK, arrayIndex, arrayIndex
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 200:30: -> ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:33: ^( arraySubType 'array' ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_arraySubType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_ARRAY.nextNode());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:56: ( '[' ( arrayIndex )? ( ',' ( arrayIndex )? )* ']' )?
				if ( stream_LBRACK.hasNext()||stream_COMMA.hasNext()||stream_RBRACK.hasNext()||stream_arrayIndex.hasNext() ) {
					adaptor.addChild(root_1, stream_LBRACK.nextNode());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:61: ( arrayIndex )?
					if ( stream_arrayIndex.hasNext() ) {
						adaptor.addChild(root_1, stream_arrayIndex.nextTree());
					}
					stream_arrayIndex.reset();

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:75: ( ',' ( arrayIndex )? )*
					while ( stream_COMMA.hasNext() ) {
						adaptor.addChild(root_1, stream_COMMA.nextNode());
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:200:80: ( arrayIndex )?
						if ( stream_arrayIndex.hasNext() ) {
							adaptor.addChild(root_1, stream_arrayIndex.nextTree());
						}
						stream_arrayIndex.reset();

					}
					stream_COMMA.reset();

					adaptor.addChild(root_1, stream_RBRACK.nextNode());
				}
				stream_LBRACK.reset();
				stream_COMMA.reset();
				stream_RBRACK.reset();
				stream_arrayIndex.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 43, arrayType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayType"


	public static class arrayIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arrayIndex"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:203:1: arrayIndex : ( typeId | expression '..' expression );
	public final DelphiParser.arrayIndex_return arrayIndex() throws RecognitionException {
		DelphiParser.arrayIndex_return retval = new DelphiParser.arrayIndex_return();
		retval.start = input.LT(1);
		int arrayIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal181=null;
		ParserRuleReturnScope typeId179 =null;
		ParserRuleReturnScope expression180 =null;
		ParserRuleReturnScope expression182 =null;

		Object string_literal181_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:203:30: ( typeId | expression '..' expression )
			int alt54=2;
			alt54 = dfa54.predict(input);
			switch (alt54) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:203:32: typeId
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeId_in_arrayIndex4009);
					typeId179=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId179.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:204:32: expression '..' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_arrayIndex4042);
					expression180=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression180.getTree());

					string_literal181=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_arrayIndex4044); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal181_tree = (Object)adaptor.create(string_literal181);
					adaptor.addChild(root_0, string_literal181_tree);
					}

					pushFollow(FOLLOW_expression_in_arrayIndex4046);
					expression182=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression182.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 44, arrayIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arrayIndex"


	public static class arraySubType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "arraySubType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:1: arraySubType : ( 'const' | typeDecl );
	public final DelphiParser.arraySubType_return arraySubType() throws RecognitionException {
		DelphiParser.arraySubType_return retval = new DelphiParser.arraySubType_return();
		retval.start = input.LT(1);
		int arraySubType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal183=null;
		ParserRuleReturnScope typeDecl184 =null;

		Object string_literal183_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:30: ( 'const' | typeDecl )
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==CONST) ) {
				alt55=1;
			}
			else if ( (LA55_0==ADD||(LA55_0 >= ANSISTRING && LA55_0 <= ARRAY)||(LA55_0 >= AT && LA55_0 <= AT2)||LA55_0==BREAK||LA55_0==CLASS||(LA55_0 >= CONTAINS && LA55_0 <= ControlString)||(LA55_0 >= DEFAULT && LA55_0 <= DEPRECATED)||LA55_0==DISPINTERFACE||LA55_0==EXIT||LA55_0==EXPORT||LA55_0==FALSE||(LA55_0 >= FILE && LA55_0 <= FINAL)||LA55_0==FUNCTION||LA55_0==HELPER||LA55_0==IMPLEMENTS||(LA55_0 >= INDEX && LA55_0 <= INHERITED)||LA55_0==INTERFACE||LA55_0==LBRACK||(LA55_0 >= LOCAL && LA55_0 <= LPAREN)||(LA55_0 >= MESSAGE && LA55_0 <= MINUS)||LA55_0==NAME||LA55_0==NIL||LA55_0==NOT||LA55_0==OBJECT||LA55_0==OPERATOR||LA55_0==OUT||(LA55_0 >= PACKAGE && LA55_0 <= PACKED)||(LA55_0 >= PLUS && LA55_0 <= POINTER2)||LA55_0==PROCEDURE||LA55_0==QuotedString||(LA55_0 >= READ && LA55_0 <= REGISTER)||LA55_0==REMOVE||LA55_0==SET||(LA55_0 >= STORED && LA55_0 <= STRING)||LA55_0==TRUE||LA55_0==TYPE||LA55_0==TkAsmHexNum||(LA55_0 >= TkHexNum && LA55_0 <= TkIntNum)||LA55_0==TkRealNum||LA55_0==VARIANT||LA55_0==WRITE||LA55_0==199) ) {
				alt55=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 55, 0, input);
				throw nvae;
			}

			switch (alt55) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:207:32: 'const'
					{
					root_0 = (Object)adaptor.nil();


					string_literal183=(Token)match(input,CONST,FOLLOW_CONST_in_arraySubType4100); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal183_tree = (Object)adaptor.create(string_literal183);
					adaptor.addChild(root_0, string_literal183_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:208:32: typeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_typeDecl_in_arraySubType4133);
					typeDecl184=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl184.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 45, arraySubType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "arraySubType"


	public static class setType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:1: setType : 'set' 'of' typeDecl -> 'set' typeDecl ;
	public final DelphiParser.setType_return setType() throws RecognitionException {
		DelphiParser.setType_return retval = new DelphiParser.setType_return();
		retval.start = input.LT(1);
		int setType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal185=null;
		Token string_literal186=null;
		ParserRuleReturnScope typeDecl187 =null;

		Object string_literal185_tree=null;
		Object string_literal186_tree=null;
		RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:30: ( 'set' 'of' typeDecl -> 'set' typeDecl )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:210:32: 'set' 'of' typeDecl
			{
			string_literal185=(Token)match(input,SET,FOLLOW_SET_in_setType4191); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SET.add(string_literal185);

			string_literal186=(Token)match(input,OF,FOLLOW_OF_in_setType4193); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal186);

			pushFollow(FOLLOW_typeDecl_in_setType4195);
			typeDecl187=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl187.getTree());
			// AST REWRITE
			// elements: SET, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 210:52: -> 'set' typeDecl
			{
				adaptor.addChild(root_0, stream_SET.nextNode());
				adaptor.addChild(root_0, stream_typeDecl.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 46, setType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setType"


	public static class fileType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "fileType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:1: fileType : 'file' ( 'of' typeDecl )? ;
	public final DelphiParser.fileType_return fileType() throws RecognitionException {
		DelphiParser.fileType_return retval = new DelphiParser.fileType_return();
		retval.start = input.LT(1);
		int fileType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal188=null;
		Token string_literal189=null;
		ParserRuleReturnScope typeDecl190 =null;

		Object string_literal188_tree=null;
		Object string_literal189_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:30: ( 'file' ( 'of' typeDecl )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:32: 'file' ( 'of' typeDecl )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal188=(Token)match(input,FILE,FOLLOW_FILE_in_fileType4269); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal188_tree = (Object)adaptor.create(string_literal188);
			adaptor.addChild(root_0, string_literal188_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:39: ( 'of' typeDecl )?
			int alt56=2;
			alt56 = dfa56.predict(input);
			switch (alt56) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:40: 'of' typeDecl
					{
					string_literal189=(Token)match(input,OF,FOLLOW_OF_in_fileType4272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal189_tree = (Object)adaptor.create(string_literal189);
					adaptor.addChild(root_0, string_literal189_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_fileType4274);
					typeDecl190=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl190.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 47, fileType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "fileType"


	public static class pointerType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pointerType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:1: pointerType : ( '^' typeDecl | 'pointer' );
	public final DelphiParser.pointerType_return pointerType() throws RecognitionException {
		DelphiParser.pointerType_return retval = new DelphiParser.pointerType_return();
		retval.start = input.LT(1);
		int pointerType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal191=null;
		Token string_literal193=null;
		ParserRuleReturnScope typeDecl192 =null;

		Object char_literal191_tree=null;
		Object string_literal193_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:30: ( '^' typeDecl | 'pointer' )
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==POINTER2) ) {
				alt57=1;
			}
			else if ( (LA57_0==POINTER) ) {
				alt57=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 57, 0, input);
				throw nvae;
			}

			switch (alt57) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:215:32: '^' typeDecl
					{
					root_0 = (Object)adaptor.nil();


					char_literal191=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_pointerType4330); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal191_tree = (Object)adaptor.create(char_literal191);
					adaptor.addChild(root_0, char_literal191_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_pointerType4332);
					typeDecl192=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl192.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:216:32: 'pointer'
					{
					root_0 = (Object)adaptor.nil();


					string_literal193=(Token)match(input,POINTER,FOLLOW_POINTER_in_pointerType4365); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal193_tree = (Object)adaptor.create(string_literal193);
					adaptor.addChild(root_0, string_literal193_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 48, pointerType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "pointerType"


	public static class stringType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:1: stringType : ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? );
	public final DelphiParser.stringType_return stringType() throws RecognitionException {
		DelphiParser.stringType_return retval = new DelphiParser.stringType_return();
		retval.start = input.LT(1);
		int stringType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal194=null;
		Token char_literal195=null;
		Token char_literal197=null;
		Token string_literal198=null;
		Token ANSISTRING199=null;
		ParserRuleReturnScope expression196 =null;
		ParserRuleReturnScope codePageNumber200 =null;

		Object string_literal194_tree=null;
		Object char_literal195_tree=null;
		Object char_literal197_tree=null;
		Object string_literal198_tree=null;
		Object ANSISTRING199_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_STRING=new RewriteRuleTokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:30: ( 'string' ( '[' expression ']' )? -> 'string' | ( 'type' )? ANSISTRING ( codePageNumber )? )
			int alt61=2;
			int LA61_0 = input.LA(1);
			if ( (LA61_0==STRING) ) {
				alt61=1;
			}
			else if ( (LA61_0==ANSISTRING||LA61_0==TYPE) ) {
				alt61=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 61, 0, input);
				throw nvae;
			}

			switch (alt61) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:32: 'string' ( '[' expression ']' )?
					{
					string_literal194=(Token)match(input,STRING,FOLLOW_STRING_in_stringType4420); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_STRING.add(string_literal194);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:41: ( '[' expression ']' )?
					int alt58=2;
					alt58 = dfa58.predict(input);
					switch (alt58) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:42: '[' expression ']'
							{
							char_literal195=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_stringType4423); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal195);

							pushFollow(FOLLOW_expression_in_stringType4425);
							expression196=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression196.getTree());
							char_literal197=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_stringType4427); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal197);

							}
							break;

					}

					// AST REWRITE
					// elements: STRING
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 218:63: -> 'string'
					{
						adaptor.addChild(root_0, stream_STRING.nextNode());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:32: ( 'type' )? ANSISTRING ( codePageNumber )?
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:32: ( 'type' )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==TYPE) ) {
						alt59=1;
					}
					switch (alt59) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:33: 'type'
							{
							string_literal198=(Token)match(input,TYPE,FOLLOW_TYPE_in_stringType4467); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal198_tree = (Object)adaptor.create(string_literal198);
							adaptor.addChild(root_0, string_literal198_tree);
							}

							}
							break;

					}

					ANSISTRING199=(Token)match(input,ANSISTRING,FOLLOW_ANSISTRING_in_stringType4471); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANSISTRING199_tree = (Object)adaptor.create(ANSISTRING199);
					adaptor.addChild(root_0, ANSISTRING199_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:53: ( codePageNumber )?
					int alt60=2;
					int LA60_0 = input.LA(1);
					if ( (LA60_0==LPAREN) ) {
						int LA60_1 = input.LA(2);
						if ( (LA60_1==TkHexNum||LA60_1==TkIntNum) ) {
							int LA60_3 = input.LA(3);
							if ( (LA60_3==RPAREN) ) {
								int LA60_4 = input.LA(4);
								if ( (synpred86_Delphi()) ) {
									alt60=1;
								}
							}
						}
					}
					switch (alt60) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:54: codePageNumber
							{
							pushFollow(FOLLOW_codePageNumber_in_stringType4474);
							codePageNumber200=codePageNumber();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, codePageNumber200.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 49, stringType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringType"


	public static class codePageNumber_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "codePageNumber"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:1: codePageNumber : '(' intNum ')' ;
	public final DelphiParser.codePageNumber_return codePageNumber() throws RecognitionException {
		DelphiParser.codePageNumber_return retval = new DelphiParser.codePageNumber_return();
		retval.start = input.LT(1);
		int codePageNumber_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal201=null;
		Token char_literal203=null;
		ParserRuleReturnScope intNum202 =null;

		Object char_literal201_tree=null;
		Object char_literal203_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:30: ( '(' intNum ')' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:221:32: '(' intNum ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal201=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_codePageNumber4527); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal201_tree = (Object)adaptor.create(char_literal201);
			adaptor.addChild(root_0, char_literal201_tree);
			}

			pushFollow(FOLLOW_intNum_in_codePageNumber4529);
			intNum202=intNum();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum202.getTree());

			char_literal203=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_codePageNumber4531); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal203_tree = (Object)adaptor.create(char_literal203);
			adaptor.addChild(root_0, char_literal203_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 50, codePageNumber_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "codePageNumber"


	public static class procedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:1: procedureType : ( methodType | simpleProcedureType | procedureReference );
	public final DelphiParser.procedureType_return procedureType() throws RecognitionException {
		DelphiParser.procedureType_return retval = new DelphiParser.procedureType_return();
		retval.start = input.LT(1);
		int procedureType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope methodType204 =null;
		ParserRuleReturnScope simpleProcedureType205 =null;
		ParserRuleReturnScope procedureReference206 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:30: ( methodType | simpleProcedureType | procedureReference )
			int alt62=3;
			switch ( input.LA(1) ) {
			case FUNCTION:
				{
				int LA62_1 = input.LA(2);
				if ( (synpred87_Delphi()) ) {
					alt62=1;
				}
				else if ( (synpred88_Delphi()) ) {
					alt62=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 62, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROCEDURE:
				{
				int LA62_2 = input.LA(2);
				if ( (synpred87_Delphi()) ) {
					alt62=1;
				}
				else if ( (synpred88_Delphi()) ) {
					alt62=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 62, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REFERENCE:
				{
				alt62=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 62, 0, input);
				throw nvae;
			}
			switch (alt62) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:32: methodType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_methodType_in_procedureType4583);
					methodType204=methodType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, methodType204.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: simpleProcedureType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleProcedureType_in_procedureType4616);
					simpleProcedureType205=simpleProcedureType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleProcedureType205.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:225:32: procedureReference
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedureReference_in_procedureType4649);
					procedureReference206=procedureReference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureReference206.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 51, procedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureType"


	public static class methodType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:1: methodType : procedureTypeHeading 'of' 'object' ;
	public final DelphiParser.methodType_return methodType() throws RecognitionException {
		DelphiParser.methodType_return retval = new DelphiParser.methodType_return();
		retval.start = input.LT(1);
		int methodType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal208=null;
		Token string_literal209=null;
		ParserRuleReturnScope procedureTypeHeading207 =null;

		Object string_literal208_tree=null;
		Object string_literal209_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:30: ( procedureTypeHeading 'of' 'object' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:227:32: procedureTypeHeading 'of' 'object'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_methodType4704);
			procedureTypeHeading207=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading207.getTree());

			string_literal208=(Token)match(input,OF,FOLLOW_OF_in_methodType4706); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal208_tree = (Object)adaptor.create(string_literal208);
			adaptor.addChild(root_0, string_literal208_tree);
			}

			string_literal209=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_methodType4708); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal209_tree = (Object)adaptor.create(string_literal209);
			adaptor.addChild(root_0, string_literal209_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 52, methodType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodType"


	public static class simpleProcedureType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleProcedureType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:1: simpleProcedureType : procedureTypeHeading ( ( ';' )? callConvention )? ;
	public final DelphiParser.simpleProcedureType_return simpleProcedureType() throws RecognitionException {
		DelphiParser.simpleProcedureType_return retval = new DelphiParser.simpleProcedureType_return();
		retval.start = input.LT(1);
		int simpleProcedureType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal211=null;
		ParserRuleReturnScope procedureTypeHeading210 =null;
		ParserRuleReturnScope callConvention212 =null;

		Object char_literal211_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:30: ( procedureTypeHeading ( ( ';' )? callConvention )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:32: procedureTypeHeading ( ( ';' )? callConvention )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_procedureTypeHeading_in_simpleProcedureType4754);
			procedureTypeHeading210=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading210.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:53: ( ( ';' )? callConvention )?
			int alt64=2;
			switch ( input.LA(1) ) {
				case SEMI:
					{
					int LA64_1 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt64=1;
					}
					}
					break;
				case EXPORT:
				case REGISTER:
					{
					int LA64_2 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt64=1;
					}
					}
					break;
				case CDECL:
				case PASCAL:
				case SAFECALL:
				case STDCALL:
					{
					int LA64_4 = input.LA(2);
					if ( (synpred90_Delphi()) ) {
						alt64=1;
					}
					}
					break;
			}
			switch (alt64) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:55: ( ';' )? callConvention
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:55: ( ';' )?
					int alt63=2;
					int LA63_0 = input.LA(1);
					if ( (LA63_0==SEMI) ) {
						alt63=1;
					}
					switch (alt63) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:56: ';'
							{
							char_literal211=(Token)match(input,SEMI,FOLLOW_SEMI_in_simpleProcedureType4759); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal211_tree = (Object)adaptor.create(char_literal211);
							adaptor.addChild(root_0, char_literal211_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_callConvention_in_simpleProcedureType4763);
					callConvention212=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention212.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 53, simpleProcedureType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleProcedureType"


	public static class procedureReference_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureReference"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:1: procedureReference : 'reference' 'to' procedureTypeHeading ;
	public final DelphiParser.procedureReference_return procedureReference() throws RecognitionException {
		DelphiParser.procedureReference_return retval = new DelphiParser.procedureReference_return();
		retval.start = input.LT(1);
		int procedureReference_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal213=null;
		Token string_literal214=null;
		ParserRuleReturnScope procedureTypeHeading215 =null;

		Object string_literal213_tree=null;
		Object string_literal214_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:30: ( 'reference' 'to' procedureTypeHeading )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:231:32: 'reference' 'to' procedureTypeHeading
			{
			root_0 = (Object)adaptor.nil();


			string_literal213=(Token)match(input,REFERENCE,FOLLOW_REFERENCE_in_procedureReference4812); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal213_tree = (Object)adaptor.create(string_literal213);
			adaptor.addChild(root_0, string_literal213_tree);
			}

			string_literal214=(Token)match(input,TO,FOLLOW_TO_in_procedureReference4814); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal214_tree = (Object)adaptor.create(string_literal214);
			adaptor.addChild(root_0, string_literal214_tree);
			}

			pushFollow(FOLLOW_procedureTypeHeading_in_procedureReference4816);
			procedureTypeHeading215=procedureTypeHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureTypeHeading215.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 54, procedureReference_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureReference"


	public static class procedureTypeHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedureTypeHeading"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:1: procedureTypeHeading : ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? );
	public final DelphiParser.procedureTypeHeading_return procedureTypeHeading() throws RecognitionException {
		DelphiParser.procedureTypeHeading_return retval = new DelphiParser.procedureTypeHeading_return();
		retval.start = input.LT(1);
		int procedureTypeHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal216=null;
		Token char_literal218=null;
		Token string_literal221=null;
		ParserRuleReturnScope formalParameterSection217 =null;
		ParserRuleReturnScope customAttribute219 =null;
		ParserRuleReturnScope typeDecl220 =null;
		ParserRuleReturnScope formalParameterSection222 =null;

		Object string_literal216_tree=null;
		Object char_literal218_tree=null;
		Object string_literal221_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:30: ( 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl ) | 'procedure' ( formalParameterSection )? )
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==FUNCTION) ) {
				alt68=1;
			}
			else if ( (LA68_0==PROCEDURE) ) {
				alt68=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 68, 0, input);
				throw nvae;
			}

			switch (alt68) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:32: 'function' ( formalParameterSection )? ':' ( customAttribute )? typeDecl
					{
					string_literal216=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procedureTypeHeading4861); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal216);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:43: ( formalParameterSection )?
					int alt65=2;
					int LA65_0 = input.LA(1);
					if ( (LA65_0==LPAREN) ) {
						alt65=1;
					}
					switch (alt65) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4864);
							formalParameterSection217=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection217.getTree());
							}
							break;

					}

					char_literal218=(Token)match(input,COLON,FOLLOW_COLON_in_procedureTypeHeading4868); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal218);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:73: ( customAttribute )?
					int alt66=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA66_1 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case PACKED:
							{
							int LA66_2 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA66_3 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case SET:
							{
							int LA66_4 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case FILE:
							{
							int LA66_5 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case CLASS:
							{
							int LA66_6 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA66_7 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA66_8 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case RECORD:
							{
							int LA66_9 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA66_10 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case POINTER:
							{
							int LA66_11 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case STRING:
							{
							int LA66_12 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case TYPE:
							{
							int LA66_13 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA66_14 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA66_15 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA66_16 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA66_17 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA66_18 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA66_19 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA66_20 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case TkAsmHexNum:
							{
							int LA66_21 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case ControlString:
							{
							int LA66_22 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA66_23 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA66_24 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case 199:
							{
							int LA66_25 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DEPRECATED:
						case EXIT:
						case EXPORT:
						case FINAL:
						case HELPER:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case PACKAGE:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case WRITE:
							{
							int LA66_26 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case NIL:
							{
							int LA66_27 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case TRUE:
							{
							int LA66_28 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case FALSE:
							{
							int LA66_29 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA66_30 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case AT2:
						case MINUS:
						case NOT:
						case PLUS:
							{
							int LA66_31 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA66_32 = input.LA(2);
							if ( (synpred92_Delphi()) ) {
								alt66=1;
							}
							}
							break;
					}
					switch (alt66) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:74: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procedureTypeHeading4871);
							customAttribute219=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute219.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_procedureTypeHeading4875);
					typeDecl220=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl220.getTree());
					// AST REWRITE
					// elements: formalParameterSection, typeDecl, FUNCTION
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 233:101: -> 'function' ( formalParameterSection )? ^( TkFunctionReturn typeDecl )
					{
						adaptor.addChild(root_0, stream_FUNCTION.nextNode());
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:115: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_0, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:141: ^( TkFunctionReturn typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_1);
						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:32: 'procedure' ( formalParameterSection )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal221=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procedureTypeHeading4923); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal221_tree = (Object)adaptor.create(string_literal221);
					adaptor.addChild(root_0, string_literal221_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:44: ( formalParameterSection )?
					int alt67=2;
					alt67 = dfa67.predict(input);
					switch (alt67) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procedureTypeHeading4926);
							formalParameterSection222=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection222.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 55, procedureTypeHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procedureTypeHeading"


	public static class variantType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:1: variantType : 'variant' ;
	public final DelphiParser.variantType_return variantType() throws RecognitionException {
		DelphiParser.variantType_return retval = new DelphiParser.variantType_return();
		retval.start = input.LT(1);
		int variantType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal223=null;

		Object string_literal223_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:30: ( 'variant' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:236:32: 'variant'
			{
			root_0 = (Object)adaptor.nil();


			string_literal223=(Token)match(input,VARIANT,FOLLOW_VARIANT_in_variantType4982); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal223_tree = (Object)adaptor.create(string_literal223);
			adaptor.addChild(root_0, string_literal223_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 56, variantType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantType"


	public static class simpleType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:1: simpleType : ( ident | enumType );
	public final DelphiParser.simpleType_return simpleType() throws RecognitionException {
		DelphiParser.simpleType_return retval = new DelphiParser.simpleType_return();
		retval.start = input.LT(1);
		int simpleType_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope ident224 =null;
		ParserRuleReturnScope enumType225 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:30: ( ident | enumType )
			int alt69=2;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==ADD||LA69_0==ANSISTRING||LA69_0==AT||LA69_0==BREAK||(LA69_0 >= CONTAINS && LA69_0 <= CONTINUE)||(LA69_0 >= DEFAULT && LA69_0 <= DEPRECATED)||LA69_0==EXIT||LA69_0==EXPORT||LA69_0==FINAL||LA69_0==HELPER||LA69_0==IMPLEMENTS||LA69_0==INDEX||LA69_0==LOCAL||LA69_0==MESSAGE||LA69_0==NAME||LA69_0==OBJECT||LA69_0==OPERATOR||LA69_0==OUT||LA69_0==PACKAGE||LA69_0==POINTER||(LA69_0 >= READ && LA69_0 <= READONLY)||(LA69_0 >= REFERENCE && LA69_0 <= REGISTER)||LA69_0==REMOVE||(LA69_0 >= STORED && LA69_0 <= STRING)||LA69_0==TkIdentifier||LA69_0==VARIANT||LA69_0==WRITE||LA69_0==199) ) {
				alt69=1;
			}
			else if ( (LA69_0==LPAREN) ) {
				alt69=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 69, 0, input);
				throw nvae;
			}

			switch (alt69) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:238:32: ident
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ident_in_simpleType5038);
					ident224=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident224.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:239:32: enumType
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_enumType_in_simpleType5071);
					enumType225=enumType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enumType225.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 57, simpleType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleType"


	public static class subRangeType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subRangeType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:1: subRangeType : expression '..' expression ;
	public final DelphiParser.subRangeType_return subRangeType() throws RecognitionException {
		DelphiParser.subRangeType_return retval = new DelphiParser.subRangeType_return();
		retval.start = input.LT(1);
		int subRangeType_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal227=null;
		ParserRuleReturnScope expression226 =null;
		ParserRuleReturnScope expression228 =null;

		Object string_literal227_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:30: ( expression '..' expression )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:241:32: expression '..' expression
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_subRangeType5124);
			expression226=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression226.getTree());

			string_literal227=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_subRangeType5126); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal227_tree = (Object)adaptor.create(string_literal227);
			adaptor.addChild(root_0, string_literal227_tree);
			}

			pushFollow(FOLLOW_expression_in_subRangeType5128);
			expression228=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression228.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 58, subRangeType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "subRangeType"


	public static class enumType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "enumType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:1: enumType : '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' ;
	public final DelphiParser.enumType_return enumType() throws RecognitionException {
		DelphiParser.enumType_return retval = new DelphiParser.enumType_return();
		retval.start = input.LT(1);
		int enumType_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal229=null;
		Token char_literal231=null;
		Token char_literal233=null;
		Token char_literal235=null;
		Token char_literal237=null;
		ParserRuleReturnScope ident230 =null;
		ParserRuleReturnScope expression232 =null;
		ParserRuleReturnScope ident234 =null;
		ParserRuleReturnScope expression236 =null;

		Object char_literal229_tree=null;
		Object char_literal231_tree=null;
		Object char_literal233_tree=null;
		Object char_literal235_tree=null;
		Object char_literal237_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:30: ( '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:32: '(' ident ( '=' expression )? ( ',' ident ( '=' expression )? )* ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal229=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_enumType5185); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal229_tree = (Object)adaptor.create(char_literal229);
			adaptor.addChild(root_0, char_literal229_tree);
			}

			pushFollow(FOLLOW_ident_in_enumType5187);
			ident230=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident230.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:42: ( '=' expression )?
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==EQUAL) ) {
				alt70=1;
			}
			switch (alt70) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:43: '=' expression
					{
					char_literal231=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5190); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal231_tree = (Object)adaptor.create(char_literal231);
					adaptor.addChild(root_0, char_literal231_tree);
					}

					pushFollow(FOLLOW_expression_in_enumType5192);
					expression232=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression232.getTree());

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:60: ( ',' ident ( '=' expression )? )*
			loop72:
			while (true) {
				int alt72=2;
				int LA72_0 = input.LA(1);
				if ( (LA72_0==COMMA) ) {
					alt72=1;
				}

				switch (alt72) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:61: ',' ident ( '=' expression )?
					{
					char_literal233=(Token)match(input,COMMA,FOLLOW_COMMA_in_enumType5197); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal233_tree = (Object)adaptor.create(char_literal233);
					adaptor.addChild(root_0, char_literal233_tree);
					}

					pushFollow(FOLLOW_ident_in_enumType5199);
					ident234=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident234.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:71: ( '=' expression )?
					int alt71=2;
					int LA71_0 = input.LA(1);
					if ( (LA71_0==EQUAL) ) {
						alt71=1;
					}
					switch (alt71) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:243:72: '=' expression
							{
							char_literal235=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_enumType5202); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal235_tree = (Object)adaptor.create(char_literal235);
							adaptor.addChild(root_0, char_literal235_tree);
							}

							pushFollow(FOLLOW_expression_in_enumType5204);
							expression236=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression236.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop72;
				}
			}

			char_literal237=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_enumType5211); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal237_tree = (Object)adaptor.create(char_literal237);
			adaptor.addChild(root_0, char_literal237_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 59, enumType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "enumType"


	public static class typeId_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "typeId"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:245:1: typeId : namespacedQualifiedIdent ;
	public final DelphiParser.typeId_return typeId() throws RecognitionException {
		DelphiParser.typeId_return retval = new DelphiParser.typeId_return();
		retval.start = input.LT(1);
		int typeId_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope namespacedQualifiedIdent238 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:245:30: ( namespacedQualifiedIdent )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:245:32: namespacedQualifiedIdent
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_namespacedQualifiedIdent_in_typeId5270);
			namespacedQualifiedIdent238=namespacedQualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, namespacedQualifiedIdent238.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 60, typeId_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "typeId"


	public static class genericTypeIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericTypeIdent"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:1: genericTypeIdent : qualifiedIdent ( genericDefinition )? -> qualifiedIdent ;
	public final DelphiParser.genericTypeIdent_return genericTypeIdent() throws RecognitionException {
		DelphiParser.genericTypeIdent_return retval = new DelphiParser.genericTypeIdent_return();
		retval.start = input.LT(1);
		int genericTypeIdent_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope qualifiedIdent239 =null;
		ParserRuleReturnScope genericDefinition240 =null;

		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:30: ( qualifiedIdent ( genericDefinition )? -> qualifiedIdent )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:32: qualifiedIdent ( genericDefinition )?
			{
			pushFollow(FOLLOW_qualifiedIdent_in_genericTypeIdent5322);
			qualifiedIdent239=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent239.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:47: ( genericDefinition )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==LT) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:250:48: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_genericTypeIdent5325);
					genericDefinition240=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition240.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: qualifiedIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 250:68: -> qualifiedIdent
			{
				adaptor.addChild(root_0, stream_qualifiedIdent.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 61, genericTypeIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericTypeIdent"


	public static class genericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericDefinition"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:1: genericDefinition : ( simpleGenericDefinition | complexGenericDefinition | constrainedGenericDefinition );
	public final DelphiParser.genericDefinition_return genericDefinition() throws RecognitionException {
		DelphiParser.genericDefinition_return retval = new DelphiParser.genericDefinition_return();
		retval.start = input.LT(1);
		int genericDefinition_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope simpleGenericDefinition241 =null;
		ParserRuleReturnScope complexGenericDefinition242 =null;
		ParserRuleReturnScope constrainedGenericDefinition243 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:30: ( simpleGenericDefinition | complexGenericDefinition | constrainedGenericDefinition )
			int alt74=3;
			alt74 = dfa74.predict(input);
			switch (alt74) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:32: simpleGenericDefinition
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleGenericDefinition_in_genericDefinition5383);
					simpleGenericDefinition241=simpleGenericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleGenericDefinition241.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:253:32: complexGenericDefinition
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_complexGenericDefinition_in_genericDefinition5416);
					complexGenericDefinition242=complexGenericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, complexGenericDefinition242.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:254:32: constrainedGenericDefinition
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constrainedGenericDefinition_in_genericDefinition5449);
					constrainedGenericDefinition243=constrainedGenericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constrainedGenericDefinition243.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 62, genericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericDefinition"


	public static class simpleGenericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleGenericDefinition"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:1: simpleGenericDefinition : '<' ident ( ',' ident )* '>' ;
	public final DelphiParser.simpleGenericDefinition_return simpleGenericDefinition() throws RecognitionException {
		DelphiParser.simpleGenericDefinition_return retval = new DelphiParser.simpleGenericDefinition_return();
		retval.start = input.LT(1);
		int simpleGenericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal244=null;
		Token char_literal246=null;
		Token char_literal248=null;
		ParserRuleReturnScope ident245 =null;
		ParserRuleReturnScope ident247 =null;

		Object char_literal244_tree=null;
		Object char_literal246_tree=null;
		Object char_literal248_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:30: ( '<' ident ( ',' ident )* '>' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:32: '<' ident ( ',' ident )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal244=(Token)match(input,LT,FOLLOW_LT_in_simpleGenericDefinition5491); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal244_tree = (Object)adaptor.create(char_literal244);
			adaptor.addChild(root_0, char_literal244_tree);
			}

			pushFollow(FOLLOW_ident_in_simpleGenericDefinition5493);
			ident245=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident245.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:42: ( ',' ident )*
			loop75:
			while (true) {
				int alt75=2;
				int LA75_0 = input.LA(1);
				if ( (LA75_0==COMMA) ) {
					alt75=1;
				}

				switch (alt75) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:256:43: ',' ident
					{
					char_literal246=(Token)match(input,COMMA,FOLLOW_COMMA_in_simpleGenericDefinition5496); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal246_tree = (Object)adaptor.create(char_literal246);
					adaptor.addChild(root_0, char_literal246_tree);
					}

					pushFollow(FOLLOW_ident_in_simpleGenericDefinition5498);
					ident247=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident247.getTree());

					}
					break;

				default :
					break loop75;
				}
			}

			char_literal248=(Token)match(input,GT,FOLLOW_GT_in_simpleGenericDefinition5502); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal248_tree = (Object)adaptor.create(char_literal248);
			adaptor.addChild(root_0, char_literal248_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 63, simpleGenericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleGenericDefinition"


	public static class complexGenericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "complexGenericDefinition"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:1: complexGenericDefinition : '<' qualifiedIdent ( simpleGenericDefinition )? ( ',' qualifiedIdent ( simpleGenericDefinition )? )* '>' ;
	public final DelphiParser.complexGenericDefinition_return complexGenericDefinition() throws RecognitionException {
		DelphiParser.complexGenericDefinition_return retval = new DelphiParser.complexGenericDefinition_return();
		retval.start = input.LT(1);
		int complexGenericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal249=null;
		Token char_literal252=null;
		Token char_literal255=null;
		ParserRuleReturnScope qualifiedIdent250 =null;
		ParserRuleReturnScope simpleGenericDefinition251 =null;
		ParserRuleReturnScope qualifiedIdent253 =null;
		ParserRuleReturnScope simpleGenericDefinition254 =null;

		Object char_literal249_tree=null;
		Object char_literal252_tree=null;
		Object char_literal255_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:30: ( '<' qualifiedIdent ( simpleGenericDefinition )? ( ',' qualifiedIdent ( simpleGenericDefinition )? )* '>' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:32: '<' qualifiedIdent ( simpleGenericDefinition )? ( ',' qualifiedIdent ( simpleGenericDefinition )? )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal249=(Token)match(input,LT,FOLLOW_LT_in_complexGenericDefinition5543); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal249_tree = (Object)adaptor.create(char_literal249);
			adaptor.addChild(root_0, char_literal249_tree);
			}

			pushFollow(FOLLOW_qualifiedIdent_in_complexGenericDefinition5545);
			qualifiedIdent250=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent250.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:51: ( simpleGenericDefinition )?
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==LT) ) {
				alt76=1;
			}
			switch (alt76) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:52: simpleGenericDefinition
					{
					pushFollow(FOLLOW_simpleGenericDefinition_in_complexGenericDefinition5548);
					simpleGenericDefinition251=simpleGenericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleGenericDefinition251.getTree());

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:78: ( ',' qualifiedIdent ( simpleGenericDefinition )? )*
			loop78:
			while (true) {
				int alt78=2;
				int LA78_0 = input.LA(1);
				if ( (LA78_0==COMMA) ) {
					alt78=1;
				}

				switch (alt78) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:79: ',' qualifiedIdent ( simpleGenericDefinition )?
					{
					char_literal252=(Token)match(input,COMMA,FOLLOW_COMMA_in_complexGenericDefinition5553); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal252_tree = (Object)adaptor.create(char_literal252);
					adaptor.addChild(root_0, char_literal252_tree);
					}

					pushFollow(FOLLOW_qualifiedIdent_in_complexGenericDefinition5555);
					qualifiedIdent253=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent253.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:98: ( simpleGenericDefinition )?
					int alt77=2;
					int LA77_0 = input.LA(1);
					if ( (LA77_0==LT) ) {
						alt77=1;
					}
					switch (alt77) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:258:99: simpleGenericDefinition
							{
							pushFollow(FOLLOW_simpleGenericDefinition_in_complexGenericDefinition5558);
							simpleGenericDefinition254=simpleGenericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleGenericDefinition254.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop78;
				}
			}

			char_literal255=(Token)match(input,GT,FOLLOW_GT_in_complexGenericDefinition5564); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal255_tree = (Object)adaptor.create(char_literal255);
			adaptor.addChild(root_0, char_literal255_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 64, complexGenericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "complexGenericDefinition"


	public static class constrainedGenericDefinition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constrainedGenericDefinition"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:1: constrainedGenericDefinition : '<' constrainedGeneric ( ';' constrainedGeneric )* '>' ;
	public final DelphiParser.constrainedGenericDefinition_return constrainedGenericDefinition() throws RecognitionException {
		DelphiParser.constrainedGenericDefinition_return retval = new DelphiParser.constrainedGenericDefinition_return();
		retval.start = input.LT(1);
		int constrainedGenericDefinition_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal256=null;
		Token char_literal258=null;
		Token char_literal260=null;
		ParserRuleReturnScope constrainedGeneric257 =null;
		ParserRuleReturnScope constrainedGeneric259 =null;

		Object char_literal256_tree=null;
		Object char_literal258_tree=null;
		Object char_literal260_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:30: ( '<' constrainedGeneric ( ';' constrainedGeneric )* '>' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:32: '<' constrainedGeneric ( ';' constrainedGeneric )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal256=(Token)match(input,LT,FOLLOW_LT_in_constrainedGenericDefinition5601); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal256_tree = (Object)adaptor.create(char_literal256);
			adaptor.addChild(root_0, char_literal256_tree);
			}

			pushFollow(FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5603);
			constrainedGeneric257=constrainedGeneric();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constrainedGeneric257.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:55: ( ';' constrainedGeneric )*
			loop79:
			while (true) {
				int alt79=2;
				int LA79_0 = input.LA(1);
				if ( (LA79_0==SEMI) ) {
					alt79=1;
				}

				switch (alt79) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:260:56: ';' constrainedGeneric
					{
					char_literal258=(Token)match(input,SEMI,FOLLOW_SEMI_in_constrainedGenericDefinition5606); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal258_tree = (Object)adaptor.create(char_literal258);
					adaptor.addChild(root_0, char_literal258_tree);
					}

					pushFollow(FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5608);
					constrainedGeneric259=constrainedGeneric();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constrainedGeneric259.getTree());

					}
					break;

				default :
					break loop79;
				}
			}

			char_literal260=(Token)match(input,GT,FOLLOW_GT_in_constrainedGenericDefinition5612); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal260_tree = (Object)adaptor.create(char_literal260);
			adaptor.addChild(root_0, char_literal260_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 65, constrainedGenericDefinition_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constrainedGenericDefinition"


	public static class constrainedGeneric_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constrainedGeneric"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:1: constrainedGeneric : ident ( ':' genericConstraint ( ',' genericConstraint )* )? ;
	public final DelphiParser.constrainedGeneric_return constrainedGeneric() throws RecognitionException {
		DelphiParser.constrainedGeneric_return retval = new DelphiParser.constrainedGeneric_return();
		retval.start = input.LT(1);
		int constrainedGeneric_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal262=null;
		Token char_literal264=null;
		ParserRuleReturnScope ident261 =null;
		ParserRuleReturnScope genericConstraint263 =null;
		ParserRuleReturnScope genericConstraint265 =null;

		Object char_literal262_tree=null;
		Object char_literal264_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:30: ( ident ( ':' genericConstraint ( ',' genericConstraint )* )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:32: ident ( ':' genericConstraint ( ',' genericConstraint )* )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_constrainedGeneric5659);
			ident261=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident261.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:38: ( ':' genericConstraint ( ',' genericConstraint )* )?
			int alt81=2;
			int LA81_0 = input.LA(1);
			if ( (LA81_0==COLON) ) {
				alt81=1;
			}
			switch (alt81) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:39: ':' genericConstraint ( ',' genericConstraint )*
					{
					char_literal262=(Token)match(input,COLON,FOLLOW_COLON_in_constrainedGeneric5662); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal262_tree = (Object)adaptor.create(char_literal262);
					adaptor.addChild(root_0, char_literal262_tree);
					}

					pushFollow(FOLLOW_genericConstraint_in_constrainedGeneric5664);
					genericConstraint263=genericConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint263.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:61: ( ',' genericConstraint )*
					loop80:
					while (true) {
						int alt80=2;
						int LA80_0 = input.LA(1);
						if ( (LA80_0==COMMA) ) {
							alt80=1;
						}

						switch (alt80) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:262:62: ',' genericConstraint
							{
							char_literal264=(Token)match(input,COMMA,FOLLOW_COMMA_in_constrainedGeneric5667); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal264_tree = (Object)adaptor.create(char_literal264);
							adaptor.addChild(root_0, char_literal264_tree);
							}

							pushFollow(FOLLOW_genericConstraint_in_constrainedGeneric5669);
							genericConstraint265=genericConstraint();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericConstraint265.getTree());

							}
							break;

						default :
							break loop80;
						}
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 66, constrainedGeneric_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constrainedGeneric"


	public static class genericConstraint_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericConstraint"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:1: genericConstraint : ( ident | 'record' | 'class' | 'constructor' );
	public final DelphiParser.genericConstraint_return genericConstraint() throws RecognitionException {
		DelphiParser.genericConstraint_return retval = new DelphiParser.genericConstraint_return();
		retval.start = input.LT(1);
		int genericConstraint_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal267=null;
		Token string_literal268=null;
		Token string_literal269=null;
		ParserRuleReturnScope ident266 =null;

		Object string_literal267_tree=null;
		Object string_literal268_tree=null;
		Object string_literal269_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:30: ( ident | 'record' | 'class' | 'constructor' )
			int alt82=4;
			switch ( input.LA(1) ) {
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 199:
				{
				alt82=1;
				}
				break;
			case RECORD:
				{
				alt82=2;
				}
				break;
			case CLASS:
				{
				alt82=3;
				}
				break;
			case CONSTRUCTOR:
				{
				alt82=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:264:32: ident
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ident_in_genericConstraint5721);
					ident266=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident266.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:265:32: 'record'
					{
					root_0 = (Object)adaptor.nil();


					string_literal267=(Token)match(input,RECORD,FOLLOW_RECORD_in_genericConstraint5754); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal267_tree = (Object)adaptor.create(string_literal267);
					adaptor.addChild(root_0, string_literal267_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:266:32: 'class'
					{
					root_0 = (Object)adaptor.nil();


					string_literal268=(Token)match(input,CLASS,FOLLOW_CLASS_in_genericConstraint5787); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal268_tree = (Object)adaptor.create(string_literal268);
					adaptor.addChild(root_0, string_literal268_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:267:32: 'constructor'
					{
					root_0 = (Object)adaptor.nil();


					string_literal269=(Token)match(input,CONSTRUCTOR,FOLLOW_CONSTRUCTOR_in_genericConstraint5820); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal269_tree = (Object)adaptor.create(string_literal269);
					adaptor.addChild(root_0, string_literal269_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 67, genericConstraint_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericConstraint"


	public static class genericPostfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "genericPostfix"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:1: genericPostfix : '<' typeDecl ( ',' typeDecl )* '>' ;
	public final DelphiParser.genericPostfix_return genericPostfix() throws RecognitionException {
		DelphiParser.genericPostfix_return retval = new DelphiParser.genericPostfix_return();
		retval.start = input.LT(1);
		int genericPostfix_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal270=null;
		Token char_literal272=null;
		Token char_literal274=null;
		ParserRuleReturnScope typeDecl271 =null;
		ParserRuleReturnScope typeDecl273 =null;

		Object char_literal270_tree=null;
		Object char_literal272_tree=null;
		Object char_literal274_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:30: ( '<' typeDecl ( ',' typeDecl )* '>' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:32: '<' typeDecl ( ',' typeDecl )* '>'
			{
			root_0 = (Object)adaptor.nil();


			char_literal270=(Token)match(input,LT,FOLLOW_LT_in_genericPostfix5871); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal270_tree = (Object)adaptor.create(char_literal270);
			adaptor.addChild(root_0, char_literal270_tree);
			}

			pushFollow(FOLLOW_typeDecl_in_genericPostfix5873);
			typeDecl271=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl271.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:45: ( ',' typeDecl )*
			loop83:
			while (true) {
				int alt83=2;
				int LA83_0 = input.LA(1);
				if ( (LA83_0==COMMA) ) {
					alt83=1;
				}

				switch (alt83) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:269:46: ',' typeDecl
					{
					char_literal272=(Token)match(input,COMMA,FOLLOW_COMMA_in_genericPostfix5876); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal272_tree = (Object)adaptor.create(char_literal272);
					adaptor.addChild(root_0, char_literal272_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_genericPostfix5878);
					typeDecl273=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl273.getTree());

					}
					break;

				default :
					break loop83;
				}
			}

			char_literal274=(Token)match(input,GT,FOLLOW_GT_in_genericPostfix5882); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal274_tree = (Object)adaptor.create(char_literal274);
			adaptor.addChild(root_0, char_literal274_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 68, genericPostfix_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "genericPostfix"


	public static class classDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:1: classDecl : ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) );
	public final DelphiParser.classDecl_return classDecl() throws RecognitionException {
		DelphiParser.classDecl_return retval = new DelphiParser.classDecl_return();
		retval.start = input.LT(1);
		int classDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope classTypeTypeDecl275 =null;
		ParserRuleReturnScope classTypeDecl276 =null;
		ParserRuleReturnScope classHelperDecl277 =null;
		ParserRuleReturnScope interfaceTypeDecl278 =null;
		ParserRuleReturnScope objectDecl279 =null;
		ParserRuleReturnScope recordDecl280 =null;
		ParserRuleReturnScope recordHelperDecl281 =null;

		RewriteRuleSubtreeStream stream_interfaceTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceTypeDecl");
		RewriteRuleSubtreeStream stream_recordHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordHelperDecl");
		RewriteRuleSubtreeStream stream_objectDecl=new RewriteRuleSubtreeStream(adaptor,"rule objectDecl");
		RewriteRuleSubtreeStream stream_classHelperDecl=new RewriteRuleSubtreeStream(adaptor,"rule classHelperDecl");
		RewriteRuleSubtreeStream stream_recordDecl=new RewriteRuleSubtreeStream(adaptor,"rule recordDecl");
		RewriteRuleSubtreeStream stream_classTypeDecl=new RewriteRuleSubtreeStream(adaptor,"rule classTypeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:30: ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) )
			int alt84=7;
			alt84 = dfa84.predict(input);
			switch (alt84) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: classTypeTypeDecl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classTypeTypeDecl_in_classDecl5941);
					classTypeTypeDecl275=classTypeTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classTypeTypeDecl275.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:32: classTypeDecl
					{
					pushFollow(FOLLOW_classTypeDecl_in_classDecl5974);
					classTypeDecl276=classTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classTypeDecl.add(classTypeDecl276.getTree());
					// AST REWRITE
					// elements: classTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 275:46: -> ^( TkClass classTypeDecl )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:49: ^( TkClass classTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:32: classHelperDecl
					{
					pushFollow(FOLLOW_classHelperDecl_in_classDecl6015);
					classHelperDecl277=classHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperDecl.add(classHelperDecl277.getTree());
					// AST REWRITE
					// elements: classHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 276:48: -> ^( TkClass classHelperDecl )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:276:51: ^( TkClass classHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClass, "TkClass"), root_1);
						adaptor.addChild(root_1, stream_classHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:32: interfaceTypeDecl
					{
					pushFollow(FOLLOW_interfaceTypeDecl_in_classDecl6056);
					interfaceTypeDecl278=interfaceTypeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceTypeDecl.add(interfaceTypeDecl278.getTree());
					// AST REWRITE
					// elements: interfaceTypeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 277:50: -> ^( TkInterface interfaceTypeDecl )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:277:53: ^( TkInterface interfaceTypeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkInterface, "TkInterface"), root_1);
						adaptor.addChild(root_1, stream_interfaceTypeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:32: objectDecl
					{
					pushFollow(FOLLOW_objectDecl_in_classDecl6097);
					objectDecl279=objectDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectDecl.add(objectDecl279.getTree());
					// AST REWRITE
					// elements: objectDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 278:43: -> ^( TkObject objectDecl )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:278:46: ^( TkObject objectDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkObject, "TkObject"), root_1);
						adaptor.addChild(root_1, stream_objectDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:32: recordDecl
					{
					pushFollow(FOLLOW_recordDecl_in_classDecl6138);
					recordDecl280=recordDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordDecl.add(recordDecl280.getTree());
					// AST REWRITE
					// elements: recordDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 279:43: -> ^( TkRecord recordDecl )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:279:46: ^( TkRecord recordDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecord, "TkRecord"), root_1);
						adaptor.addChild(root_1, stream_recordDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:32: recordHelperDecl
					{
					pushFollow(FOLLOW_recordHelperDecl_in_classDecl6179);
					recordHelperDecl281=recordHelperDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordHelperDecl.add(recordHelperDecl281.getTree());
					// AST REWRITE
					// elements: recordHelperDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 280:49: -> ^( TkRecordHelper recordHelperDecl )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:280:52: ^( TkRecordHelper recordHelperDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkRecordHelper, "TkRecordHelper"), root_1);
						adaptor.addChild(root_1, stream_recordHelperDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 69, classDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classDecl"


	public static class classTypeTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeTypeDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:1: classTypeTypeDecl : 'class' 'of' typeId -> ^( TkClassOfType typeId ) ;
	public final DelphiParser.classTypeTypeDecl_return classTypeTypeDecl() throws RecognitionException {
		DelphiParser.classTypeTypeDecl_return retval = new DelphiParser.classTypeTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal282=null;
		Token string_literal283=null;
		ParserRuleReturnScope typeId284 =null;

		Object string_literal282_tree=null;
		Object string_literal283_tree=null;
		RewriteRuleTokenStream stream_OF=new RewriteRuleTokenStream(adaptor,"token OF");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:30: ( 'class' 'of' typeId -> ^( TkClassOfType typeId ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:32: 'class' 'of' typeId
			{
			string_literal282=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeTypeDecl6235); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal282);

			string_literal283=(Token)match(input,OF,FOLLOW_OF_in_classTypeTypeDecl6237); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OF.add(string_literal283);

			pushFollow(FOLLOW_typeId_in_classTypeTypeDecl6239);
			typeId284=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId284.getTree());
			// AST REWRITE
			// elements: typeId
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 282:52: -> ^( TkClassOfType typeId )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:282:55: ^( TkClassOfType typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassOfType, "TkClassOfType"), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 70, classTypeTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeTypeDecl"


	public static class classTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classTypeDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:1: classTypeDecl : ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classState )? ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.classTypeDecl_return classTypeDecl() throws RecognitionException {
		DelphiParser.classTypeDecl_return retval = new DelphiParser.classTypeDecl_return();
		retval.start = input.LT(1);
		int classTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal285=null;
		Token string_literal289=null;
		Token string_literal290=null;
		ParserRuleReturnScope classState286 =null;
		ParserRuleReturnScope classParent287 =null;
		ParserRuleReturnScope classItem288 =null;
		ParserRuleReturnScope classState291 =null;
		ParserRuleReturnScope classParent292 =null;

		Object string_literal285_tree=null;
		Object string_literal289_tree=null;
		Object string_literal290_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classState=new RewriteRuleSubtreeStream(adaptor,"rule classState");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_classItem=new RewriteRuleSubtreeStream(adaptor,"rule classItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:30: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )* | 'class' ( classState )? ( classParent )? -> 'class' ^( TkClassParents ( classParent )? ) )
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==CLASS) ) {
				int LA90_1 = input.LA(2);
				if ( (synpred122_Delphi()) ) {
					alt90=1;
				}
				else if ( (true) ) {
					alt90=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				throw nvae;
			}

			switch (alt90) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
					{
					string_literal285=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6299); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal285);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:40: ( classState )?
					int alt85=2;
					int LA85_0 = input.LA(1);
					if ( (LA85_0==ABSTRACT||LA85_0==SEALED) ) {
						alt85=1;
					}
					switch (alt85) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:41: classState
							{
							pushFollow(FOLLOW_classState_in_classTypeDecl6302);
							classState286=classState();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classState.add(classState286.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:54: ( classParent )?
					int alt86=2;
					int LA86_0 = input.LA(1);
					if ( (LA86_0==LPAREN) ) {
						alt86=1;
					}
					switch (alt86) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:55: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6307);
							classParent287=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent287.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:69: ( classItem )*
					loop87:
					while (true) {
						int alt87=2;
						int LA87_0 = input.LA(1);
						if ( (LA87_0==EOF||LA87_0==ADD||(LA87_0 >= ANSISTRING && LA87_0 <= ARRAY)||(LA87_0 >= AT && LA87_0 <= AUTOMATED)||LA87_0==BREAK||LA87_0==CLASS||(LA87_0 >= CONST && LA87_0 <= ControlString)||(LA87_0 >= DEFAULT && LA87_0 <= DESTRUCTOR)||LA87_0==DISPINTERFACE||LA87_0==EXIT||LA87_0==EXPORT||LA87_0==FALSE||(LA87_0 >= FILE && LA87_0 <= FINAL)||LA87_0==FUNCTION||LA87_0==HELPER||LA87_0==IMPLEMENTS||(LA87_0 >= INDEX && LA87_0 <= INHERITED)||LA87_0==INTERFACE||LA87_0==LBRACK||(LA87_0 >= LOCAL && LA87_0 <= LPAREN)||(LA87_0 >= MESSAGE && LA87_0 <= MINUS)||LA87_0==NAME||LA87_0==NIL||LA87_0==NOT||LA87_0==OBJECT||LA87_0==OPERATOR||LA87_0==OUT||(LA87_0 >= PACKAGE && LA87_0 <= PACKED)||(LA87_0 >= PLUS && LA87_0 <= PROCEDURE)||(LA87_0 >= PROPERTY && LA87_0 <= QuotedString)||(LA87_0 >= READ && LA87_0 <= REGISTER)||LA87_0==REMOVE||LA87_0==RESOURCESTRING||LA87_0==SET||(LA87_0 >= STORED && LA87_0 <= STRING)||LA87_0==THREADVAR||LA87_0==TRUE||LA87_0==TYPE||LA87_0==TkAsmHexNum||(LA87_0 >= TkHexNum && LA87_0 <= TkIntNum)||LA87_0==TkRealNum||LA87_0==VAR||LA87_0==VARIANT||LA87_0==WRITE||LA87_0==199) ) {
							alt87=1;
						}

						switch (alt87) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:70: classItem
							{
							pushFollow(FOLLOW_classItem_in_classTypeDecl6312);
							classItem288=classItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classItem.add(classItem288.getTree());
							}
							break;

						default :
							break loop87;
						}
					}

					string_literal289=(Token)match(input,END,FOLLOW_END_in_classTypeDecl6316); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal289);

					// AST REWRITE
					// elements: CLASS, classParent, classItem
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 284:88: -> 'class' ^( TkClassParents ( classParent )? ) ( classItem )*
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:99: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:116: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:132: ( classItem )*
						while ( stream_classItem.hasNext() ) {
							adaptor.addChild(root_0, stream_classItem.nextTree());
						}
						stream_classItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:32: 'class' ( classState )? ( classParent )?
					{
					string_literal290=(Token)match(input,CLASS,FOLLOW_CLASS_in_classTypeDecl6367); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal290);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:40: ( classState )?
					int alt88=2;
					int LA88_0 = input.LA(1);
					if ( (LA88_0==ABSTRACT) ) {
						int LA88_1 = input.LA(2);
						if ( (synpred123_Delphi()) ) {
							alt88=1;
						}
					}
					else if ( (LA88_0==SEALED) ) {
						alt88=1;
					}
					switch (alt88) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:41: classState
							{
							pushFollow(FOLLOW_classState_in_classTypeDecl6370);
							classState291=classState();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classState.add(classState291.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:54: ( classParent )?
					int alt89=2;
					alt89 = dfa89.predict(input);
					switch (alt89) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:55: classParent
							{
							pushFollow(FOLLOW_classParent_in_classTypeDecl6375);
							classParent292=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent292.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: CLASS, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 285:69: -> 'class' ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:80: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:97: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 71, classTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classTypeDecl"


	public static class classState_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classState"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:1: classState : ( 'sealed' | 'abstract' );
	public final DelphiParser.classState_return classState() throws RecognitionException {
		DelphiParser.classState_return retval = new DelphiParser.classState_return();
		retval.start = input.LT(1);
		int classState_StartIndex = input.index();

		Object root_0 = null;

		Token set293=null;

		Object set293_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:287:30: ( 'sealed' | 'abstract' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set293=input.LT(1);
			if ( input.LA(1)==ABSTRACT||input.LA(1)==SEALED ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set293));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 72, classState_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classState"


	public static class classParent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classParent"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:1: classParent : '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* ;
	public final DelphiParser.classParent_return classParent() throws RecognitionException {
		DelphiParser.classParent_return retval = new DelphiParser.classParent_return();
		retval.start = input.LT(1);
		int classParent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal294=null;
		Token char_literal296=null;
		Token char_literal298=null;
		ParserRuleReturnScope genericTypeIdent295 =null;
		ParserRuleReturnScope genericTypeIdent297 =null;

		Object char_literal294_tree=null;
		Object char_literal296_tree=null;
		Object char_literal298_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:30: ( '(' genericTypeIdent ( ',' genericTypeIdent )* ')' -> genericTypeIdent ( genericTypeIdent )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:32: '(' genericTypeIdent ( ',' genericTypeIdent )* ')'
			{
			char_literal294=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_classParent6532); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal294);

			pushFollow(FOLLOW_genericTypeIdent_in_classParent6534);
			genericTypeIdent295=genericTypeIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent295.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:53: ( ',' genericTypeIdent )*
			loop91:
			while (true) {
				int alt91=2;
				int LA91_0 = input.LA(1);
				if ( (LA91_0==COMMA) ) {
					alt91=1;
				}

				switch (alt91) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:54: ',' genericTypeIdent
					{
					char_literal296=(Token)match(input,COMMA,FOLLOW_COMMA_in_classParent6537); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal296);

					pushFollow(FOLLOW_genericTypeIdent_in_classParent6539);
					genericTypeIdent297=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent297.getTree());
					}
					break;

				default :
					break loop91;
				}
			}

			char_literal298=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_classParent6543); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal298);

			// AST REWRITE
			// elements: genericTypeIdent, genericTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 290:81: -> genericTypeIdent ( genericTypeIdent )*
			{
				adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:290:101: ( genericTypeIdent )*
				while ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_0, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 73, classParent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classParent"


	public static class classItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:1: classItem : ( visibility | classMethod | classField | classProperty | constSection | innerTypeSection | ( 'class' )? varSection );
	public final DelphiParser.classItem_return classItem() throws RecognitionException {
		DelphiParser.classItem_return retval = new DelphiParser.classItem_return();
		retval.start = input.LT(1);
		int classItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal305=null;
		ParserRuleReturnScope visibility299 =null;
		ParserRuleReturnScope classMethod300 =null;
		ParserRuleReturnScope classField301 =null;
		ParserRuleReturnScope classProperty302 =null;
		ParserRuleReturnScope constSection303 =null;
		ParserRuleReturnScope innerTypeSection304 =null;
		ParserRuleReturnScope varSection306 =null;

		Object string_literal305_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:30: ( visibility | classMethod | classField | classProperty | constSection | innerTypeSection | ( 'class' )? varSection )
			int alt93=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA93_1 = input.LA(2);
				if ( (synpred127_Delphi()) ) {
					alt93=1;
				}
				else if ( (synpred129_Delphi()) ) {
					alt93=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 93, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt93=1;
				}
				break;
			case LBRACK:
				{
				int LA93_7 = input.LA(2);
				if ( (synpred128_Delphi()) ) {
					alt93=2;
				}
				else if ( (synpred129_Delphi()) ) {
					alt93=3;
				}
				else if ( (synpred130_Delphi()) ) {
					alt93=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 93, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA93_8 = input.LA(2);
				if ( (synpred128_Delphi()) ) {
					alt93=2;
				}
				else if ( (synpred130_Delphi()) ) {
					alt93=4;
				}
				else if ( (true) ) {
					alt93=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt93=2;
				}
				break;
			case OPERATOR:
				{
				int LA93_11 = input.LA(2);
				if ( (synpred128_Delphi()) ) {
					alt93=2;
				}
				else if ( (synpred129_Delphi()) ) {
					alt93=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 93, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRING:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 199:
				{
				alt93=3;
				}
				break;
			case PROPERTY:
				{
				alt93=4;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt93=5;
				}
				break;
			case TYPE:
				{
				alt93=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt93=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 93, 0, input);
				throw nvae;
			}
			switch (alt93) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classItem6611);
					visibility299=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility299.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classItem6644);
					classMethod300=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod300.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_classItem6677);
					classField301=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField301.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classItem6710);
					classProperty302=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty302.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:296:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_classItem6743);
					constSection303=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection303.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:297:32: innerTypeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_innerTypeSection_in_classItem6776);
					innerTypeSection304=innerTypeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, innerTypeSection304.getTree());

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:32: ( 'class' )?
					int alt92=2;
					int LA92_0 = input.LA(1);
					if ( (LA92_0==CLASS) ) {
						alt92=1;
					}
					switch (alt92) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:298:33: 'class'
							{
							string_literal305=(Token)match(input,CLASS,FOLLOW_CLASS_in_classItem6810); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal305_tree = (Object)adaptor.create(string_literal305);
							adaptor.addChild(root_0, string_literal305_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classItem6814);
					varSection306=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection306.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 74, classItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classItem"


	public static class classHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:1: classHelperDecl : 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* ;
	public final DelphiParser.classHelperDecl_return classHelperDecl() throws RecognitionException {
		DelphiParser.classHelperDecl_return retval = new DelphiParser.classHelperDecl_return();
		retval.start = input.LT(1);
		int classHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal307=null;
		Token string_literal308=null;
		Token string_literal310=null;
		Token string_literal313=null;
		ParserRuleReturnScope classParent309 =null;
		ParserRuleReturnScope typeId311 =null;
		ParserRuleReturnScope classHelperItem312 =null;

		Object string_literal307_tree=null;
		Object string_literal308_tree=null;
		Object string_literal310_tree=null;
		Object string_literal313_tree=null;
		RewriteRuleTokenStream stream_HELPER=new RewriteRuleTokenStream(adaptor,"token HELPER");
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_classHelperItem=new RewriteRuleSubtreeStream(adaptor,"rule classHelperItem");
		RewriteRuleSubtreeStream stream_typeId=new RewriteRuleSubtreeStream(adaptor,"rule typeId");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:30: ( 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end' -> ^( 'class' typeId ) ( classHelperItem )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:32: 'class' 'helper' ( classParent )? 'for' typeId ( classHelperItem )* 'end'
			{
			string_literal307=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperDecl6864); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_CLASS.add(string_literal307);

			string_literal308=(Token)match(input,HELPER,FOLLOW_HELPER_in_classHelperDecl6866); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_HELPER.add(string_literal308);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:49: ( classParent )?
			int alt94=2;
			int LA94_0 = input.LA(1);
			if ( (LA94_0==LPAREN) ) {
				alt94=1;
			}
			switch (alt94) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:50: classParent
					{
					pushFollow(FOLLOW_classParent_in_classHelperDecl6869);
					classParent309=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent309.getTree());
					}
					break;

			}

			string_literal310=(Token)match(input,FOR,FOLLOW_FOR_in_classHelperDecl6873); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FOR.add(string_literal310);

			pushFollow(FOLLOW_typeId_in_classHelperDecl6875);
			typeId311=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeId.add(typeId311.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:77: ( classHelperItem )*
			loop95:
			while (true) {
				int alt95=2;
				int LA95_0 = input.LA(1);
				if ( (LA95_0==EOF||LA95_0==ADD||(LA95_0 >= ANSISTRING && LA95_0 <= ARRAY)||(LA95_0 >= AT && LA95_0 <= AUTOMATED)||LA95_0==BREAK||LA95_0==CLASS||(LA95_0 >= CONST && LA95_0 <= ControlString)||(LA95_0 >= DEFAULT && LA95_0 <= DESTRUCTOR)||LA95_0==DISPINTERFACE||LA95_0==EXIT||LA95_0==EXPORT||LA95_0==FALSE||(LA95_0 >= FILE && LA95_0 <= FINAL)||LA95_0==FUNCTION||LA95_0==HELPER||LA95_0==IMPLEMENTS||(LA95_0 >= INDEX && LA95_0 <= INHERITED)||LA95_0==INTERFACE||LA95_0==LBRACK||(LA95_0 >= LOCAL && LA95_0 <= LPAREN)||(LA95_0 >= MESSAGE && LA95_0 <= MINUS)||LA95_0==NAME||LA95_0==NIL||LA95_0==NOT||LA95_0==OBJECT||LA95_0==OPERATOR||LA95_0==OUT||(LA95_0 >= PACKAGE && LA95_0 <= PACKED)||(LA95_0 >= PLUS && LA95_0 <= PROCEDURE)||(LA95_0 >= PROPERTY && LA95_0 <= QuotedString)||(LA95_0 >= READ && LA95_0 <= REGISTER)||LA95_0==REMOVE||LA95_0==SET||(LA95_0 >= STORED && LA95_0 <= STRING)||LA95_0==THREADVAR||LA95_0==TRUE||LA95_0==TYPE||LA95_0==TkAsmHexNum||(LA95_0 >= TkHexNum && LA95_0 <= TkIntNum)||LA95_0==TkRealNum||LA95_0==VAR||LA95_0==VARIANT||LA95_0==WRITE||LA95_0==199) ) {
					alt95=1;
				}

				switch (alt95) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:78: classHelperItem
					{
					pushFollow(FOLLOW_classHelperItem_in_classHelperDecl6878);
					classHelperItem312=classHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classHelperItem.add(classHelperItem312.getTree());
					}
					break;

				default :
					break loop95;
				}
			}

			string_literal313=(Token)match(input,END,FOLLOW_END_in_classHelperDecl6882); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal313);

			// AST REWRITE
			// elements: classHelperItem, typeId, CLASS
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 300:102: -> ^( 'class' typeId ) ( classHelperItem )*
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:105: ^( 'class' typeId )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);
				adaptor.addChild(root_1, stream_typeId.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:300:124: ( classHelperItem )*
				while ( stream_classHelperItem.hasNext() ) {
					adaptor.addChild(root_0, stream_classHelperItem.nextTree());
				}
				stream_classHelperItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 75, classHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperDecl"


	public static class classHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classHelperItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:1: classHelperItem : ( visibility | classMethod | classProperty | ( 'class' )? varSection );
	public final DelphiParser.classHelperItem_return classHelperItem() throws RecognitionException {
		DelphiParser.classHelperItem_return retval = new DelphiParser.classHelperItem_return();
		retval.start = input.LT(1);
		int classHelperItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal317=null;
		ParserRuleReturnScope visibility314 =null;
		ParserRuleReturnScope classMethod315 =null;
		ParserRuleReturnScope classProperty316 =null;
		ParserRuleReturnScope varSection318 =null;

		Object string_literal317_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:30: ( visibility | classMethod | classProperty | ( 'class' )? varSection )
			int alt97=4;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt97=1;
				}
				break;
			case LBRACK:
				{
				int LA97_7 = input.LA(2);
				if ( (synpred137_Delphi()) ) {
					alt97=2;
				}
				else if ( (synpred138_Delphi()) ) {
					alt97=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 97, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA97_8 = input.LA(2);
				if ( (synpred137_Delphi()) ) {
					alt97=2;
				}
				else if ( (synpred138_Delphi()) ) {
					alt97=3;
				}
				else if ( (true) ) {
					alt97=4;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt97=2;
				}
				break;
			case PROPERTY:
				{
				alt97=3;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt97=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 97, 0, input);
				throw nvae;
			}
			switch (alt97) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:302:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_classHelperItem6947);
					visibility314=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility314.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_classHelperItem6980);
					classMethod315=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod315.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_classHelperItem7013);
					classProperty316=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty316.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:32: ( 'class' )?
					int alt96=2;
					int LA96_0 = input.LA(1);
					if ( (LA96_0==CLASS) ) {
						alt96=1;
					}
					switch (alt96) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:305:33: 'class'
							{
							string_literal317=(Token)match(input,CLASS,FOLLOW_CLASS_in_classHelperItem7047); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal317_tree = (Object)adaptor.create(string_literal317);
							adaptor.addChild(root_0, string_literal317_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_classHelperItem7051);
					varSection318=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection318.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 76, classHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classHelperItem"


	public static class interfaceTypeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceTypeDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:1: interfaceTypeDecl : ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) );
	public final DelphiParser.interfaceTypeDecl_return interfaceTypeDecl() throws RecognitionException {
		DelphiParser.interfaceTypeDecl_return retval = new DelphiParser.interfaceTypeDecl_return();
		retval.start = input.LT(1);
		int interfaceTypeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal323=null;
		ParserRuleReturnScope interfaceKey319 =null;
		ParserRuleReturnScope classParent320 =null;
		ParserRuleReturnScope interfaceGuid321 =null;
		ParserRuleReturnScope interfaceItem322 =null;
		ParserRuleReturnScope interfaceKey324 =null;
		ParserRuleReturnScope classParent325 =null;

		Object string_literal323_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_interfaceItem=new RewriteRuleSubtreeStream(adaptor,"rule interfaceItem");
		RewriteRuleSubtreeStream stream_interfaceKey=new RewriteRuleSubtreeStream(adaptor,"rule interfaceKey");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");
		RewriteRuleSubtreeStream stream_interfaceGuid=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGuid");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:30: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )* | interfaceKey ( classParent )? -> interfaceKey ^( TkClassParents ( classParent )? ) )
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==DISPINTERFACE||LA102_0==INTERFACE) ) {
				int LA102_1 = input.LA(2);
				if ( (synpred143_Delphi()) ) {
					alt102=1;
				}
				else if ( (true) ) {
					alt102=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				throw nvae;
			}

			switch (alt102) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7099);
					interfaceKey319=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey319.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:45: ( classParent )?
					int alt98=2;
					int LA98_0 = input.LA(1);
					if ( (LA98_0==LPAREN) ) {
						alt98=1;
					}
					switch (alt98) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7102);
							classParent320=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent320.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:60: ( interfaceGuid )?
					int alt99=2;
					int LA99_0 = input.LA(1);
					if ( (LA99_0==LBRACK) ) {
						int LA99_1 = input.LA(2);
						if ( (LA99_1==QuotedString) ) {
							alt99=1;
						}
					}
					switch (alt99) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:61: interfaceGuid
							{
							pushFollow(FOLLOW_interfaceGuid_in_interfaceTypeDecl7107);
							interfaceGuid321=interfaceGuid();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceGuid.add(interfaceGuid321.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:77: ( interfaceItem )*
					loop100:
					while (true) {
						int alt100=2;
						int LA100_0 = input.LA(1);
						if ( (LA100_0==EOF||LA100_0==ADD||(LA100_0 >= ANSISTRING && LA100_0 <= ARRAY)||(LA100_0 >= AT && LA100_0 <= AT2)||LA100_0==BREAK||LA100_0==CLASS||(LA100_0 >= CONST && LA100_0 <= ControlString)||(LA100_0 >= DEFAULT && LA100_0 <= DESTRUCTOR)||LA100_0==DISPINTERFACE||LA100_0==EXIT||LA100_0==EXPORT||LA100_0==FALSE||(LA100_0 >= FILE && LA100_0 <= FINAL)||LA100_0==FUNCTION||LA100_0==HELPER||LA100_0==IMPLEMENTS||(LA100_0 >= INDEX && LA100_0 <= INHERITED)||LA100_0==INTERFACE||LA100_0==LBRACK||(LA100_0 >= LOCAL && LA100_0 <= LPAREN)||(LA100_0 >= MESSAGE && LA100_0 <= MINUS)||LA100_0==NAME||LA100_0==NIL||LA100_0==NOT||LA100_0==OBJECT||LA100_0==OPERATOR||LA100_0==OUT||(LA100_0 >= PACKAGE && LA100_0 <= PACKED)||(LA100_0 >= PLUS && LA100_0 <= POINTER2)||LA100_0==PROCEDURE||LA100_0==PROPERTY||LA100_0==QuotedString||(LA100_0 >= READ && LA100_0 <= REGISTER)||LA100_0==REMOVE||LA100_0==SET||(LA100_0 >= STORED && LA100_0 <= STRING)||LA100_0==TRUE||LA100_0==TYPE||LA100_0==TkAsmHexNum||(LA100_0 >= TkHexNum && LA100_0 <= TkIntNum)||LA100_0==TkRealNum||LA100_0==VAR||LA100_0==VARIANT||LA100_0==WRITE||LA100_0==199) ) {
							alt100=1;
						}

						switch (alt100) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:78: interfaceItem
							{
							pushFollow(FOLLOW_interfaceItem_in_interfaceTypeDecl7112);
							interfaceItem322=interfaceItem();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_interfaceItem.add(interfaceItem322.getTree());
							}
							break;

						default :
							break loop100;
						}
					}

					string_literal323=(Token)match(input,END,FOLLOW_END_in_interfaceTypeDecl7116); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_END.add(string_literal323);

					// AST REWRITE
					// elements: interfaceKey, interfaceGuid, classParent, interfaceItem
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 308:31: -> interfaceKey ^( TkClassParents ( classParent )? ) ^( TkGuid ( interfaceGuid )? ) ( interfaceItem )*
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:308:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:308:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:308:81: ^( TkGuid ( interfaceGuid )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkGuid, "TkGuid"), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:308:90: ( interfaceGuid )?
						if ( stream_interfaceGuid.hasNext() ) {
							adaptor.addChild(root_1, stream_interfaceGuid.nextTree());
						}
						stream_interfaceGuid.reset();

						adaptor.addChild(root_0, root_1);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:308:108: ( interfaceItem )*
						while ( stream_interfaceItem.hasNext() ) {
							adaptor.addChild(root_0, stream_interfaceItem.nextTree());
						}
						stream_interfaceItem.reset();

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:32: interfaceKey ( classParent )?
					{
					pushFollow(FOLLOW_interfaceKey_in_interfaceTypeDecl7207);
					interfaceKey324=interfaceKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_interfaceKey.add(interfaceKey324.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:45: ( classParent )?
					int alt101=2;
					alt101 = dfa101.predict(input);
					switch (alt101) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:46: classParent
							{
							pushFollow(FOLLOW_classParent_in_interfaceTypeDecl7210);
							classParent325=classParent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_classParent.add(classParent325.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: interfaceKey, classParent
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 310:31: -> interfaceKey ^( TkClassParents ( classParent )? )
					{
						adaptor.addChild(root_0, stream_interfaceKey.nextTree());
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:47: ^( TkClassParents ( classParent )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassParents, "TkClassParents"), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:310:64: ( classParent )?
						if ( stream_classParent.hasNext() ) {
							adaptor.addChild(root_1, stream_classParent.nextTree());
						}
						stream_classParent.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 77, interfaceTypeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceTypeDecl"


	public static class interfaceKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceKey"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:1: interfaceKey : ( 'interface' | 'dispinterface' );
	public final DelphiParser.interfaceKey_return interfaceKey() throws RecognitionException {
		DelphiParser.interfaceKey_return retval = new DelphiParser.interfaceKey_return();
		retval.start = input.LT(1);
		int interfaceKey_StartIndex = input.index();

		Object root_0 = null;

		Token set326=null;

		Object set326_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:312:30: ( 'interface' | 'dispinterface' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set326=input.LT(1);
			if ( input.LA(1)==DISPINTERFACE||input.LA(1)==INTERFACE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set326));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 78, interfaceKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceKey"


	public static class interfaceGuid_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceGuid"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:1: interfaceGuid : '[' QuotedString ']' -> QuotedString ;
	public final DelphiParser.interfaceGuid_return interfaceGuid() throws RecognitionException {
		DelphiParser.interfaceGuid_return retval = new DelphiParser.interfaceGuid_return();
		retval.start = input.LT(1);
		int interfaceGuid_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal327=null;
		Token QuotedString328=null;
		Token char_literal329=null;

		Object char_literal327_tree=null;
		Object QuotedString328_tree=null;
		Object char_literal329_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_QuotedString=new RewriteRuleTokenStream(adaptor,"token QuotedString");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:30: ( '[' QuotedString ']' -> QuotedString )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:315:32: '[' QuotedString ']'
			{
			char_literal327=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_interfaceGuid7393); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal327);

			QuotedString328=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_interfaceGuid7395); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_QuotedString.add(QuotedString328);

			char_literal329=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_interfaceGuid7397); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal329);

			// AST REWRITE
			// elements: QuotedString
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 315:53: -> QuotedString
			{
				adaptor.addChild(root_0, stream_QuotedString.nextNode());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 79, interfaceGuid_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceGuid"


	public static class interfaceItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interfaceItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:1: interfaceItem : ( classMethod | ( 'class' )? classProperty );
	public final DelphiParser.interfaceItem_return interfaceItem() throws RecognitionException {
		DelphiParser.interfaceItem_return retval = new DelphiParser.interfaceItem_return();
		retval.start = input.LT(1);
		int interfaceItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal331=null;
		ParserRuleReturnScope classMethod330 =null;
		ParserRuleReturnScope classProperty332 =null;

		Object string_literal331_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:30: ( classMethod | ( 'class' )? classProperty )
			int alt104=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA104_1 = input.LA(2);
				if ( (synpred146_Delphi()) ) {
					alt104=1;
				}
				else if ( (true) ) {
					alt104=2;
				}

				}
				break;
			case CLASS:
				{
				int LA104_2 = input.LA(2);
				if ( (synpred146_Delphi()) ) {
					alt104=1;
				}
				else if ( (true) ) {
					alt104=2;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt104=1;
				}
				break;
			case PROPERTY:
				{
				alt104=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				throw nvae;
			}
			switch (alt104) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_interfaceItem7453);
					classMethod330=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod330.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:32: ( 'class' )? classProperty
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:32: ( 'class' )?
					int alt103=2;
					int LA103_0 = input.LA(1);
					if ( (LA103_0==CLASS) ) {
						int LA103_1 = input.LA(2);
						if ( (synpred147_Delphi()) ) {
							alt103=1;
						}
					}
					switch (alt103) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:33: 'class'
							{
							string_literal331=(Token)match(input,CLASS,FOLLOW_CLASS_in_interfaceItem7487); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal331_tree = (Object)adaptor.create(string_literal331);
							adaptor.addChild(root_0, string_literal331_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_classProperty_in_interfaceItem7491);
					classProperty332=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty332.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 80, interfaceItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "interfaceItem"


	public static class objectDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:1: objectDecl : 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* ;
	public final DelphiParser.objectDecl_return objectDecl() throws RecognitionException {
		DelphiParser.objectDecl_return retval = new DelphiParser.objectDecl_return();
		retval.start = input.LT(1);
		int objectDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal333=null;
		Token string_literal336=null;
		ParserRuleReturnScope classParent334 =null;
		ParserRuleReturnScope objectItem335 =null;

		Object string_literal333_tree=null;
		Object string_literal336_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_OBJECT=new RewriteRuleTokenStream(adaptor,"token OBJECT");
		RewriteRuleSubtreeStream stream_objectItem=new RewriteRuleSubtreeStream(adaptor,"rule objectItem");
		RewriteRuleSubtreeStream stream_classParent=new RewriteRuleSubtreeStream(adaptor,"rule classParent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:30: ( 'object' ( classParent )? ( objectItem )* 'end' -> 'object' ( classParent )? ( objectItem )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:32: 'object' ( classParent )? ( objectItem )* 'end'
			{
			string_literal333=(Token)match(input,OBJECT,FOLLOW_OBJECT_in_objectDecl7546); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_OBJECT.add(string_literal333);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:41: ( classParent )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==LPAREN) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:42: classParent
					{
					pushFollow(FOLLOW_classParent_in_objectDecl7549);
					classParent334=classParent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classParent.add(classParent334.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:56: ( objectItem )*
			loop106:
			while (true) {
				int alt106=2;
				int LA106_0 = input.LA(1);
				if ( (LA106_0==EOF||LA106_0==ADD||(LA106_0 >= ANSISTRING && LA106_0 <= ARRAY)||(LA106_0 >= AT && LA106_0 <= AUTOMATED)||LA106_0==BREAK||LA106_0==CLASS||(LA106_0 >= CONST && LA106_0 <= ControlString)||(LA106_0 >= DEFAULT && LA106_0 <= DESTRUCTOR)||LA106_0==DISPINTERFACE||LA106_0==EXIT||LA106_0==EXPORT||LA106_0==FALSE||(LA106_0 >= FILE && LA106_0 <= FINAL)||LA106_0==FUNCTION||LA106_0==HELPER||LA106_0==IMPLEMENTS||(LA106_0 >= INDEX && LA106_0 <= INHERITED)||LA106_0==INTERFACE||LA106_0==LBRACK||(LA106_0 >= LOCAL && LA106_0 <= LPAREN)||(LA106_0 >= MESSAGE && LA106_0 <= MINUS)||LA106_0==NAME||LA106_0==NIL||LA106_0==NOT||LA106_0==OBJECT||LA106_0==OPERATOR||LA106_0==OUT||(LA106_0 >= PACKAGE && LA106_0 <= PACKED)||(LA106_0 >= PLUS && LA106_0 <= PROCEDURE)||(LA106_0 >= PROPERTY && LA106_0 <= QuotedString)||(LA106_0 >= READ && LA106_0 <= REGISTER)||LA106_0==REMOVE||LA106_0==SET||(LA106_0 >= STORED && LA106_0 <= STRING)||LA106_0==TRUE||LA106_0==TYPE||LA106_0==TkAsmHexNum||(LA106_0 >= TkHexNum && LA106_0 <= TkIntNum)||LA106_0==TkRealNum||LA106_0==VAR||LA106_0==VARIANT||LA106_0==WRITE||LA106_0==199) ) {
					alt106=1;
				}

				switch (alt106) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:57: objectItem
					{
					pushFollow(FOLLOW_objectItem_in_objectDecl7554);
					objectItem335=objectItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_objectItem.add(objectItem335.getTree());
					}
					break;

				default :
					break loop106;
				}
			}

			string_literal336=(Token)match(input,END,FOLLOW_END_in_objectDecl7558); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal336);

			// AST REWRITE
			// elements: objectItem, OBJECT, classParent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 320:76: -> 'object' ( classParent )? ( objectItem )*
			{
				adaptor.addChild(root_0, stream_OBJECT.nextNode());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:88: ( classParent )?
				if ( stream_classParent.hasNext() ) {
					adaptor.addChild(root_0, stream_classParent.nextTree());
				}
				stream_classParent.reset();

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:320:103: ( objectItem )*
				while ( stream_objectItem.hasNext() ) {
					adaptor.addChild(root_0, stream_objectItem.nextTree());
				}
				stream_objectItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 81, objectDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectDecl"


	public static class objectItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "objectItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:1: objectItem : ( visibility | classMethod | classField );
	public final DelphiParser.objectItem_return objectItem() throws RecognitionException {
		DelphiParser.objectItem_return retval = new DelphiParser.objectItem_return();
		retval.start = input.LT(1);
		int objectItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility337 =null;
		ParserRuleReturnScope classMethod338 =null;
		ParserRuleReturnScope classField339 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:30: ( visibility | classMethod | classField )
			int alt107=3;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA107_1 = input.LA(2);
				if ( (synpred150_Delphi()) ) {
					alt107=1;
				}
				else if ( (true) ) {
					alt107=3;
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt107=1;
				}
				break;
			case LBRACK:
				{
				int LA107_7 = input.LA(2);
				if ( (synpred151_Delphi()) ) {
					alt107=2;
				}
				else if ( (true) ) {
					alt107=3;
				}

				}
				break;
			case CLASS:
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt107=2;
				}
				break;
			case OPERATOR:
				{
				int LA107_11 = input.LA(2);
				if ( (synpred151_Delphi()) ) {
					alt107=2;
				}
				else if ( (true) ) {
					alt107=3;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRING:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 199:
				{
				alt107=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}
			switch (alt107) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_objectItem7627);
					visibility337=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility337.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_objectItem7660);
					classMethod338=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod338.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:324:32: classField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classField_in_objectItem7693);
					classField339=classField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classField339.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 82, objectItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "objectItem"


	public static class recordDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:1: recordDecl : ( simpleRecord | variantRecord );
	public final DelphiParser.recordDecl_return recordDecl() throws RecognitionException {
		DelphiParser.recordDecl_return retval = new DelphiParser.recordDecl_return();
		retval.start = input.LT(1);
		int recordDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope simpleRecord340 =null;
		ParserRuleReturnScope variantRecord341 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:30: ( simpleRecord | variantRecord )
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==RECORD) ) {
				int LA108_1 = input.LA(2);
				if ( (synpred152_Delphi()) ) {
					alt108=1;
				}
				else if ( (true) ) {
					alt108=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 108, 0, input);
				throw nvae;
			}

			switch (alt108) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:32: simpleRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleRecord_in_recordDecl7748);
					simpleRecord340=simpleRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleRecord340.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:327:32: variantRecord
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variantRecord_in_recordDecl7781);
					variantRecord341=variantRecord();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantRecord341.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 83, recordDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordDecl"


	public static class simpleRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleRecord"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:1: simpleRecord : 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* ;
	public final DelphiParser.simpleRecord_return simpleRecord() throws RecognitionException {
		DelphiParser.simpleRecord_return retval = new DelphiParser.simpleRecord_return();
		retval.start = input.LT(1);
		int simpleRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal342=null;
		Token string_literal345=null;
		ParserRuleReturnScope recordField343 =null;
		ParserRuleReturnScope recordItem344 =null;

		Object string_literal342_tree=null;
		Object string_literal345_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");
		RewriteRuleSubtreeStream stream_recordItem=new RewriteRuleSubtreeStream(adaptor,"rule recordItem");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:30: ( 'record' ( recordField )* ( recordItem )* 'end' -> 'record' ( recordField )* ( recordItem )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:32: 'record' ( recordField )* ( recordItem )* 'end'
			{
			string_literal342=(Token)match(input,RECORD,FOLLOW_RECORD_in_simpleRecord7834); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal342);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:41: ( recordField )*
			loop109:
			while (true) {
				int alt109=2;
				switch ( input.LA(1) ) {
				case STRICT:
					{
					int LA109_1 = input.LA(2);
					if ( (synpred153_Delphi()) ) {
						alt109=1;
					}

					}
					break;
				case OPERATOR:
					{
					int LA109_11 = input.LA(2);
					if ( (synpred153_Delphi()) ) {
						alt109=1;
					}

					}
					break;
				case TkIdentifier:
					{
					int LA109_15 = input.LA(2);
					if ( (synpred153_Delphi()) ) {
						alt109=1;
					}

					}
					break;
				case 199:
					{
					int LA109_16 = input.LA(2);
					if ( (synpred153_Delphi()) ) {
						alt109=1;
					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA109_17 = input.LA(2);
					if ( (synpred153_Delphi()) ) {
						alt109=1;
					}

					}
					break;
				}
				switch (alt109) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_simpleRecord7837);
					recordField343=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField343.getTree());
					}
					break;

				default :
					break loop109;
				}
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:56: ( recordItem )*
			loop110:
			while (true) {
				int alt110=2;
				int LA110_0 = input.LA(1);
				if ( (LA110_0==EOF||LA110_0==ADD||(LA110_0 >= ANSISTRING && LA110_0 <= ARRAY)||(LA110_0 >= AT && LA110_0 <= AUTOMATED)||LA110_0==BREAK||LA110_0==CLASS||(LA110_0 >= CONST && LA110_0 <= ControlString)||(LA110_0 >= DEFAULT && LA110_0 <= DESTRUCTOR)||LA110_0==DISPINTERFACE||LA110_0==EXIT||LA110_0==EXPORT||LA110_0==FALSE||(LA110_0 >= FILE && LA110_0 <= FINAL)||LA110_0==FUNCTION||LA110_0==HELPER||LA110_0==IMPLEMENTS||(LA110_0 >= INDEX && LA110_0 <= INHERITED)||LA110_0==INTERFACE||LA110_0==LBRACK||(LA110_0 >= LOCAL && LA110_0 <= LPAREN)||(LA110_0 >= MESSAGE && LA110_0 <= MINUS)||LA110_0==NAME||LA110_0==NIL||LA110_0==NOT||LA110_0==OBJECT||LA110_0==OPERATOR||LA110_0==OUT||(LA110_0 >= PACKAGE && LA110_0 <= PACKED)||(LA110_0 >= PLUS && LA110_0 <= PROCEDURE)||(LA110_0 >= PROPERTY && LA110_0 <= QuotedString)||(LA110_0 >= READ && LA110_0 <= REGISTER)||LA110_0==REMOVE||LA110_0==RESOURCESTRING||LA110_0==SET||(LA110_0 >= STORED && LA110_0 <= STRING)||LA110_0==THREADVAR||LA110_0==TRUE||LA110_0==TYPE||LA110_0==TkAsmHexNum||(LA110_0 >= TkHexNum && LA110_0 <= TkIntNum)||LA110_0==TkRealNum||LA110_0==VAR||LA110_0==VARIANT||LA110_0==WRITE||LA110_0==199) ) {
					alt110=1;
				}

				switch (alt110) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:57: recordItem
					{
					pushFollow(FOLLOW_recordItem_in_simpleRecord7842);
					recordItem344=recordItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordItem.add(recordItem344.getTree());
					}
					break;

				default :
					break loop110;
				}
			}

			string_literal345=(Token)match(input,END,FOLLOW_END_in_simpleRecord7846); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal345);

			// AST REWRITE
			// elements: RECORD, recordField, recordItem
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 329:76: -> 'record' ( recordField )* ( recordItem )*
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:88: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:103: ( recordItem )*
				while ( stream_recordItem.hasNext() ) {
					adaptor.addChild(root_0, stream_recordItem.nextTree());
				}
				stream_recordItem.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 84, simpleRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleRecord"


	public static class variantRecord_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variantRecord"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:1: variantRecord : 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection ;
	public final DelphiParser.variantRecord_return variantRecord() throws RecognitionException {
		DelphiParser.variantRecord_return retval = new DelphiParser.variantRecord_return();
		retval.start = input.LT(1);
		int variantRecord_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal346=null;
		Token string_literal349=null;
		ParserRuleReturnScope recordField347 =null;
		ParserRuleReturnScope recordVariantSection348 =null;

		Object string_literal346_tree=null;
		Object string_literal349_tree=null;
		RewriteRuleTokenStream stream_RECORD=new RewriteRuleTokenStream(adaptor,"token RECORD");
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleSubtreeStream stream_recordVariantSection=new RewriteRuleSubtreeStream(adaptor,"rule recordVariantSection");
		RewriteRuleSubtreeStream stream_recordField=new RewriteRuleSubtreeStream(adaptor,"rule recordField");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:30: ( 'record' ( recordField )* recordVariantSection 'end' -> 'record' ( recordField )* recordVariantSection )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:32: 'record' ( recordField )* recordVariantSection 'end'
			{
			string_literal346=(Token)match(input,RECORD,FOLLOW_RECORD_in_variantRecord7912); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RECORD.add(string_literal346);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:41: ( recordField )*
			loop111:
			while (true) {
				int alt111=2;
				int LA111_0 = input.LA(1);
				if ( (LA111_0==ADD||LA111_0==ANSISTRING||LA111_0==AT||LA111_0==BREAK||(LA111_0 >= CONTAINS && LA111_0 <= CONTINUE)||(LA111_0 >= DEFAULT && LA111_0 <= DEPRECATED)||LA111_0==EXIT||LA111_0==EXPORT||LA111_0==FINAL||LA111_0==HELPER||LA111_0==IMPLEMENTS||LA111_0==INDEX||LA111_0==LOCAL||LA111_0==MESSAGE||LA111_0==NAME||LA111_0==OBJECT||LA111_0==OPERATOR||LA111_0==OUT||LA111_0==PACKAGE||LA111_0==POINTER||(LA111_0 >= READ && LA111_0 <= READONLY)||(LA111_0 >= REFERENCE && LA111_0 <= REGISTER)||LA111_0==REMOVE||(LA111_0 >= STORED && LA111_0 <= STRING)||LA111_0==TkIdentifier||LA111_0==VARIANT||LA111_0==WRITE||LA111_0==199) ) {
					alt111=1;
				}

				switch (alt111) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:42: recordField
					{
					pushFollow(FOLLOW_recordField_in_variantRecord7915);
					recordField347=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_recordField.add(recordField347.getTree());
					}
					break;

				default :
					break loop111;
				}
			}

			pushFollow(FOLLOW_recordVariantSection_in_variantRecord7919);
			recordVariantSection348=recordVariantSection();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_recordVariantSection.add(recordVariantSection348.getTree());
			string_literal349=(Token)match(input,END,FOLLOW_END_in_variantRecord7921); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal349);

			// AST REWRITE
			// elements: recordField, RECORD, recordVariantSection
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 331:83: -> 'record' ( recordField )* recordVariantSection
			{
				adaptor.addChild(root_0, stream_RECORD.nextNode());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:331:95: ( recordField )*
				while ( stream_recordField.hasNext() ) {
					adaptor.addChild(root_0, stream_recordField.nextTree());
				}
				stream_recordField.reset();

				adaptor.addChild(root_0, stream_recordVariantSection.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 85, variantRecord_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "variantRecord"


	public static class recordItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:1: recordItem : ( visibility | classMethod | classProperty | constSection | innerTypeSection | recordField | ( 'class' )? varSection );
	public final DelphiParser.recordItem_return recordItem() throws RecognitionException {
		DelphiParser.recordItem_return retval = new DelphiParser.recordItem_return();
		retval.start = input.LT(1);
		int recordItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal356=null;
		ParserRuleReturnScope visibility350 =null;
		ParserRuleReturnScope classMethod351 =null;
		ParserRuleReturnScope classProperty352 =null;
		ParserRuleReturnScope constSection353 =null;
		ParserRuleReturnScope innerTypeSection354 =null;
		ParserRuleReturnScope recordField355 =null;
		ParserRuleReturnScope varSection357 =null;

		Object string_literal356_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:30: ( visibility | classMethod | classProperty | constSection | innerTypeSection | recordField | ( 'class' )? varSection )
			int alt113=7;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA113_1 = input.LA(2);
				if ( (synpred156_Delphi()) ) {
					alt113=1;
				}
				else if ( (synpred161_Delphi()) ) {
					alt113=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
				{
				alt113=1;
				}
				break;
			case LBRACK:
				{
				int LA113_7 = input.LA(2);
				if ( (synpred157_Delphi()) ) {
					alt113=2;
				}
				else if ( (synpred158_Delphi()) ) {
					alt113=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLASS:
				{
				int LA113_8 = input.LA(2);
				if ( (synpred157_Delphi()) ) {
					alt113=2;
				}
				else if ( (synpred158_Delphi()) ) {
					alt113=3;
				}
				else if ( (true) ) {
					alt113=7;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case PROCEDURE:
				{
				alt113=2;
				}
				break;
			case OPERATOR:
				{
				int LA113_11 = input.LA(2);
				if ( (synpred157_Delphi()) ) {
					alt113=2;
				}
				else if ( (synpred161_Delphi()) ) {
					alt113=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROPERTY:
				{
				alt113=3;
				}
				break;
			case CONST:
			case RESOURCESTRING:
				{
				alt113=4;
				}
				break;
			case TYPE:
				{
				alt113=5;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRING:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 199:
				{
				alt113=6;
				}
				break;
			case THREADVAR:
			case VAR:
				{
				alt113=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				throw nvae;
			}
			switch (alt113) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordItem7987);
					visibility350=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility350.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordItem8025);
					classMethod351=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod351.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordItem8058);
					classProperty352=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty352.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:336:32: constSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constSection_in_recordItem8091);
					constSection353=constSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constSection353.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:337:32: innerTypeSection
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_innerTypeSection_in_recordItem8124);
					innerTypeSection354=innerTypeSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, innerTypeSection354.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:32: recordField
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_recordField_in_recordItem8157);
					recordField355=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordField355.getTree());

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:32: ( 'class' )? varSection
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:32: ( 'class' )?
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==CLASS) ) {
						alt112=1;
					}
					switch (alt112) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:339:33: 'class'
							{
							string_literal356=(Token)match(input,CLASS,FOLLOW_CLASS_in_recordItem8191); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal356_tree = (Object)adaptor.create(string_literal356);
							adaptor.addChild(root_0, string_literal356_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_varSection_in_recordItem8195);
					varSection357=varSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, varSection357.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 86, recordItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordItem"


	public static class recordField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordField"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:1: recordField : identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) ;
	public final DelphiParser.recordField_return recordField() throws RecognitionException {
		DelphiParser.recordField_return retval = new DelphiParser.recordField_return();
		retval.start = input.LT(1);
		int recordField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal359=null;
		Token char_literal362=null;
		ParserRuleReturnScope identList358 =null;
		ParserRuleReturnScope typeDecl360 =null;
		ParserRuleReturnScope hintingDirective361 =null;

		Object char_literal359_tree=null;
		Object char_literal362_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:30: ( identList ':' typeDecl ( hintingDirective )* ( ';' )? -> identList ^( TkVariableType typeDecl ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:32: identList ':' typeDecl ( hintingDirective )* ( ';' )?
			{
			pushFollow(FOLLOW_identList_in_recordField8249);
			identList358=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList358.getTree());
			char_literal359=(Token)match(input,COLON,FOLLOW_COLON_in_recordField8251); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal359);

			pushFollow(FOLLOW_typeDecl_in_recordField8253);
			typeDecl360=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl360.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:55: ( hintingDirective )*
			loop114:
			while (true) {
				int alt114=2;
				int LA114_0 = input.LA(1);
				if ( (LA114_0==DEPRECATED) ) {
					int LA114_2 = input.LA(2);
					if ( (LA114_2==EOF||LA114_2==ADD||LA114_2==ANSISTRING||LA114_2==AT||LA114_2==AUTOMATED||(LA114_2 >= BREAK && LA114_2 <= CASE)||LA114_2==CLASS||(LA114_2 >= CONST && LA114_2 <= ControlString)||(LA114_2 >= DEFAULT && LA114_2 <= DESTRUCTOR)||LA114_2==END||(LA114_2 >= EXIT && LA114_2 <= EXPORT)||LA114_2==FINAL||LA114_2==FUNCTION||LA114_2==HELPER||LA114_2==IMPLEMENTS||LA114_2==INDEX||LA114_2==LBRACK||(LA114_2 >= LIBRARY && LA114_2 <= LOCAL)||LA114_2==MESSAGE||LA114_2==NAME||LA114_2==OBJECT||LA114_2==OPERATOR||LA114_2==OUT||LA114_2==PACKAGE||LA114_2==PLATFORM||LA114_2==POINTER||(LA114_2 >= PRIVATE && LA114_2 <= PROCEDURE)||(LA114_2 >= PROPERTY && LA114_2 <= QuotedString)||(LA114_2 >= READ && LA114_2 <= READONLY)||(LA114_2 >= REFERENCE && LA114_2 <= REGISTER)||LA114_2==REMOVE||(LA114_2 >= RESOURCESTRING && LA114_2 <= RPAREN)||LA114_2==SEMI||(LA114_2 >= STORED && LA114_2 <= STRING)||LA114_2==THREADVAR||LA114_2==TYPE||LA114_2==TkIdentifier||LA114_2==VAR||LA114_2==VARIANT||LA114_2==WRITE||LA114_2==199) ) {
						alt114=1;
					}

				}
				else if ( (LA114_0==EXPERIMENTAL||LA114_0==LIBRARY||LA114_0==PLATFORM) ) {
					alt114=1;
				}

				switch (alt114) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:56: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_recordField8256);
					hintingDirective361=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective361.getTree());
					}
					break;

				default :
					break loop114;
				}
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:75: ( ';' )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==SEMI) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:341:76: ';'
					{
					char_literal362=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordField8261); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal362);

					}
					break;

			}

			// AST REWRITE
			// elements: typeDecl, identList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 342:30: -> identList ^( TkVariableType typeDecl )
			{
				adaptor.addChild(root_0, stream_identList.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:342:43: ^( TkVariableType typeDecl )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				adaptor.addChild(root_1, stream_typeDecl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 87, recordField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordField"


	public static class recordVariantSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariantSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:1: recordVariantSection : 'case' ( ident ':' )? qualifiedIdent 'of' ( recordVariant )+ ;
	public final DelphiParser.recordVariantSection_return recordVariantSection() throws RecognitionException {
		DelphiParser.recordVariantSection_return retval = new DelphiParser.recordVariantSection_return();
		retval.start = input.LT(1);
		int recordVariantSection_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal363=null;
		Token char_literal365=null;
		Token string_literal367=null;
		ParserRuleReturnScope ident364 =null;
		ParserRuleReturnScope qualifiedIdent366 =null;
		ParserRuleReturnScope recordVariant368 =null;

		Object string_literal363_tree=null;
		Object char_literal365_tree=null;
		Object string_literal367_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:30: ( 'case' ( ident ':' )? qualifiedIdent 'of' ( recordVariant )+ )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:32: 'case' ( ident ':' )? qualifiedIdent 'of' ( recordVariant )+
			{
			root_0 = (Object)adaptor.nil();


			string_literal363=(Token)match(input,CASE,FOLLOW_CASE_in_recordVariantSection8349); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal363_tree = (Object)adaptor.create(string_literal363);
			adaptor.addChild(root_0, string_literal363_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:39: ( ident ':' )?
			int alt116=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA116_1 = input.LA(2);
					if ( (LA116_1==COLON) ) {
						alt116=1;
					}
					}
					break;
				case 199:
					{
					int LA116_2 = input.LA(2);
					if ( (LA116_2==TkIdentifier) ) {
						int LA116_6 = input.LA(3);
						if ( (LA116_6==COLON) ) {
							alt116=1;
						}
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA116_3 = input.LA(2);
					if ( (LA116_3==COLON) ) {
						alt116=1;
					}
					}
					break;
			}
			switch (alt116) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:40: ident ':'
					{
					pushFollow(FOLLOW_ident_in_recordVariantSection8352);
					ident364=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident364.getTree());

					char_literal365=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariantSection8354); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal365_tree = (Object)adaptor.create(char_literal365);
					adaptor.addChild(root_0, char_literal365_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_qualifiedIdent_in_recordVariantSection8358);
			qualifiedIdent366=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent366.getTree());

			string_literal367=(Token)match(input,OF,FOLLOW_OF_in_recordVariantSection8360); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal367_tree = (Object)adaptor.create(string_literal367);
			adaptor.addChild(root_0, string_literal367_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:72: ( recordVariant )+
			int cnt117=0;
			loop117:
			while (true) {
				int alt117=2;
				int LA117_0 = input.LA(1);
				if ( (LA117_0==ADD||LA117_0==ANSISTRING||(LA117_0 >= AT && LA117_0 <= AT2)||LA117_0==BREAK||(LA117_0 >= CONTAINS && LA117_0 <= ControlString)||(LA117_0 >= DEFAULT && LA117_0 <= DEPRECATED)||LA117_0==EXIT||LA117_0==EXPORT||LA117_0==FALSE||(LA117_0 >= FILE && LA117_0 <= FINAL)||LA117_0==FUNCTION||LA117_0==HELPER||LA117_0==IMPLEMENTS||(LA117_0 >= INDEX && LA117_0 <= INHERITED)||LA117_0==LBRACK||(LA117_0 >= LOCAL && LA117_0 <= LPAREN)||(LA117_0 >= MESSAGE && LA117_0 <= MINUS)||LA117_0==NAME||LA117_0==NIL||LA117_0==NOT||LA117_0==OBJECT||LA117_0==OPERATOR||LA117_0==OUT||LA117_0==PACKAGE||(LA117_0 >= PLUS && LA117_0 <= POINTER)||LA117_0==PROCEDURE||LA117_0==QuotedString||(LA117_0 >= READ && LA117_0 <= READONLY)||(LA117_0 >= REFERENCE && LA117_0 <= REGISTER)||LA117_0==REMOVE||(LA117_0 >= STORED && LA117_0 <= STRING)||LA117_0==TRUE||LA117_0==TkAsmHexNum||(LA117_0 >= TkHexNum && LA117_0 <= TkIntNum)||LA117_0==TkRealNum||LA117_0==VARIANT||LA117_0==WRITE||LA117_0==199) ) {
					alt117=1;
				}

				switch (alt117) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:344:73: recordVariant
					{
					pushFollow(FOLLOW_recordVariant_in_recordVariantSection8363);
					recordVariant368=recordVariant();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariant368.getTree());

					}
					break;

				default :
					if ( cnt117 >= 1 ) break loop117;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(117, input);
					throw eee;
				}
				cnt117++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 88, recordVariantSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariantSection"


	public static class recordVariant_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordVariant"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:1: recordVariant : expressionList ':' '(' ( recordField )* ( recordVariantSection )? ')' ( ';' )? ;
	public final DelphiParser.recordVariant_return recordVariant() throws RecognitionException {
		DelphiParser.recordVariant_return retval = new DelphiParser.recordVariant_return();
		retval.start = input.LT(1);
		int recordVariant_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal370=null;
		Token char_literal371=null;
		Token char_literal374=null;
		Token char_literal375=null;
		ParserRuleReturnScope expressionList369 =null;
		ParserRuleReturnScope recordField372 =null;
		ParserRuleReturnScope recordVariantSection373 =null;

		Object char_literal370_tree=null;
		Object char_literal371_tree=null;
		Object char_literal374_tree=null;
		Object char_literal375_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:30: ( expressionList ':' '(' ( recordField )* ( recordVariantSection )? ')' ( ';' )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:32: expressionList ':' '(' ( recordField )* ( recordVariantSection )? ')' ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expressionList_in_recordVariant8417);
			expressionList369=expressionList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList369.getTree());

			char_literal370=(Token)match(input,COLON,FOLLOW_COLON_in_recordVariant8419); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal370_tree = (Object)adaptor.create(char_literal370);
			adaptor.addChild(root_0, char_literal370_tree);
			}

			char_literal371=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_recordVariant8421); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal371_tree = (Object)adaptor.create(char_literal371);
			adaptor.addChild(root_0, char_literal371_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:55: ( recordField )*
			loop118:
			while (true) {
				int alt118=2;
				int LA118_0 = input.LA(1);
				if ( (LA118_0==ADD||LA118_0==ANSISTRING||LA118_0==AT||LA118_0==BREAK||(LA118_0 >= CONTAINS && LA118_0 <= CONTINUE)||(LA118_0 >= DEFAULT && LA118_0 <= DEPRECATED)||LA118_0==EXIT||LA118_0==EXPORT||LA118_0==FINAL||LA118_0==HELPER||LA118_0==IMPLEMENTS||LA118_0==INDEX||LA118_0==LOCAL||LA118_0==MESSAGE||LA118_0==NAME||LA118_0==OBJECT||LA118_0==OPERATOR||LA118_0==OUT||LA118_0==PACKAGE||LA118_0==POINTER||(LA118_0 >= READ && LA118_0 <= READONLY)||(LA118_0 >= REFERENCE && LA118_0 <= REGISTER)||LA118_0==REMOVE||(LA118_0 >= STORED && LA118_0 <= STRING)||LA118_0==TkIdentifier||LA118_0==VARIANT||LA118_0==WRITE||LA118_0==199) ) {
					alt118=1;
				}

				switch (alt118) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:56: recordField
					{
					pushFollow(FOLLOW_recordField_in_recordVariant8424);
					recordField372=recordField();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordField372.getTree());

					}
					break;

				default :
					break loop118;
				}
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:70: ( recordVariantSection )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==CASE) ) {
				alt119=1;
			}
			switch (alt119) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:71: recordVariantSection
					{
					pushFollow(FOLLOW_recordVariantSection_in_recordVariant8429);
					recordVariantSection373=recordVariantSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordVariantSection373.getTree());

					}
					break;

			}

			char_literal374=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_recordVariant8433); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal374_tree = (Object)adaptor.create(char_literal374);
			adaptor.addChild(root_0, char_literal374_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:98: ( ';' )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==SEMI) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:346:99: ';'
					{
					char_literal375=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordVariant8436); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal375_tree = (Object)adaptor.create(char_literal375);
					adaptor.addChild(root_0, char_literal375_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 89, recordVariant_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordVariant"


	public static class recordHelperDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:1: recordHelperDecl : 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' ;
	public final DelphiParser.recordHelperDecl_return recordHelperDecl() throws RecognitionException {
		DelphiParser.recordHelperDecl_return retval = new DelphiParser.recordHelperDecl_return();
		retval.start = input.LT(1);
		int recordHelperDecl_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal376=null;
		Token string_literal377=null;
		Token string_literal378=null;
		Token string_literal381=null;
		ParserRuleReturnScope typeId379 =null;
		ParserRuleReturnScope recordHelperItem380 =null;

		Object string_literal376_tree=null;
		Object string_literal377_tree=null;
		Object string_literal378_tree=null;
		Object string_literal381_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:30: ( 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:32: 'record' 'helper' 'for' typeId ( recordHelperItem )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal376=(Token)match(input,RECORD,FOLLOW_RECORD_in_recordHelperDecl8487); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal376_tree = (Object)adaptor.create(string_literal376);
			adaptor.addChild(root_0, string_literal376_tree);
			}

			string_literal377=(Token)match(input,HELPER,FOLLOW_HELPER_in_recordHelperDecl8489); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal377_tree = (Object)adaptor.create(string_literal377);
			adaptor.addChild(root_0, string_literal377_tree);
			}

			string_literal378=(Token)match(input,FOR,FOLLOW_FOR_in_recordHelperDecl8491); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal378_tree = (Object)adaptor.create(string_literal378);
			adaptor.addChild(root_0, string_literal378_tree);
			}

			pushFollow(FOLLOW_typeId_in_recordHelperDecl8493);
			typeId379=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId379.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:63: ( recordHelperItem )*
			loop121:
			while (true) {
				int alt121=2;
				int LA121_0 = input.LA(1);
				if ( (LA121_0==EOF||LA121_0==ADD||(LA121_0 >= ANSISTRING && LA121_0 <= ARRAY)||(LA121_0 >= AT && LA121_0 <= AUTOMATED)||LA121_0==BREAK||LA121_0==CLASS||(LA121_0 >= CONST && LA121_0 <= ControlString)||(LA121_0 >= DEFAULT && LA121_0 <= DESTRUCTOR)||LA121_0==DISPINTERFACE||LA121_0==EXIT||LA121_0==EXPORT||LA121_0==FALSE||(LA121_0 >= FILE && LA121_0 <= FINAL)||LA121_0==FUNCTION||LA121_0==HELPER||LA121_0==IMPLEMENTS||(LA121_0 >= INDEX && LA121_0 <= INHERITED)||LA121_0==INTERFACE||LA121_0==LBRACK||(LA121_0 >= LOCAL && LA121_0 <= LPAREN)||(LA121_0 >= MESSAGE && LA121_0 <= MINUS)||LA121_0==NAME||LA121_0==NIL||LA121_0==NOT||LA121_0==OBJECT||LA121_0==OPERATOR||LA121_0==OUT||(LA121_0 >= PACKAGE && LA121_0 <= PACKED)||(LA121_0 >= PLUS && LA121_0 <= PROCEDURE)||(LA121_0 >= PROPERTY && LA121_0 <= QuotedString)||(LA121_0 >= READ && LA121_0 <= REGISTER)||LA121_0==REMOVE||LA121_0==SET||(LA121_0 >= STORED && LA121_0 <= STRING)||LA121_0==TRUE||LA121_0==TYPE||LA121_0==TkAsmHexNum||(LA121_0 >= TkHexNum && LA121_0 <= TkIntNum)||LA121_0==TkRealNum||LA121_0==VAR||LA121_0==VARIANT||LA121_0==WRITE||LA121_0==199) ) {
					alt121=1;
				}

				switch (alt121) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:348:64: recordHelperItem
					{
					pushFollow(FOLLOW_recordHelperItem_in_recordHelperDecl8496);
					recordHelperItem380=recordHelperItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordHelperItem380.getTree());

					}
					break;

				default :
					break loop121;
				}
			}

			string_literal381=(Token)match(input,END,FOLLOW_END_in_recordHelperDecl8500); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal381_tree = (Object)adaptor.create(string_literal381);
			adaptor.addChild(root_0, string_literal381_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 90, recordHelperDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperDecl"


	public static class recordHelperItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordHelperItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:350:1: recordHelperItem : ( visibility | classMethod | classProperty );
	public final DelphiParser.recordHelperItem_return recordHelperItem() throws RecognitionException {
		DelphiParser.recordHelperItem_return retval = new DelphiParser.recordHelperItem_return();
		retval.start = input.LT(1);
		int recordHelperItem_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope visibility382 =null;
		ParserRuleReturnScope classMethod383 =null;
		ParserRuleReturnScope classProperty384 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:350:30: ( visibility | classMethod | classProperty )
			int alt122=3;
			switch ( input.LA(1) ) {
			case AUTOMATED:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case PUBLISHED:
			case STRICT:
				{
				alt122=1;
				}
				break;
			case LBRACK:
				{
				int LA122_7 = input.LA(2);
				if ( (synpred172_Delphi()) ) {
					alt122=2;
				}
				else if ( (true) ) {
					alt122=3;
				}

				}
				break;
			case CLASS:
				{
				int LA122_8 = input.LA(2);
				if ( (synpred172_Delphi()) ) {
					alt122=2;
				}
				else if ( (true) ) {
					alt122=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case FUNCTION:
			case OPERATOR:
			case PROCEDURE:
				{
				alt122=2;
				}
				break;
			case PROPERTY:
				{
				alt122=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 122, 0, input);
				throw nvae;
			}
			switch (alt122) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:350:32: visibility
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_visibility_in_recordHelperItem8549);
					visibility382=visibility();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, visibility382.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: classMethod
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classMethod_in_recordHelperItem8582);
					classMethod383=classMethod();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classMethod383.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:352:32: classProperty
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classProperty_in_recordHelperItem8615);
					classProperty384=classProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classProperty384.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 91, recordHelperItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordHelperItem"


	public static class classMethod_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classMethod"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:1: classMethod : ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? methodDirectiveSection -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) methodDirectiveSection ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl methodDirectiveSection -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) methodDirectiveSection ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) );
	public final DelphiParser.classMethod_return classMethod() throws RecognitionException {
		DelphiParser.classMethod_return retval = new DelphiParser.classMethod_return();
		retval.start = input.LT(1);
		int classMethod_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal386=null;
		Token string_literal393=null;
		Token string_literal394=null;
		Token char_literal398=null;
		Token string_literal403=null;
		Token string_literal404=null;
		Token char_literal408=null;
		Token char_literal411=null;
		ParserRuleReturnScope customAttribute385 =null;
		ParserRuleReturnScope methodKey387 =null;
		ParserRuleReturnScope ident388 =null;
		ParserRuleReturnScope genericDefinition389 =null;
		ParserRuleReturnScope formalParameterSection390 =null;
		ParserRuleReturnScope methodDirectiveSection391 =null;
		ParserRuleReturnScope customAttribute392 =null;
		ParserRuleReturnScope ident395 =null;
		ParserRuleReturnScope genericDefinition396 =null;
		ParserRuleReturnScope formalParameterSection397 =null;
		ParserRuleReturnScope customAttribute399 =null;
		ParserRuleReturnScope typeDecl400 =null;
		ParserRuleReturnScope methodDirectiveSection401 =null;
		ParserRuleReturnScope customAttribute402 =null;
		ParserRuleReturnScope ident405 =null;
		ParserRuleReturnScope genericDefinition406 =null;
		ParserRuleReturnScope formalParameterSection407 =null;
		ParserRuleReturnScope customAttribute409 =null;
		ParserRuleReturnScope typeDecl410 =null;

		Object string_literal386_tree=null;
		Object string_literal393_tree=null;
		Object string_literal394_tree=null;
		Object char_literal398_tree=null;
		Object string_literal403_tree=null;
		Object string_literal404_tree=null;
		Object char_literal408_tree=null;
		Object char_literal411_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_genericDefinition=new RewriteRuleSubtreeStream(adaptor,"rule genericDefinition");
		RewriteRuleSubtreeStream stream_methodDirectiveSection=new RewriteRuleSubtreeStream(adaptor,"rule methodDirectiveSection");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:30: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? methodDirectiveSection -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) methodDirectiveSection ) | ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl methodDirectiveSection -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) methodDirectiveSection ) | ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';' -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl ) )
			int alt137=3;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA137_1 = input.LA(2);
				if ( (synpred177_Delphi()) ) {
					alt137=1;
				}
				else if ( (synpred183_Delphi()) ) {
					alt137=2;
				}
				else if ( (true) ) {
					alt137=3;
				}

				}
				break;
			case CLASS:
				{
				int LA137_2 = input.LA(2);
				if ( (synpred177_Delphi()) ) {
					alt137=1;
				}
				else if ( (synpred183_Delphi()) ) {
					alt137=2;
				}
				else if ( (true) ) {
					alt137=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				alt137=1;
				}
				break;
			case FUNCTION:
				{
				alt137=2;
				}
				break;
			case OPERATOR:
				{
				alt137=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 137, 0, input);
				throw nvae;
			}
			switch (alt137) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? methodDirectiveSection
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( customAttribute )?
					int alt123=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt123=1;
							}
							break;
						case CLASS:
							{
							int LA123_2 = input.LA(2);
							if ( (synpred173_Delphi()) ) {
								alt123=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA123_3 = input.LA(2);
							if ( (synpred173_Delphi()) ) {
								alt123=1;
							}
							}
							break;
					}
					switch (alt123) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8670);
							customAttribute385=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute385.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:51: ( 'class' )?
					int alt124=2;
					int LA124_0 = input.LA(1);
					if ( (LA124_0==CLASS) ) {
						alt124=1;
					}
					switch (alt124) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:52: 'class'
							{
							string_literal386=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8675); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal386);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_classMethod8679);
					methodKey387=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey387.getTree());
					pushFollow(FOLLOW_ident_in_classMethod8681);
					ident388=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident388.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:78: ( genericDefinition )?
					int alt125=2;
					int LA125_0 = input.LA(1);
					if ( (LA125_0==LT) ) {
						alt125=1;
					}
					switch (alt125) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:79: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8684);
							genericDefinition389=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition389.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:99: ( formalParameterSection )?
					int alt126=2;
					int LA126_0 = input.LA(1);
					if ( (LA126_0==LPAREN) ) {
						alt126=1;
					}
					switch (alt126) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:100: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8689);
							formalParameterSection390=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection390.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_methodDirectiveSection_in_classMethod8693);
					methodDirectiveSection391=methodDirectiveSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodDirectiveSection.add(methodDirectiveSection391.getTree());
					// AST REWRITE
					// elements: methodDirectiveSection, CLASS, genericDefinition, customAttribute, methodKey, formalParameterSection, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 355:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) methodDirectiveSection )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:34: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:53: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:64: ^( methodKey ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) methodDirectiveSection )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:355:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_methodDirectiveSection.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl methodDirectiveSection
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: ( customAttribute )?
					int alt127=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt127=1;
							}
							break;
						case CLASS:
							{
							int LA127_2 = input.LA(2);
							if ( (synpred178_Delphi()) ) {
								alt127=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA127_3 = input.LA(2);
							if ( (synpred178_Delphi()) ) {
								alt127=1;
							}
							}
							break;
					}
					switch (alt127) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8795);
							customAttribute392=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute392.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:51: ( 'class' )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==CLASS) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:52: 'class'
							{
							string_literal393=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8800); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal393);

							}
							break;

					}

					string_literal394=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMethod8804); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal394);

					pushFollow(FOLLOW_ident_in_classMethod8806);
					ident395=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident395.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:79: ( genericDefinition )?
					int alt129=2;
					int LA129_0 = input.LA(1);
					if ( (LA129_0==LT) ) {
						alt129=1;
					}
					switch (alt129) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8809);
							genericDefinition396=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition396.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:100: ( formalParameterSection )?
					int alt130=2;
					int LA130_0 = input.LA(1);
					if ( (LA130_0==LPAREN) ) {
						alt130=1;
					}
					switch (alt130) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8814);
							formalParameterSection397=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection397.getTree());
							}
							break;

					}

					char_literal398=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod8818); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal398);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:130: ( customAttribute )?
					int alt131=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA131_1 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case PACKED:
							{
							int LA131_2 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA131_3 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case SET:
							{
							int LA131_4 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FILE:
							{
							int LA131_5 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case CLASS:
							{
							int LA131_6 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA131_7 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA131_8 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case RECORD:
							{
							int LA131_9 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA131_10 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case POINTER:
							{
							int LA131_11 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case STRING:
							{
							int LA131_12 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TYPE:
							{
							int LA131_13 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA131_14 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA131_15 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA131_16 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA131_17 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA131_18 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA131_19 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA131_20 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkAsmHexNum:
							{
							int LA131_21 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ControlString:
							{
							int LA131_22 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA131_23 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA131_24 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case 199:
							{
							int LA131_25 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DEPRECATED:
						case EXIT:
						case EXPORT:
						case FINAL:
						case HELPER:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case PACKAGE:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case WRITE:
							{
							int LA131_26 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case NIL:
							{
							int LA131_27 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case TRUE:
							{
							int LA131_28 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case FALSE:
							{
							int LA131_29 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA131_30 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case AT2:
						case MINUS:
						case NOT:
						case PLUS:
							{
							int LA131_31 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA131_32 = input.LA(2);
							if ( (synpred182_Delphi()) ) {
								alt131=1;
							}
							}
							break;
					}
					switch (alt131) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8821);
							customAttribute399=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute399.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod8825);
					typeDecl400=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl400.getTree());
					pushFollow(FOLLOW_methodDirectiveSection_in_classMethod8827);
					methodDirectiveSection401=methodDirectiveSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodDirectiveSection.add(methodDirectiveSection401.getTree());
					// AST REWRITE
					// elements: typeDecl, customAttribute, CLASS, FUNCTION, formalParameterSection, methodDirectiveSection, customAttribute, genericDefinition, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 357:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) methodDirectiveSection )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:63: ^( 'function' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? ^( TkFunctionReturn typeDecl ) methodDirectiveSection )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:357:184: ^( TkFunctionReturn typeDecl )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						adaptor.addChild(root_2, stream_typeDecl.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_methodDirectiveSection.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:32: ( customAttribute )? ( 'class' )? 'operator' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl ';'
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:32: ( customAttribute )?
					int alt132=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt132=1;
							}
							break;
						case CLASS:
							{
							int LA132_2 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt132=1;
							}
							}
							break;
						case OPERATOR:
							{
							int LA132_3 = input.LA(2);
							if ( (synpred184_Delphi()) ) {
								alt132=1;
							}
							}
							break;
					}
					switch (alt132) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8939);
							customAttribute402=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute402.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:51: ( 'class' )?
					int alt133=2;
					int LA133_0 = input.LA(1);
					if ( (LA133_0==CLASS) ) {
						alt133=1;
					}
					switch (alt133) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:52: 'class'
							{
							string_literal403=(Token)match(input,CLASS,FOLLOW_CLASS_in_classMethod8944); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal403);

							}
							break;

					}

					string_literal404=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_classMethod8948); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal404);

					pushFollow(FOLLOW_ident_in_classMethod8950);
					ident405=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident405.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:79: ( genericDefinition )?
					int alt134=2;
					int LA134_0 = input.LA(1);
					if ( (LA134_0==LT) ) {
						alt134=1;
					}
					switch (alt134) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:80: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_classMethod8953);
							genericDefinition406=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_genericDefinition.add(genericDefinition406.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:100: ( formalParameterSection )?
					int alt135=2;
					int LA135_0 = input.LA(1);
					if ( (LA135_0==LPAREN) ) {
						alt135=1;
					}
					switch (alt135) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:101: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_classMethod8958);
							formalParameterSection407=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection407.getTree());
							}
							break;

					}

					char_literal408=(Token)match(input,COLON,FOLLOW_COLON_in_classMethod8962); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal408);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:130: ( customAttribute )?
					int alt136=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA136_1 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case PACKED:
							{
							int LA136_2 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA136_3 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case SET:
							{
							int LA136_4 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case FILE:
							{
							int LA136_5 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case CLASS:
							{
							int LA136_6 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA136_7 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA136_8 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case RECORD:
							{
							int LA136_9 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA136_10 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case POINTER:
							{
							int LA136_11 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case STRING:
							{
							int LA136_12 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case TYPE:
							{
							int LA136_13 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA136_14 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA136_15 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA136_16 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA136_17 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA136_18 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA136_19 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA136_20 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case TkAsmHexNum:
							{
							int LA136_21 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case ControlString:
							{
							int LA136_22 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA136_23 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA136_24 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case 199:
							{
							int LA136_25 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DEPRECATED:
						case EXIT:
						case EXPORT:
						case FINAL:
						case HELPER:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case PACKAGE:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case WRITE:
							{
							int LA136_26 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case NIL:
							{
							int LA136_27 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case TRUE:
							{
							int LA136_28 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case FALSE:
							{
							int LA136_29 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA136_30 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case AT2:
						case MINUS:
						case NOT:
						case PLUS:
							{
							int LA136_31 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA136_32 = input.LA(2);
							if ( (synpred188_Delphi()) ) {
								alt136=1;
							}
							}
							break;
					}
					switch (alt136) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:131: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_classMethod8965);
							customAttribute409=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute409.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_classMethod8969);
					typeDecl410=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl410.getTree());
					char_literal411=(Token)match(input,SEMI,FOLLOW_SEMI_in_classMethod8971); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal411);

					// AST REWRITE
					// elements: ident, customAttribute, CLASS, typeDecl, genericDefinition, formalParameterSection, customAttribute, OPERATOR
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 359:30: -> ( customAttribute )? ( 'class' )? ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:63: ^( 'operator' ^( TkFunctionName ident ) ( genericDefinition )? ^( TkFunctionArgs ( formalParameterSection )? ) ( customAttribute )? typeDecl )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:76: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:100: ( genericDefinition )?
						if ( stream_genericDefinition.hasNext() ) {
							adaptor.addChild(root_1, stream_genericDefinition.nextTree());
						}
						stream_genericDefinition.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:121: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:138: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:359:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_1, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_1, stream_typeDecl.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 92, classMethod_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classMethod"


	public static class classField_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classField"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:1: classField : ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) ;
	public final DelphiParser.classField_return classField() throws RecognitionException {
		DelphiParser.classField_return retval = new DelphiParser.classField_return();
		retval.start = input.LT(1);
		int classField_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal414=null;
		Token char_literal416=null;
		ParserRuleReturnScope customAttribute412 =null;
		ParserRuleReturnScope identList413 =null;
		ParserRuleReturnScope typeDecl415 =null;
		ParserRuleReturnScope hintingDirective417 =null;

		Object char_literal414_tree=null;
		Object char_literal416_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identList=new RewriteRuleSubtreeStream(adaptor,"rule identList");
		RewriteRuleSubtreeStream stream_hintingDirective=new RewriteRuleSubtreeStream(adaptor,"rule hintingDirective");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:30: ( ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )* -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:32: ( customAttribute )? identList ':' typeDecl ';' ( hintingDirective )*
			{
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:32: ( customAttribute )?
			int alt138=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt138=1;
					}
					break;
				case TkIdentifier:
					{
					int LA138_2 = input.LA(2);
					if ( (synpred189_Delphi()) ) {
						alt138=1;
					}
					}
					break;
				case 199:
					{
					int LA138_3 = input.LA(2);
					if ( (synpred189_Delphi()) ) {
						alt138=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA138_4 = input.LA(2);
					if ( (synpred189_Delphi()) ) {
						alt138=1;
					}
					}
					break;
			}
			switch (alt138) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classField9100);
					customAttribute412=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute412.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identList_in_classField9104);
			identList413=identList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identList.add(identList413.getTree());
			char_literal414=(Token)match(input,COLON,FOLLOW_COLON_in_classField9106); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(char_literal414);

			pushFollow(FOLLOW_typeDecl_in_classField9108);
			typeDecl415=typeDecl();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl415.getTree());
			char_literal416=(Token)match(input,SEMI,FOLLOW_SEMI_in_classField9110); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal416);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:78: ( hintingDirective )*
			loop139:
			while (true) {
				int alt139=2;
				int LA139_0 = input.LA(1);
				if ( (LA139_0==DEPRECATED) ) {
					int LA139_2 = input.LA(2);
					if ( (LA139_2==EOF||LA139_2==ADD||LA139_2==ANSISTRING||LA139_2==AT||LA139_2==AUTOMATED||LA139_2==BREAK||LA139_2==CLASS||(LA139_2 >= CONST && LA139_2 <= ControlString)||(LA139_2 >= DEFAULT && LA139_2 <= DESTRUCTOR)||LA139_2==END||(LA139_2 >= EXIT && LA139_2 <= EXPORT)||LA139_2==FINAL||LA139_2==FUNCTION||LA139_2==HELPER||LA139_2==IMPLEMENTS||LA139_2==INDEX||LA139_2==LBRACK||(LA139_2 >= LIBRARY && LA139_2 <= LOCAL)||LA139_2==MESSAGE||LA139_2==NAME||LA139_2==OBJECT||LA139_2==OPERATOR||LA139_2==OUT||LA139_2==PACKAGE||LA139_2==PLATFORM||LA139_2==POINTER||(LA139_2 >= PRIVATE && LA139_2 <= PROCEDURE)||(LA139_2 >= PROPERTY && LA139_2 <= QuotedString)||(LA139_2 >= READ && LA139_2 <= READONLY)||(LA139_2 >= REFERENCE && LA139_2 <= REGISTER)||LA139_2==REMOVE||LA139_2==RESOURCESTRING||(LA139_2 >= STORED && LA139_2 <= STRING)||LA139_2==THREADVAR||LA139_2==TYPE||LA139_2==TkIdentifier||LA139_2==VAR||LA139_2==VARIANT||LA139_2==WRITE||LA139_2==199) ) {
						alt139=1;
					}

				}
				else if ( (LA139_0==EXPERIMENTAL||LA139_0==LIBRARY||LA139_0==PLATFORM) ) {
					alt139=1;
				}

				switch (alt139) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:79: hintingDirective
					{
					pushFollow(FOLLOW_hintingDirective_in_classField9113);
					hintingDirective417=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_hintingDirective.add(hintingDirective417.getTree());
					}
					break;

				default :
					break loop139;
				}
			}

			// AST REWRITE
			// elements: identList, customAttribute, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 362:30: -> ( customAttribute )? ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:33: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:52: ^( TkClassField ^( TkVariableIdents identList ) ^( TkVariableType typeDecl ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkClassField, "TkClassField"), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:67: ^( TkVariableIdents identList )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_identList.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:362:97: ^( TkVariableType typeDecl )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				adaptor.addChild(root_2, stream_typeDecl.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 93, classField_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classField"


	public static class classProperty_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classProperty"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:1: classProperty : ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) ;
	public final DelphiParser.classProperty_return classProperty() throws RecognitionException {
		DelphiParser.classProperty_return retval = new DelphiParser.classProperty_return();
		retval.start = input.LT(1);
		int classProperty_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal419=null;
		Token string_literal420=null;
		Token char_literal423=null;
		Token char_literal427=null;
		ParserRuleReturnScope customAttribute418 =null;
		ParserRuleReturnScope ident421 =null;
		ParserRuleReturnScope classPropertyArray422 =null;
		ParserRuleReturnScope genericTypeIdent424 =null;
		ParserRuleReturnScope classPropertyIndex425 =null;
		ParserRuleReturnScope classPropertySpecifier426 =null;
		ParserRuleReturnScope classPropertyEndSpecifier428 =null;

		Object string_literal419_tree=null;
		Object string_literal420_tree=null;
		Object char_literal423_tree=null;
		Object char_literal427_tree=null;
		RewriteRuleTokenStream stream_PROPERTY=new RewriteRuleTokenStream(adaptor,"token PROPERTY");
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_classPropertyEndSpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyEndSpecifier");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_genericTypeIdent=new RewriteRuleSubtreeStream(adaptor,"rule genericTypeIdent");
		RewriteRuleSubtreeStream stream_classPropertyIndex=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyIndex");
		RewriteRuleSubtreeStream stream_classPropertyArray=new RewriteRuleSubtreeStream(adaptor,"rule classPropertyArray");
		RewriteRuleSubtreeStream stream_classPropertySpecifier=new RewriteRuleSubtreeStream(adaptor,"rule classPropertySpecifier");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:30: ( ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )* -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:32: ( customAttribute )? ( 'class' )? 'property' ident ( classPropertyArray )? ( ':' genericTypeIdent )? ( classPropertyIndex )? ( classPropertySpecifier )* ';' ( classPropertyEndSpecifier )*
			{
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:32: ( customAttribute )?
			int alt140=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt140=1;
					}
					break;
				case CLASS:
					{
					int LA140_2 = input.LA(2);
					if ( (synpred191_Delphi()) ) {
						alt140=1;
					}
					}
					break;
				case PROPERTY:
					{
					int LA140_3 = input.LA(2);
					if ( (synpred191_Delphi()) ) {
						alt140=1;
					}
					}
					break;
			}
			switch (alt140) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_classProperty9220);
					customAttribute418=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute418.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:51: ( 'class' )?
			int alt141=2;
			int LA141_0 = input.LA(1);
			if ( (LA141_0==CLASS) ) {
				alt141=1;
			}
			switch (alt141) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:52: 'class'
					{
					string_literal419=(Token)match(input,CLASS,FOLLOW_CLASS_in_classProperty9225); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal419);

					}
					break;

			}

			string_literal420=(Token)match(input,PROPERTY,FOLLOW_PROPERTY_in_classProperty9229); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_PROPERTY.add(string_literal420);

			pushFollow(FOLLOW_ident_in_classProperty9231);
			ident421=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident421.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:79: ( classPropertyArray )?
			int alt142=2;
			int LA142_0 = input.LA(1);
			if ( (LA142_0==LBRACK) ) {
				alt142=1;
			}
			switch (alt142) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:80: classPropertyArray
					{
					pushFollow(FOLLOW_classPropertyArray_in_classProperty9234);
					classPropertyArray422=classPropertyArray();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyArray.add(classPropertyArray422.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:101: ( ':' genericTypeIdent )?
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==COLON) ) {
				alt143=1;
			}
			switch (alt143) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:102: ':' genericTypeIdent
					{
					char_literal423=(Token)match(input,COLON,FOLLOW_COLON_in_classProperty9239); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal423);

					pushFollow(FOLLOW_genericTypeIdent_in_classProperty9241);
					genericTypeIdent424=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_genericTypeIdent.add(genericTypeIdent424.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:125: ( classPropertyIndex )?
			int alt144=2;
			int LA144_0 = input.LA(1);
			if ( (LA144_0==INDEX) ) {
				alt144=1;
			}
			switch (alt144) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:126: classPropertyIndex
					{
					pushFollow(FOLLOW_classPropertyIndex_in_classProperty9246);
					classPropertyIndex425=classPropertyIndex();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyIndex.add(classPropertyIndex425.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:147: ( classPropertySpecifier )*
			loop145:
			while (true) {
				int alt145=2;
				int LA145_0 = input.LA(1);
				if ( (LA145_0==DEFAULT||LA145_0==DISPID||LA145_0==IMPLEMENTS||LA145_0==NODEFAULT||(LA145_0 >= READ && LA145_0 <= READONLY)||LA145_0==STORED||(LA145_0 >= WRITE && LA145_0 <= WRITEONLY)) ) {
					alt145=1;
				}

				switch (alt145) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:148: classPropertySpecifier
					{
					pushFollow(FOLLOW_classPropertySpecifier_in_classProperty9251);
					classPropertySpecifier426=classPropertySpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertySpecifier.add(classPropertySpecifier426.getTree());
					}
					break;

				default :
					break loop145;
				}
			}

			char_literal427=(Token)match(input,SEMI,FOLLOW_SEMI_in_classProperty9255); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal427);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:177: ( classPropertyEndSpecifier )*
			loop146:
			while (true) {
				int alt146=2;
				switch ( input.LA(1) ) {
				case STORED:
					{
					int LA146_2 = input.LA(2);
					if ( (LA146_2==ADD||LA146_2==ANSISTRING||(LA146_2 >= AT && LA146_2 <= AT2)||LA146_2==BREAK||(LA146_2 >= CONTAINS && LA146_2 <= ControlString)||(LA146_2 >= DEFAULT && LA146_2 <= DEPRECATED)||LA146_2==EXIT||LA146_2==EXPORT||LA146_2==FALSE||(LA146_2 >= FILE && LA146_2 <= FINAL)||LA146_2==FUNCTION||LA146_2==HELPER||LA146_2==IMPLEMENTS||(LA146_2 >= INDEX && LA146_2 <= INHERITED)||LA146_2==LBRACK||(LA146_2 >= LOCAL && LA146_2 <= LPAREN)||(LA146_2 >= MESSAGE && LA146_2 <= MINUS)||LA146_2==NAME||LA146_2==NIL||LA146_2==NOT||LA146_2==OBJECT||LA146_2==OPERATOR||LA146_2==OUT||LA146_2==PACKAGE||(LA146_2 >= PLUS && LA146_2 <= POINTER)||LA146_2==PROCEDURE||LA146_2==QuotedString||(LA146_2 >= READ && LA146_2 <= READONLY)||(LA146_2 >= REFERENCE && LA146_2 <= REGISTER)||LA146_2==REMOVE||(LA146_2 >= STORED && LA146_2 <= STRING)||LA146_2==TRUE||LA146_2==TkAsmHexNum||(LA146_2 >= TkHexNum && LA146_2 <= TkIntNum)||LA146_2==TkRealNum||LA146_2==VARIANT||LA146_2==WRITE||LA146_2==199) ) {
						alt146=1;
					}

					}
					break;
				case DEFAULT:
					{
					int LA146_3 = input.LA(2);
					if ( (LA146_3==ADD||LA146_3==ANSISTRING||(LA146_3 >= AT && LA146_3 <= AT2)||LA146_3==BREAK||(LA146_3 >= CONTAINS && LA146_3 <= ControlString)||(LA146_3 >= DEFAULT && LA146_3 <= DEPRECATED)||LA146_3==EXIT||LA146_3==EXPORT||LA146_3==FALSE||(LA146_3 >= FILE && LA146_3 <= FINAL)||LA146_3==FUNCTION||LA146_3==HELPER||LA146_3==IMPLEMENTS||(LA146_3 >= INDEX && LA146_3 <= INHERITED)||LA146_3==LBRACK||(LA146_3 >= LOCAL && LA146_3 <= LPAREN)||(LA146_3 >= MESSAGE && LA146_3 <= MINUS)||LA146_3==NAME||LA146_3==NIL||LA146_3==NOT||LA146_3==OBJECT||LA146_3==OPERATOR||LA146_3==OUT||LA146_3==PACKAGE||(LA146_3 >= PLUS && LA146_3 <= POINTER)||LA146_3==PROCEDURE||LA146_3==QuotedString||(LA146_3 >= READ && LA146_3 <= READONLY)||(LA146_3 >= REFERENCE && LA146_3 <= REGISTER)||LA146_3==REMOVE||LA146_3==SEMI||(LA146_3 >= STORED && LA146_3 <= STRING)||LA146_3==TRUE||LA146_3==TkAsmHexNum||(LA146_3 >= TkHexNum && LA146_3 <= TkIntNum)||LA146_3==TkRealNum||LA146_3==VARIANT||LA146_3==WRITE||LA146_3==199) ) {
						alt146=1;
					}

					}
					break;
				case NODEFAULT:
					{
					alt146=1;
					}
					break;
				}
				switch (alt146) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:178: classPropertyEndSpecifier
					{
					pushFollow(FOLLOW_classPropertyEndSpecifier_in_classProperty9258);
					classPropertyEndSpecifier428=classPropertyEndSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_classPropertyEndSpecifier.add(classPropertyEndSpecifier428.getTree());
					}
					break;

				default :
					break loop146;
				}
			}

			// AST REWRITE
			// elements: classPropertySpecifier, PROPERTY, ident, genericTypeIdent
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 365:31: -> ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:34: ^( 'property' ^( TkVariableIdents ident ) ^( TkVariableType ( genericTypeIdent )? ) ( classPropertySpecifier )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_PROPERTY.nextNode(), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:47: ^( TkVariableIdents ident )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_2);
				adaptor.addChild(root_2, stream_ident.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:73: ^( TkVariableType ( genericTypeIdent )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_2);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:90: ( genericTypeIdent )?
				if ( stream_genericTypeIdent.hasNext() ) {
					adaptor.addChild(root_2, stream_genericTypeIdent.nextTree());
				}
				stream_genericTypeIdent.reset();

				adaptor.addChild(root_1, root_2);
				}

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:365:109: ( classPropertySpecifier )*
				while ( stream_classPropertySpecifier.hasNext() ) {
					adaptor.addChild(root_1, stream_classPropertySpecifier.nextTree());
				}
				stream_classPropertySpecifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 94, classProperty_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classProperty"


	public static class classPropertyArray_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyArray"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:1: classPropertyArray : '[' formalParameterList ']' ;
	public final DelphiParser.classPropertyArray_return classPropertyArray() throws RecognitionException {
		DelphiParser.classPropertyArray_return retval = new DelphiParser.classPropertyArray_return();
		retval.start = input.LT(1);
		int classPropertyArray_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal429=null;
		Token char_literal431=null;
		ParserRuleReturnScope formalParameterList430 =null;

		Object char_literal429_tree=null;
		Object char_literal431_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:30: ( '[' formalParameterList ']' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:369:32: '[' formalParameterList ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal429=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyArray9424); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal429_tree = (Object)adaptor.create(char_literal429);
			adaptor.addChild(root_0, char_literal429_tree);
			}

			pushFollow(FOLLOW_formalParameterList_in_classPropertyArray9426);
			formalParameterList430=formalParameterList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterList430.getTree());

			char_literal431=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyArray9428); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal431_tree = (Object)adaptor.create(char_literal431);
			adaptor.addChild(root_0, char_literal431_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 95, classPropertyArray_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyArray"


	public static class classPropertyIndex_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyIndex"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:1: classPropertyIndex : 'index' expression ( ';' )? ;
	public final DelphiParser.classPropertyIndex_return classPropertyIndex() throws RecognitionException {
		DelphiParser.classPropertyIndex_return retval = new DelphiParser.classPropertyIndex_return();
		retval.start = input.LT(1);
		int classPropertyIndex_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal432=null;
		Token char_literal434=null;
		ParserRuleReturnScope expression433 =null;

		Object string_literal432_tree=null;
		Object char_literal434_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:30: ( 'index' expression ( ';' )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:32: 'index' expression ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal432=(Token)match(input,INDEX,FOLLOW_INDEX_in_classPropertyIndex9475); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal432_tree = (Object)adaptor.create(string_literal432);
			adaptor.addChild(root_0, string_literal432_tree);
			}

			pushFollow(FOLLOW_expression_in_classPropertyIndex9477);
			expression433=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression433.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:51: ( ';' )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==SEMI) ) {
				int LA147_1 = input.LA(2);
				if ( (synpred198_Delphi()) ) {
					alt147=1;
				}
			}
			switch (alt147) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:52: ';'
					{
					char_literal434=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyIndex9480); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal434_tree = (Object)adaptor.create(char_literal434);
					adaptor.addChild(root_0, char_literal434_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 96, classPropertyIndex_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyIndex"


	public static class classPropertySpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertySpecifier"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:1: classPropertySpecifier : ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId );
	public final DelphiParser.classPropertySpecifier_return classPropertySpecifier() throws RecognitionException {
		DelphiParser.classPropertySpecifier_return retval = new DelphiParser.classPropertySpecifier_return();
		retval.start = input.LT(1);
		int classPropertySpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED437=null;
		Token string_literal439=null;
		Token string_literal441=null;
		Token string_literal442=null;
		Token IMPLEMENTS443=null;
		ParserRuleReturnScope classPropertyReadWrite435 =null;
		ParserRuleReturnScope classPropertyDispInterface436 =null;
		ParserRuleReturnScope expression438 =null;
		ParserRuleReturnScope expression440 =null;
		ParserRuleReturnScope typeId444 =null;

		Object STORED437_tree=null;
		Object string_literal439_tree=null;
		Object string_literal441_tree=null;
		Object string_literal442_tree=null;
		Object IMPLEMENTS443_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:30: ( classPropertyReadWrite | classPropertyDispInterface | STORED expression | 'default' expression | 'default' | 'nodefault' | IMPLEMENTS typeId )
			int alt148=7;
			switch ( input.LA(1) ) {
			case READ:
			case WRITE:
				{
				alt148=1;
				}
				break;
			case DISPID:
			case READONLY:
			case WRITEONLY:
				{
				alt148=2;
				}
				break;
			case STORED:
				{
				alt148=3;
				}
				break;
			case DEFAULT:
				{
				int LA148_7 = input.LA(2);
				if ( (synpred202_Delphi()) ) {
					alt148=4;
				}
				else if ( (synpred203_Delphi()) ) {
					alt148=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 148, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt148=6;
				}
				break;
			case IMPLEMENTS:
				{
				alt148=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 148, 0, input);
				throw nvae;
			}
			switch (alt148) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:373:32: classPropertyReadWrite
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9527);
					classPropertyReadWrite435=classPropertyReadWrite();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyReadWrite435.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:374:32: classPropertyDispInterface
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9563);
					classPropertyDispInterface436=classPropertyDispInterface();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, classPropertyDispInterface436.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:375:32: STORED expression
					{
					root_0 = (Object)adaptor.nil();


					STORED437=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertySpecifier9596); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED437_tree = (Object)adaptor.create(STORED437);
					adaptor.addChild(root_0, STORED437_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9598);
					expression438=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression438.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: 'default' expression
					{
					root_0 = (Object)adaptor.nil();


					string_literal439=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9631); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal439_tree = (Object)adaptor.create(string_literal439);
					adaptor.addChild(root_0, string_literal439_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertySpecifier9633);
					expression440=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression440.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:377:32: 'default'
					{
					root_0 = (Object)adaptor.nil();


					string_literal441=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertySpecifier9666); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal441_tree = (Object)adaptor.create(string_literal441);
					adaptor.addChild(root_0, string_literal441_tree);
					}

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:378:32: 'nodefault'
					{
					root_0 = (Object)adaptor.nil();


					string_literal442=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertySpecifier9715); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal442_tree = (Object)adaptor.create(string_literal442);
					adaptor.addChild(root_0, string_literal442_tree);
					}

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:379:32: IMPLEMENTS typeId
					{
					root_0 = (Object)adaptor.nil();


					IMPLEMENTS443=(Token)match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_classPropertySpecifier9748); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMPLEMENTS443_tree = (Object)adaptor.create(IMPLEMENTS443);
					adaptor.addChild(root_0, IMPLEMENTS443_tree);
					}

					pushFollow(FOLLOW_typeId_in_classPropertySpecifier9750);
					typeId444=typeId();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId444.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 97, classPropertySpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertySpecifier"


	public static class classPropertyEndSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyEndSpecifier"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:1: classPropertyEndSpecifier : ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' );
	public final DelphiParser.classPropertyEndSpecifier_return classPropertyEndSpecifier() throws RecognitionException {
		DelphiParser.classPropertyEndSpecifier_return retval = new DelphiParser.classPropertyEndSpecifier_return();
		retval.start = input.LT(1);
		int classPropertyEndSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token STORED445=null;
		Token char_literal447=null;
		Token string_literal448=null;
		Token char_literal450=null;
		Token string_literal451=null;
		Token char_literal452=null;
		Token string_literal453=null;
		Token char_literal454=null;
		ParserRuleReturnScope expression446 =null;
		ParserRuleReturnScope expression449 =null;

		Object STORED445_tree=null;
		Object char_literal447_tree=null;
		Object string_literal448_tree=null;
		Object char_literal450_tree=null;
		Object string_literal451_tree=null;
		Object char_literal452_tree=null;
		Object string_literal453_tree=null;
		Object char_literal454_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:30: ( STORED expression ';' | 'default' expression ';' | 'default' ';' | 'nodefault' ';' )
			int alt149=4;
			switch ( input.LA(1) ) {
			case STORED:
				{
				alt149=1;
				}
				break;
			case DEFAULT:
				{
				int LA149_2 = input.LA(2);
				if ( (LA149_2==SEMI) ) {
					alt149=3;
				}
				else if ( (LA149_2==ADD||LA149_2==ANSISTRING||(LA149_2 >= AT && LA149_2 <= AT2)||LA149_2==BREAK||(LA149_2 >= CONTAINS && LA149_2 <= ControlString)||(LA149_2 >= DEFAULT && LA149_2 <= DEPRECATED)||LA149_2==EXIT||LA149_2==EXPORT||LA149_2==FALSE||(LA149_2 >= FILE && LA149_2 <= FINAL)||LA149_2==FUNCTION||LA149_2==HELPER||LA149_2==IMPLEMENTS||(LA149_2 >= INDEX && LA149_2 <= INHERITED)||LA149_2==LBRACK||(LA149_2 >= LOCAL && LA149_2 <= LPAREN)||(LA149_2 >= MESSAGE && LA149_2 <= MINUS)||LA149_2==NAME||LA149_2==NIL||LA149_2==NOT||LA149_2==OBJECT||LA149_2==OPERATOR||LA149_2==OUT||LA149_2==PACKAGE||(LA149_2 >= PLUS && LA149_2 <= POINTER)||LA149_2==PROCEDURE||LA149_2==QuotedString||(LA149_2 >= READ && LA149_2 <= READONLY)||(LA149_2 >= REFERENCE && LA149_2 <= REGISTER)||LA149_2==REMOVE||(LA149_2 >= STORED && LA149_2 <= STRING)||LA149_2==TRUE||LA149_2==TkAsmHexNum||(LA149_2 >= TkHexNum && LA149_2 <= TkIntNum)||LA149_2==TkRealNum||LA149_2==VARIANT||LA149_2==WRITE||LA149_2==199) ) {
					alt149=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 149, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NODEFAULT:
				{
				alt149=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 149, 0, input);
				throw nvae;
			}
			switch (alt149) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:381:32: STORED expression ';'
					{
					root_0 = (Object)adaptor.nil();


					STORED445=(Token)match(input,STORED,FOLLOW_STORED_in_classPropertyEndSpecifier9790); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STORED445_tree = (Object)adaptor.create(STORED445);
					adaptor.addChild(root_0, STORED445_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9792);
					expression446=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression446.getTree());

					char_literal447=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9794); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal447_tree = (Object)adaptor.create(char_literal447);
					adaptor.addChild(root_0, char_literal447_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:382:32: 'default' expression ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal448=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier9831); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal448_tree = (Object)adaptor.create(string_literal448);
					adaptor.addChild(root_0, string_literal448_tree);
					}

					pushFollow(FOLLOW_expression_in_classPropertyEndSpecifier9833);
					expression449=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression449.getTree());

					char_literal450=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9835); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal450_tree = (Object)adaptor.create(char_literal450);
					adaptor.addChild(root_0, char_literal450_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:383:32: 'default' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal451=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_classPropertyEndSpecifier9868); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal451_tree = (Object)adaptor.create(string_literal451);
					adaptor.addChild(root_0, string_literal451_tree);
					}

					char_literal452=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9870); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal452_tree = (Object)adaptor.create(char_literal452);
					adaptor.addChild(root_0, char_literal452_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:384:32: 'nodefault' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal453=(Token)match(input,NODEFAULT,FOLLOW_NODEFAULT_in_classPropertyEndSpecifier9903); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal453_tree = (Object)adaptor.create(string_literal453);
					adaptor.addChild(root_0, string_literal453_tree);
					}

					char_literal454=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyEndSpecifier9905); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal454_tree = (Object)adaptor.create(char_literal454);
					adaptor.addChild(root_0, char_literal454_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 98, classPropertyEndSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyEndSpecifier"


	public static class classPropertyReadWrite_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyReadWrite"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:1: classPropertyReadWrite : ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) );
	public final DelphiParser.classPropertyReadWrite_return classPropertyReadWrite() throws RecognitionException {
		DelphiParser.classPropertyReadWrite_return retval = new DelphiParser.classPropertyReadWrite_return();
		retval.start = input.LT(1);
		int classPropertyReadWrite_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal455=null;
		Token char_literal457=null;
		Token char_literal459=null;
		Token string_literal460=null;
		Token char_literal462=null;
		Token char_literal464=null;
		ParserRuleReturnScope qualifiedIdent456 =null;
		ParserRuleReturnScope expression458 =null;
		ParserRuleReturnScope qualifiedIdent461 =null;
		ParserRuleReturnScope expression463 =null;

		Object string_literal455_tree=null;
		Object char_literal457_tree=null;
		Object char_literal459_tree=null;
		Object string_literal460_tree=null;
		Object char_literal462_tree=null;
		Object char_literal464_tree=null;
		RewriteRuleTokenStream stream_READ=new RewriteRuleTokenStream(adaptor,"token READ");
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_WRITE=new RewriteRuleTokenStream(adaptor,"token WRITE");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_qualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:30: ( 'read' qualifiedIdent ( '[' expression ']' )? -> ^( 'read' qualifiedIdent ) | 'write' qualifiedIdent ( '[' expression ']' )? -> ^( 'write' qualifiedIdent ) )
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==READ) ) {
				alt152=1;
			}
			else if ( (LA152_0==WRITE) ) {
				alt152=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 152, 0, input);
				throw nvae;
			}

			switch (alt152) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:32: 'read' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal455=(Token)match(input,READ,FOLLOW_READ_in_classPropertyReadWrite9949); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_READ.add(string_literal455);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite9951);
					qualifiedIdent456=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent456.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:54: ( '[' expression ']' )?
					int alt150=2;
					int LA150_0 = input.LA(1);
					if ( (LA150_0==LBRACK) ) {
						alt150=1;
					}
					switch (alt150) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:387:55: '[' expression ']'
							{
							char_literal457=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite9954); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal457);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite9956);
							expression458=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression458.getTree());
							char_literal459=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite9958); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal459);

							}
							break;

					}

					// AST REWRITE
					// elements: qualifiedIdent, READ
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 388:30: -> ^( 'read' qualifiedIdent )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:388:33: ^( 'read' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_READ.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:32: 'write' qualifiedIdent ( '[' expression ']' )?
					{
					string_literal460=(Token)match(input,WRITE,FOLLOW_WRITE_in_classPropertyReadWrite10032); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_WRITE.add(string_literal460);

					pushFollow(FOLLOW_qualifiedIdent_in_classPropertyReadWrite10034);
					qualifiedIdent461=qualifiedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_qualifiedIdent.add(qualifiedIdent461.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:55: ( '[' expression ']' )?
					int alt151=2;
					int LA151_0 = input.LA(1);
					if ( (LA151_0==LBRACK) ) {
						alt151=1;
					}
					switch (alt151) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:389:56: '[' expression ']'
							{
							char_literal462=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_classPropertyReadWrite10037); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LBRACK.add(char_literal462);

							pushFollow(FOLLOW_expression_in_classPropertyReadWrite10039);
							expression463=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression463.getTree());
							char_literal464=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_classPropertyReadWrite10041); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RBRACK.add(char_literal464);

							}
							break;

					}

					// AST REWRITE
					// elements: qualifiedIdent, WRITE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 390:30: -> ^( 'write' qualifiedIdent )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:390:33: ^( 'write' qualifiedIdent )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_WRITE.nextNode(), root_1);
						adaptor.addChild(root_1, stream_qualifiedIdent.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 99, classPropertyReadWrite_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyReadWrite"


	public static class classPropertyDispInterface_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "classPropertyDispInterface"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:392:1: classPropertyDispInterface : ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective );
	public final DelphiParser.classPropertyDispInterface_return classPropertyDispInterface() throws RecognitionException {
		DelphiParser.classPropertyDispInterface_return retval = new DelphiParser.classPropertyDispInterface_return();
		retval.start = input.LT(1);
		int classPropertyDispInterface_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal465=null;
		Token char_literal466=null;
		Token string_literal467=null;
		Token char_literal468=null;
		ParserRuleReturnScope dispIDDirective469 =null;

		Object string_literal465_tree=null;
		Object char_literal466_tree=null;
		Object string_literal467_tree=null;
		Object char_literal468_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:392:30: ( 'readonly' ';' | 'writeonly' ';' | dispIDDirective )
			int alt153=3;
			switch ( input.LA(1) ) {
			case READONLY:
				{
				alt153=1;
				}
				break;
			case WRITEONLY:
				{
				alt153=2;
				}
				break;
			case DISPID:
				{
				alt153=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 153, 0, input);
				throw nvae;
			}
			switch (alt153) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:392:32: 'readonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal465=(Token)match(input,READONLY,FOLLOW_READONLY_in_classPropertyDispInterface10120); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal465_tree = (Object)adaptor.create(string_literal465);
					adaptor.addChild(root_0, string_literal465_tree);
					}

					char_literal466=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10122); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal466_tree = (Object)adaptor.create(char_literal466);
					adaptor.addChild(root_0, char_literal466_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:393:32: 'writeonly' ';'
					{
					root_0 = (Object)adaptor.nil();


					string_literal467=(Token)match(input,WRITEONLY,FOLLOW_WRITEONLY_in_classPropertyDispInterface10155); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal467_tree = (Object)adaptor.create(string_literal467);
					adaptor.addChild(root_0, string_literal467_tree);
					}

					char_literal468=(Token)match(input,SEMI,FOLLOW_SEMI_in_classPropertyDispInterface10157); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal468_tree = (Object)adaptor.create(char_literal468);
					adaptor.addChild(root_0, char_literal468_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:394:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_classPropertyDispInterface10190);
					dispIDDirective469=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective469.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 100, classPropertyDispInterface_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "classPropertyDispInterface"


	public static class visibility_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "visibility"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:1: visibility : ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' );
	public final DelphiParser.visibility_return visibility() throws RecognitionException {
		DelphiParser.visibility_return retval = new DelphiParser.visibility_return();
		retval.start = input.LT(1);
		int visibility_StartIndex = input.index();

		Object root_0 = null;

		Token STRICT470=null;
		Token string_literal471=null;
		Token STRICT472=null;
		Token string_literal473=null;
		Token string_literal474=null;
		Token string_literal475=null;
		Token string_literal476=null;

		Object STRICT470_tree=null;
		Object string_literal471_tree=null;
		Object STRICT472_tree=null;
		Object string_literal473_tree=null;
		Object string_literal474_tree=null;
		Object string_literal475_tree=null;
		Object string_literal476_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:30: ( ( STRICT )? 'protected' | ( STRICT )? 'private' | 'public' | 'published' | 'automated' )
			int alt156=5;
			switch ( input.LA(1) ) {
			case STRICT:
				{
				int LA156_1 = input.LA(2);
				if ( (LA156_1==PROTECTED) ) {
					alt156=1;
				}
				else if ( (LA156_1==PRIVATE) ) {
					alt156=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 156, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PROTECTED:
				{
				alt156=1;
				}
				break;
			case PRIVATE:
				{
				alt156=2;
				}
				break;
			case PUBLIC:
				{
				alt156=3;
				}
				break;
			case PUBLISHED:
				{
				alt156=4;
				}
				break;
			case AUTOMATED:
				{
				alt156=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}
			switch (alt156) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:32: ( STRICT )? 'protected'
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:32: ( STRICT )?
					int alt154=2;
					int LA154_0 = input.LA(1);
					if ( (LA154_0==STRICT) ) {
						alt154=1;
					}
					switch (alt154) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:396:33: STRICT
							{
							STRICT470=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10246); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT470_tree = (Object)adaptor.create(STRICT470);
							adaptor.addChild(root_0, STRICT470_tree);
							}

							}
							break;

					}

					string_literal471=(Token)match(input,PROTECTED,FOLLOW_PROTECTED_in_visibility10250); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal471_tree = (Object)adaptor.create(string_literal471);
					adaptor.addChild(root_0, string_literal471_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:32: ( STRICT )? 'private'
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:32: ( STRICT )?
					int alt155=2;
					int LA155_0 = input.LA(1);
					if ( (LA155_0==STRICT) ) {
						alt155=1;
					}
					switch (alt155) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:397:33: STRICT
							{
							STRICT472=(Token)match(input,STRICT,FOLLOW_STRICT_in_visibility10284); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STRICT472_tree = (Object)adaptor.create(STRICT472);
							adaptor.addChild(root_0, STRICT472_tree);
							}

							}
							break;

					}

					string_literal473=(Token)match(input,PRIVATE,FOLLOW_PRIVATE_in_visibility10288); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal473_tree = (Object)adaptor.create(string_literal473);
					adaptor.addChild(root_0, string_literal473_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:398:32: 'public'
					{
					root_0 = (Object)adaptor.nil();


					string_literal474=(Token)match(input,PUBLIC,FOLLOW_PUBLIC_in_visibility10321); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal474_tree = (Object)adaptor.create(string_literal474);
					adaptor.addChild(root_0, string_literal474_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:399:32: 'published'
					{
					root_0 = (Object)adaptor.nil();


					string_literal475=(Token)match(input,PUBLISHED,FOLLOW_PUBLISHED_in_visibility10354); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal475_tree = (Object)adaptor.create(string_literal475);
					adaptor.addChild(root_0, string_literal475_tree);
					}

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:400:32: 'automated'
					{
					root_0 = (Object)adaptor.nil();


					string_literal476=(Token)match(input,AUTOMATED,FOLLOW_AUTOMATED_in_visibility10387); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal476_tree = (Object)adaptor.create(string_literal476);
					adaptor.addChild(root_0, string_literal476_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 101, visibility_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "visibility"


	public static class exportedProcHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exportedProcHeading"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:1: exportedProcHeading : ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl functionDirectiveSection | 'function' ident ( formalParameterSection )? functionDirectiveSection );
	public final DelphiParser.exportedProcHeading_return exportedProcHeading() throws RecognitionException {
		DelphiParser.exportedProcHeading_return retval = new DelphiParser.exportedProcHeading_return();
		retval.start = input.LT(1);
		int exportedProcHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal477=null;
		Token char_literal480=null;
		Token string_literal484=null;
		ParserRuleReturnScope ident478 =null;
		ParserRuleReturnScope formalParameterSection479 =null;
		ParserRuleReturnScope customAttribute481 =null;
		ParserRuleReturnScope typeDecl482 =null;
		ParserRuleReturnScope functionDirectiveSection483 =null;
		ParserRuleReturnScope ident485 =null;
		ParserRuleReturnScope formalParameterSection486 =null;
		ParserRuleReturnScope functionDirectiveSection487 =null;

		Object string_literal477_tree=null;
		Object char_literal480_tree=null;
		Object string_literal484_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:30: ( 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl functionDirectiveSection | 'function' ident ( formalParameterSection )? functionDirectiveSection )
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==PROCEDURE) ) {
				alt160=1;
			}
			else if ( (LA160_0==FUNCTION) ) {
				alt160=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 160, 0, input);
				throw nvae;
			}

			switch (alt160) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:32: 'procedure' ident ( formalParameterSection )? ':' ( customAttribute )? typeDecl functionDirectiveSection
					{
					root_0 = (Object)adaptor.nil();


					string_literal477=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_exportedProcHeading10441); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal477_tree = (Object)adaptor.create(string_literal477);
					adaptor.addChild(root_0, string_literal477_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10443);
					ident478=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident478.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:50: ( formalParameterSection )?
					int alt157=2;
					int LA157_0 = input.LA(1);
					if ( (LA157_0==LPAREN) ) {
						alt157=1;
					}
					switch (alt157) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:51: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10446);
							formalParameterSection479=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection479.getTree());

							}
							break;

					}

					char_literal480=(Token)match(input,COLON,FOLLOW_COLON_in_exportedProcHeading10450); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal480_tree = (Object)adaptor.create(char_literal480);
					adaptor.addChild(root_0, char_literal480_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:80: ( customAttribute )?
					int alt158=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							int LA158_1 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case PACKED:
							{
							int LA158_2 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case ARRAY:
							{
							int LA158_3 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case SET:
							{
							int LA158_4 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case FILE:
							{
							int LA158_5 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case CLASS:
							{
							int LA158_6 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case DISPINTERFACE:
						case INTERFACE:
							{
							int LA158_7 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case OBJECT:
							{
							int LA158_8 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case RECORD:
							{
							int LA158_9 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case POINTER2:
							{
							int LA158_10 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case POINTER:
							{
							int LA158_11 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case STRING:
							{
							int LA158_12 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case TYPE:
							{
							int LA158_13 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case ANSISTRING:
							{
							int LA158_14 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA158_15 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case PROCEDURE:
							{
							int LA158_16 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case REFERENCE:
							{
							int LA158_17 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case VARIANT:
							{
							int LA158_18 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case TkHexNum:
						case TkIntNum:
							{
							int LA158_19 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case TkRealNum:
							{
							int LA158_20 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case TkAsmHexNum:
							{
							int LA158_21 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case ControlString:
							{
							int LA158_22 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case QuotedString:
							{
							int LA158_23 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case TkIdentifier:
							{
							int LA158_24 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case 199:
							{
							int LA158_25 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case ADD:
						case AT:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case DEFAULT:
						case DEPRECATED:
						case EXIT:
						case EXPORT:
						case FINAL:
						case HELPER:
						case IMPLEMENTS:
						case INDEX:
						case LOCAL:
						case MESSAGE:
						case NAME:
						case OPERATOR:
						case OUT:
						case PACKAGE:
						case READ:
						case READONLY:
						case REGISTER:
						case REMOVE:
						case STORED:
						case STRICT:
						case WRITE:
							{
							int LA158_26 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case NIL:
							{
							int LA158_27 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case TRUE:
							{
							int LA158_28 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case FALSE:
							{
							int LA158_29 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case LPAREN:
							{
							int LA158_30 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case AT2:
						case MINUS:
						case NOT:
						case PLUS:
							{
							int LA158_31 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
						case INHERITED:
							{
							int LA158_32 = input.LA(2);
							if ( (synpred220_Delphi()) ) {
								alt158=1;
							}
							}
							break;
					}
					switch (alt158) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:81: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_exportedProcHeading10453);
							customAttribute481=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttribute481.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_typeDecl_in_exportedProcHeading10457);
					typeDecl482=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl482.getTree());

					pushFollow(FOLLOW_functionDirectiveSection_in_exportedProcHeading10459);
					functionDirectiveSection483=functionDirectiveSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirectiveSection483.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:32: 'function' ident ( formalParameterSection )? functionDirectiveSection
					{
					root_0 = (Object)adaptor.nil();


					string_literal484=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_exportedProcHeading10492); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal484_tree = (Object)adaptor.create(string_literal484);
					adaptor.addChild(root_0, string_literal484_tree);
					}

					pushFollow(FOLLOW_ident_in_exportedProcHeading10494);
					ident485=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident485.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:49: ( formalParameterSection )?
					int alt159=2;
					int LA159_0 = input.LA(1);
					if ( (LA159_0==LPAREN) ) {
						alt159=1;
					}
					switch (alt159) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:406:50: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_exportedProcHeading10497);
							formalParameterSection486=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection486.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_functionDirectiveSection_in_exportedProcHeading10501);
					functionDirectiveSection487=functionDirectiveSection();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirectiveSection487.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 102, exportedProcHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "exportedProcHeading"


	public static class methodDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:1: methodDecl : methodDeclHeading methodDirectiveSection ( methodBody )? -> methodDeclHeading ( methodBody )? ;
	public final DelphiParser.methodDecl_return methodDecl() throws RecognitionException {
		DelphiParser.methodDecl_return retval = new DelphiParser.methodDecl_return();
		retval.start = input.LT(1);
		int methodDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope methodDeclHeading488 =null;
		ParserRuleReturnScope methodDirectiveSection489 =null;
		ParserRuleReturnScope methodBody490 =null;

		RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
		RewriteRuleSubtreeStream stream_methodDirectiveSection=new RewriteRuleSubtreeStream(adaptor,"rule methodDirectiveSection");
		RewriteRuleSubtreeStream stream_methodDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclHeading");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:30: ( methodDeclHeading methodDirectiveSection ( methodBody )? -> methodDeclHeading ( methodBody )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:32: methodDeclHeading methodDirectiveSection ( methodBody )?
			{
			pushFollow(FOLLOW_methodDeclHeading_in_methodDecl10556);
			methodDeclHeading488=methodDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_methodDeclHeading.add(methodDeclHeading488.getTree());
			pushFollow(FOLLOW_methodDirectiveSection_in_methodDecl10558);
			methodDirectiveSection489=methodDirectiveSection();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_methodDirectiveSection.add(methodDirectiveSection489.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:73: ( methodBody )?
			int alt161=2;
			switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA161_1 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA161_2 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case TYPE:
					{
					int LA161_3 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA161_4 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA161_5 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case CLASS:
					{
					int LA161_6 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA161_7 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA161_8 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA161_9 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA161_10 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA161_11 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case ASM:
					{
					int LA161_12 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
				case SEMI:
					{
					int LA161_13 = input.LA(2);
					if ( (synpred223_Delphi()) ) {
						alt161=1;
					}
					}
					break;
			}
			switch (alt161) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:74: methodBody
					{
					pushFollow(FOLLOW_methodBody_in_methodDecl10561);
					methodBody490=methodBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodBody.add(methodBody490.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: methodBody, methodDeclHeading
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 408:87: -> methodDeclHeading ( methodBody )?
			{
				adaptor.addChild(root_0, stream_methodDeclHeading.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:108: ( methodBody )?
				if ( stream_methodBody.hasNext() ) {
					adaptor.addChild(root_0, stream_methodBody.nextTree());
				}
				stream_methodBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 103, methodDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDecl"


	public static class methodDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDeclHeading"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:1: methodDeclHeading : ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) );
	public final DelphiParser.methodDeclHeading_return methodDeclHeading() throws RecognitionException {
		DelphiParser.methodDeclHeading_return retval = new DelphiParser.methodDeclHeading_return();
		retval.start = input.LT(1);
		int methodDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal492=null;
		Token string_literal497=null;
		Token string_literal498=null;
		Token char_literal501=null;
		Token string_literal505=null;
		Token string_literal506=null;
		Token char_literal509=null;
		ParserRuleReturnScope customAttribute491 =null;
		ParserRuleReturnScope methodKey493 =null;
		ParserRuleReturnScope methodName494 =null;
		ParserRuleReturnScope formalParameterSection495 =null;
		ParserRuleReturnScope customAttribute496 =null;
		ParserRuleReturnScope methodName499 =null;
		ParserRuleReturnScope formalParameterSection500 =null;
		ParserRuleReturnScope customAttribute502 =null;
		ParserRuleReturnScope typeDecl503 =null;
		ParserRuleReturnScope customAttribute504 =null;
		ParserRuleReturnScope methodName507 =null;
		ParserRuleReturnScope formalParameterSection508 =null;
		ParserRuleReturnScope customAttribute510 =null;
		ParserRuleReturnScope typeDecl511 =null;

		Object string_literal492_tree=null;
		Object string_literal497_tree=null;
		Object string_literal498_tree=null;
		Object char_literal501_tree=null;
		Object string_literal505_tree=null;
		Object string_literal506_tree=null;
		Object char_literal509_tree=null;
		RewriteRuleTokenStream stream_OPERATOR=new RewriteRuleTokenStream(adaptor,"token OPERATOR");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_methodKey=new RewriteRuleSubtreeStream(adaptor,"rule methodKey");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_methodName=new RewriteRuleSubtreeStream(adaptor,"rule methodName");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:30: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) | ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) ) )
			int alt174=3;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA174_1 = input.LA(2);
				if ( (synpred227_Delphi()) ) {
					alt174=1;
				}
				else if ( (synpred233_Delphi()) ) {
					alt174=2;
				}
				else if ( (true) ) {
					alt174=3;
				}

				}
				break;
			case CLASS:
				{
				int LA174_2 = input.LA(2);
				if ( (synpred227_Delphi()) ) {
					alt174=1;
				}
				else if ( (synpred233_Delphi()) ) {
					alt174=2;
				}
				else if ( (true) ) {
					alt174=3;
				}

				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				alt174=1;
				}
				break;
			case FUNCTION:
				{
				alt174=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 174, 0, input);
				throw nvae;
			}
			switch (alt174) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( customAttribute )?
					int alt162=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt162=1;
							}
							break;
						case CLASS:
							{
							int LA162_2 = input.LA(2);
							if ( (synpred224_Delphi()) ) {
								alt162=1;
							}
							}
							break;
						case CONSTRUCTOR:
						case DESTRUCTOR:
						case PROCEDURE:
							{
							int LA162_3 = input.LA(2);
							if ( (synpred224_Delphi()) ) {
								alt162=1;
							}
							}
							break;
					}
					switch (alt162) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10621);
							customAttribute491=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute491.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:51: ( 'class' )?
					int alt163=2;
					int LA163_0 = input.LA(1);
					if ( (LA163_0==CLASS) ) {
						alt163=1;
					}
					switch (alt163) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:52: 'class'
							{
							string_literal492=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10626); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal492);

							}
							break;

					}

					pushFollow(FOLLOW_methodKey_in_methodDeclHeading10631);
					methodKey493=methodKey();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodKey.add(methodKey493.getTree());
					pushFollow(FOLLOW_methodName_in_methodDeclHeading10633);
					methodName494=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName494.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:84: ( formalParameterSection )?
					int alt164=2;
					int LA164_0 = input.LA(1);
					if ( (LA164_0==LPAREN) ) {
						alt164=1;
					}
					switch (alt164) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10636);
							formalParameterSection495=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection495.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: customAttribute, methodKey, methodName, formalParameterSection, CLASS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 411:30: -> ( customAttribute )? ( 'class' )? ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:64: ^( methodKey ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_methodKey.nextNode(), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:411:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:32: ( customAttribute )?
					int alt165=2;
					switch ( input.LA(1) ) {
						case LBRACK:
							{
							alt165=1;
							}
							break;
						case CLASS:
							{
							int LA165_2 = input.LA(2);
							if ( (synpred228_Delphi()) ) {
								alt165=1;
							}
							}
							break;
						case FUNCTION:
							{
							int LA165_3 = input.LA(2);
							if ( (synpred228_Delphi()) ) {
								alt165=1;
							}
							}
							break;
					}
					switch (alt165) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10734);
							customAttribute496=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute496.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:51: ( 'class' )?
					int alt166=2;
					int LA166_0 = input.LA(1);
					if ( (LA166_0==CLASS) ) {
						alt166=1;
					}
					switch (alt166) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:52: 'class'
							{
							string_literal497=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10739); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CLASS.add(string_literal497);

							}
							break;

					}

					string_literal498=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_methodDeclHeading10743); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal498);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading10745);
					methodName499=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName499.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:84: ( formalParameterSection )?
					int alt167=2;
					int LA167_0 = input.LA(1);
					if ( (LA167_0==LPAREN) ) {
						alt167=1;
					}
					switch (alt167) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:85: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10748);
							formalParameterSection500=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection500.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:110: ( ':' ( customAttribute )? typeDecl )?
					int alt169=2;
					int LA169_0 = input.LA(1);
					if ( (LA169_0==COLON) ) {
						alt169=1;
					}
					switch (alt169) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:111: ':' ( customAttribute )? typeDecl
							{
							char_literal501=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading10753); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal501);

							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:115: ( customAttribute )?
							int alt168=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA168_1 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case PACKED:
									{
									int LA168_2 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA168_3 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case SET:
									{
									int LA168_4 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case FILE:
									{
									int LA168_5 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case CLASS:
									{
									int LA168_6 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA168_7 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA168_8 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case RECORD:
									{
									int LA168_9 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA168_10 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case POINTER:
									{
									int LA168_11 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case STRING:
									{
									int LA168_12 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case TYPE:
									{
									int LA168_13 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA168_14 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA168_15 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA168_16 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA168_17 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA168_18 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA168_19 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA168_20 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case TkAsmHexNum:
									{
									int LA168_21 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case ControlString:
									{
									int LA168_22 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA168_23 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA168_24 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case 199:
									{
									int LA168_25 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case DEPRECATED:
								case EXIT:
								case EXPORT:
								case FINAL:
								case HELPER:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case PACKAGE:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STORED:
								case STRICT:
								case WRITE:
									{
									int LA168_26 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case NIL:
									{
									int LA168_27 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case TRUE:
									{
									int LA168_28 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case FALSE:
									{
									int LA168_29 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA168_30 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case AT2:
								case MINUS:
								case NOT:
								case PLUS:
									{
									int LA168_31 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA168_32 = input.LA(2);
									if ( (synpred231_Delphi()) ) {
										alt168=1;
									}
									}
									break;
							}
							switch (alt168) {
								case 1 :
									// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:116: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10756);
									customAttribute502=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute502.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading10760);
							typeDecl503=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl503.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: customAttribute, FUNCTION, typeDecl, CLASS, formalParameterSection, methodName, customAttribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 413:30: -> ( customAttribute )? ( 'class' )? ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:52: ( 'class' )?
						if ( stream_CLASS.hasNext() ) {
							adaptor.addChild(root_0, stream_CLASS.nextNode());
						}
						stream_CLASS.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:63: ^( 'function' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:76: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:105: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:122: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:149: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:168: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:413:187: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:32: ( customAttribute )? 'class' 'operator' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:32: ( customAttribute )?
					int alt170=2;
					int LA170_0 = input.LA(1);
					if ( (LA170_0==LBRACK) ) {
						alt170=1;
					}
					else if ( (LA170_0==CLASS) ) {
						int LA170_2 = input.LA(2);
						if ( (synpred234_Delphi()) ) {
							alt170=1;
						}
					}
					switch (alt170) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10869);
							customAttribute504=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute504.getTree());
							}
							break;

					}

					string_literal505=(Token)match(input,CLASS,FOLLOW_CLASS_in_methodDeclHeading10873); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CLASS.add(string_literal505);

					string_literal506=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_methodDeclHeading10875); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_OPERATOR.add(string_literal506);

					pushFollow(FOLLOW_methodName_in_methodDeclHeading10877);
					methodName507=methodName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_methodName.add(methodName507.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:81: ( formalParameterSection )?
					int alt171=2;
					int LA171_0 = input.LA(1);
					if ( (LA171_0==LPAREN) ) {
						alt171=1;
					}
					switch (alt171) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:82: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_methodDeclHeading10880);
							formalParameterSection508=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection508.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:107: ( ':' ( customAttribute )? typeDecl )?
					int alt173=2;
					int LA173_0 = input.LA(1);
					if ( (LA173_0==COLON) ) {
						alt173=1;
					}
					switch (alt173) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:108: ':' ( customAttribute )? typeDecl
							{
							char_literal509=(Token)match(input,COLON,FOLLOW_COLON_in_methodDeclHeading10885); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal509);

							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:112: ( customAttribute )?
							int alt172=2;
							switch ( input.LA(1) ) {
								case LBRACK:
									{
									int LA172_1 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case PACKED:
									{
									int LA172_2 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case ARRAY:
									{
									int LA172_3 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case SET:
									{
									int LA172_4 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case FILE:
									{
									int LA172_5 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case CLASS:
									{
									int LA172_6 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case DISPINTERFACE:
								case INTERFACE:
									{
									int LA172_7 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case OBJECT:
									{
									int LA172_8 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case RECORD:
									{
									int LA172_9 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case POINTER2:
									{
									int LA172_10 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case POINTER:
									{
									int LA172_11 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case STRING:
									{
									int LA172_12 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case TYPE:
									{
									int LA172_13 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case ANSISTRING:
									{
									int LA172_14 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case FUNCTION:
									{
									int LA172_15 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case PROCEDURE:
									{
									int LA172_16 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case REFERENCE:
									{
									int LA172_17 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case VARIANT:
									{
									int LA172_18 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case TkHexNum:
								case TkIntNum:
									{
									int LA172_19 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case TkRealNum:
									{
									int LA172_20 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case TkAsmHexNum:
									{
									int LA172_21 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case ControlString:
									{
									int LA172_22 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case QuotedString:
									{
									int LA172_23 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case TkIdentifier:
									{
									int LA172_24 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case 199:
									{
									int LA172_25 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case ADD:
								case AT:
								case BREAK:
								case CONTAINS:
								case CONTINUE:
								case DEFAULT:
								case DEPRECATED:
								case EXIT:
								case EXPORT:
								case FINAL:
								case HELPER:
								case IMPLEMENTS:
								case INDEX:
								case LOCAL:
								case MESSAGE:
								case NAME:
								case OPERATOR:
								case OUT:
								case PACKAGE:
								case READ:
								case READONLY:
								case REGISTER:
								case REMOVE:
								case STORED:
								case STRICT:
								case WRITE:
									{
									int LA172_26 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case NIL:
									{
									int LA172_27 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case TRUE:
									{
									int LA172_28 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case FALSE:
									{
									int LA172_29 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case LPAREN:
									{
									int LA172_30 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case AT2:
								case MINUS:
								case NOT:
								case PLUS:
									{
									int LA172_31 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
								case INHERITED:
									{
									int LA172_32 = input.LA(2);
									if ( (synpred236_Delphi()) ) {
										alt172=1;
									}
									}
									break;
							}
							switch (alt172) {
								case 1 :
									// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:113: customAttribute
									{
									pushFollow(FOLLOW_customAttribute_in_methodDeclHeading10888);
									customAttribute510=customAttribute();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute510.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_typeDecl_in_methodDeclHeading10892);
							typeDecl511=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl511.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: customAttribute, customAttribute, CLASS, typeDecl, OPERATOR, formalParameterSection, methodName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 415:30: -> ( customAttribute )? 'class' ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:33: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_0, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						adaptor.addChild(root_0, stream_CLASS.nextNode());
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:60: ^( 'operator' ^( TkFunctionName methodName ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_OPERATOR.nextNode(), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:73: ^( TkFunctionName methodName )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_methodName.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:102: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:119: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:146: ^( TkFunctionReturn ( customAttribute )? ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:165: ( customAttribute )?
						if ( stream_customAttribute.hasNext() ) {
							adaptor.addChild(root_2, stream_customAttribute.nextTree());
						}
						stream_customAttribute.reset();

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:415:184: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 104, methodDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDeclHeading"


	public static class methodKey_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodKey"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:1: methodKey : ( 'procedure' | 'constructor' | 'destructor' );
	public final DelphiParser.methodKey_return methodKey() throws RecognitionException {
		DelphiParser.methodKey_return retval = new DelphiParser.methodKey_return();
		retval.start = input.LT(1);
		int methodKey_StartIndex = input.index();

		Object root_0 = null;

		Token set512=null;

		Object set512_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:417:30: ( 'procedure' | 'constructor' | 'destructor' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set512=input.LT(1);
			if ( input.LA(1)==CONSTRUCTOR||input.LA(1)==DESTRUCTOR||input.LA(1)==PROCEDURE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set512));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 105, methodKey_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodKey"


	public static class methodName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodName"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:1: methodName : ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )? ;
	public final DelphiParser.methodName_return methodName() throws RecognitionException {
		DelphiParser.methodName_return retval = new DelphiParser.methodName_return();
		retval.start = input.LT(1);
		int methodName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal515=null;
		Token char_literal518=null;
		ParserRuleReturnScope ident513 =null;
		ParserRuleReturnScope genericDefinition514 =null;
		ParserRuleReturnScope ident516 =null;
		ParserRuleReturnScope genericDefinition517 =null;
		ParserRuleReturnScope ident519 =null;
		ParserRuleReturnScope genericDefinition520 =null;

		Object char_literal515_tree=null;
		Object char_literal518_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:30: ( ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:32: ident ( genericDefinition )? ( '.' ident ( genericDefinition )? )? '.' ident ( genericDefinition )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_methodName11141);
			ident513=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident513.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:38: ( genericDefinition )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==LT) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:39: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_methodName11144);
					genericDefinition514=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition514.getTree());

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:59: ( '.' ident ( genericDefinition )? )?
			int alt177=2;
			alt177 = dfa177.predict(input);
			switch (alt177) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:60: '.' ident ( genericDefinition )?
					{
					char_literal515=(Token)match(input,DOT,FOLLOW_DOT_in_methodName11149); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal515_tree = (Object)adaptor.create(char_literal515);
					adaptor.addChild(root_0, char_literal515_tree);
					}

					pushFollow(FOLLOW_ident_in_methodName11151);
					ident516=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident516.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:70: ( genericDefinition )?
					int alt176=2;
					int LA176_0 = input.LA(1);
					if ( (LA176_0==LT) ) {
						alt176=1;
					}
					switch (alt176) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:71: genericDefinition
							{
							pushFollow(FOLLOW_genericDefinition_in_methodName11154);
							genericDefinition517=genericDefinition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition517.getTree());

							}
							break;

					}

					}
					break;

			}

			char_literal518=(Token)match(input,DOT,FOLLOW_DOT_in_methodName11160); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal518_tree = (Object)adaptor.create(char_literal518);
			adaptor.addChild(root_0, char_literal518_tree);
			}

			pushFollow(FOLLOW_ident_in_methodName11162);
			ident519=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident519.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:103: ( genericDefinition )?
			int alt178=2;
			int LA178_0 = input.LA(1);
			if ( (LA178_0==LT) ) {
				alt178=1;
			}
			switch (alt178) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:421:104: genericDefinition
					{
					pushFollow(FOLLOW_genericDefinition_in_methodName11165);
					genericDefinition520=genericDefinition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericDefinition520.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 106, methodName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodName"


	public static class procDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:1: procDecl : procDeclHeading functionDirectiveSection ( procBody )? -> procDeclHeading ( procBody )? ;
	public final DelphiParser.procDecl_return procDecl() throws RecognitionException {
		DelphiParser.procDecl_return retval = new DelphiParser.procDecl_return();
		retval.start = input.LT(1);
		int procDecl_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope procDeclHeading521 =null;
		ParserRuleReturnScope functionDirectiveSection522 =null;
		ParserRuleReturnScope procBody523 =null;

		RewriteRuleSubtreeStream stream_functionDirectiveSection=new RewriteRuleSubtreeStream(adaptor,"rule functionDirectiveSection");
		RewriteRuleSubtreeStream stream_procDeclHeading=new RewriteRuleSubtreeStream(adaptor,"rule procDeclHeading");
		RewriteRuleSubtreeStream stream_procBody=new RewriteRuleSubtreeStream(adaptor,"rule procBody");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:30: ( procDeclHeading functionDirectiveSection ( procBody )? -> procDeclHeading ( procBody )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:32: procDeclHeading functionDirectiveSection ( procBody )?
			{
			pushFollow(FOLLOW_procDeclHeading_in_procDecl11224);
			procDeclHeading521=procDeclHeading();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procDeclHeading.add(procDeclHeading521.getTree());
			pushFollow(FOLLOW_functionDirectiveSection_in_procDecl11226);
			functionDirectiveSection522=functionDirectiveSection();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_functionDirectiveSection.add(functionDirectiveSection522.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:73: ( procBody )?
			int alt179=2;
			switch ( input.LA(1) ) {
				case LABEL:
					{
					int LA179_1 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case CONST:
				case RESOURCESTRING:
					{
					int LA179_2 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case TYPE:
					{
					int LA179_3 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case THREADVAR:
				case VAR:
					{
					int LA179_4 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA179_5 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case CLASS:
					{
					int LA179_6 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case PROCEDURE:
					{
					int LA179_7 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case FUNCTION:
					{
					int LA179_8 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case CONSTRUCTOR:
				case DESTRUCTOR:
					{
					int LA179_9 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case EXPORTS:
					{
					int LA179_10 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case BEGIN:
					{
					int LA179_11 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case ASM:
					{
					int LA179_12 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
				case SEMI:
					{
					int LA179_13 = input.LA(2);
					if ( (synpred244_Delphi()) ) {
						alt179=1;
					}
					}
					break;
			}
			switch (alt179) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:74: procBody
					{
					pushFollow(FOLLOW_procBody_in_procDecl11229);
					procBody523=procBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_procBody.add(procBody523.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: procDeclHeading, procBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 423:85: -> procDeclHeading ( procBody )?
			{
				adaptor.addChild(root_0, stream_procDeclHeading.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:104: ( procBody )?
				if ( stream_procBody.hasNext() ) {
					adaptor.addChild(root_0, stream_procBody.nextTree());
				}
				stream_procBody.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 107, procDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDecl"


	public static class procDeclHeading_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procDeclHeading"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:1: procDeclHeading : ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ( ':' typeDecl )? -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( typeDecl )? ) ) );
	public final DelphiParser.procDeclHeading_return procDeclHeading() throws RecognitionException {
		DelphiParser.procDeclHeading_return retval = new DelphiParser.procDeclHeading_return();
		retval.start = input.LT(1);
		int procDeclHeading_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal525=null;
		Token string_literal529=null;
		Token char_literal532=null;
		ParserRuleReturnScope customAttribute524 =null;
		ParserRuleReturnScope ident526 =null;
		ParserRuleReturnScope formalParameterSection527 =null;
		ParserRuleReturnScope customAttribute528 =null;
		ParserRuleReturnScope ident530 =null;
		ParserRuleReturnScope formalParameterSection531 =null;
		ParserRuleReturnScope typeDecl533 =null;

		Object string_literal525_tree=null;
		Object string_literal529_tree=null;
		Object char_literal532_tree=null;
		RewriteRuleTokenStream stream_PROCEDURE=new RewriteRuleTokenStream(adaptor,"token PROCEDURE");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_formalParameterSection=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterSection");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:30: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ) | ( customAttribute )? 'function' ident ( formalParameterSection )? ( ':' typeDecl )? -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( typeDecl )? ) ) )
			int alt185=2;
			switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA185_1 = input.LA(2);
				if ( (synpred247_Delphi()) ) {
					alt185=1;
				}
				else if ( (true) ) {
					alt185=2;
				}

				}
				break;
			case PROCEDURE:
				{
				alt185=1;
				}
				break;
			case FUNCTION:
				{
				alt185=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 185, 0, input);
				throw nvae;
			}
			switch (alt185) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( customAttribute )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==LBRACK) ) {
						alt180=1;
					}
					else if ( (LA180_0==PROCEDURE) ) {
						int LA180_2 = input.LA(2);
						if ( (synpred245_Delphi()) ) {
							alt180=1;
						}
					}
					switch (alt180) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11295);
							customAttribute524=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute524.getTree());
							}
							break;

					}

					string_literal525=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_procDeclHeading11299); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PROCEDURE.add(string_literal525);

					pushFollow(FOLLOW_ident_in_procDeclHeading11301);
					ident526=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident526.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:69: ( formalParameterSection )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==LPAREN) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:70: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11304);
							formalParameterSection527=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection527.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: PROCEDURE, formalParameterSection, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 426:30: -> ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:33: ^( 'procedure' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_PROCEDURE.nextNode(), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:47: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:71: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:426:88: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:32: ( customAttribute )? 'function' ident ( formalParameterSection )? ( ':' typeDecl )?
					{
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:32: ( customAttribute )?
					int alt182=2;
					int LA182_0 = input.LA(1);
					if ( (LA182_0==LBRACK) ) {
						alt182=1;
					}
					else if ( (LA182_0==FUNCTION) ) {
						int LA182_2 = input.LA(2);
						if ( (synpred248_Delphi()) ) {
							alt182=1;
						}
					}
					switch (alt182) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:33: customAttribute
							{
							pushFollow(FOLLOW_customAttribute_in_procDeclHeading11404);
							customAttribute528=customAttribute();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute528.getTree());
							}
							break;

					}

					string_literal529=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_procDeclHeading11408); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(string_literal529);

					pushFollow(FOLLOW_ident_in_procDeclHeading11410);
					ident530=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident530.getTree());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:68: ( formalParameterSection )?
					int alt183=2;
					int LA183_0 = input.LA(1);
					if ( (LA183_0==LPAREN) ) {
						alt183=1;
					}
					switch (alt183) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:69: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_procDeclHeading11413);
							formalParameterSection531=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_formalParameterSection.add(formalParameterSection531.getTree());
							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:94: ( ':' typeDecl )?
					int alt184=2;
					int LA184_0 = input.LA(1);
					if ( (LA184_0==COLON) ) {
						alt184=1;
					}
					switch (alt184) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:95: ':' typeDecl
							{
							char_literal532=(Token)match(input,COLON,FOLLOW_COLON_in_procDeclHeading11418); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(char_literal532);

							pushFollow(FOLLOW_typeDecl_in_procDeclHeading11420);
							typeDecl533=typeDecl();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl533.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: ident, formalParameterSection, FUNCTION, typeDecl
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 428:30: -> ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( typeDecl )? ) )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:33: ^( 'function' ^( TkFunctionName ident ) ^( TkFunctionArgs ( formalParameterSection )? ) ^( TkFunctionReturn ( typeDecl )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:46: ^( TkFunctionName ident )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionName, "TkFunctionName"), root_2);
						adaptor.addChild(root_2, stream_ident.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:70: ^( TkFunctionArgs ( formalParameterSection )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionArgs, "TkFunctionArgs"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:87: ( formalParameterSection )?
						if ( stream_formalParameterSection.hasNext() ) {
							adaptor.addChild(root_2, stream_formalParameterSection.nextTree());
						}
						stream_formalParameterSection.reset();

						adaptor.addChild(root_1, root_2);
						}

						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:114: ^( TkFunctionReturn ( typeDecl )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkFunctionReturn, "TkFunctionReturn"), root_2);
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:428:133: ( typeDecl )?
						if ( stream_typeDecl.hasNext() ) {
							adaptor.addChild(root_2, stream_typeDecl.nextTree());
						}
						stream_typeDecl.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 108, procDeclHeading_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procDeclHeading"


	public static class formalParameterSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:1: formalParameterSection : '(' ( formalParameterList )? ')' -> ( formalParameterList )? ;
	public final DelphiParser.formalParameterSection_return formalParameterSection() throws RecognitionException {
		DelphiParser.formalParameterSection_return retval = new DelphiParser.formalParameterSection_return();
		retval.start = input.LT(1);
		int formalParameterSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal534=null;
		Token char_literal536=null;
		ParserRuleReturnScope formalParameterList535 =null;

		Object char_literal534_tree=null;
		Object char_literal536_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_formalParameterList=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:30: ( '(' ( formalParameterList )? ')' -> ( formalParameterList )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:32: '(' ( formalParameterList )? ')'
			{
			char_literal534=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_formalParameterSection11525); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(char_literal534);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:36: ( formalParameterList )?
			int alt186=2;
			int LA186_0 = input.LA(1);
			if ( (LA186_0==EOF||LA186_0==ADD||(LA186_0 >= ANSISTRING && LA186_0 <= ARRAY)||(LA186_0 >= AT && LA186_0 <= AT2)||LA186_0==BREAK||LA186_0==CLASS||(LA186_0 >= CONST && LA186_0 <= ControlString)||(LA186_0 >= DEFAULT && LA186_0 <= DESTRUCTOR)||LA186_0==DISPINTERFACE||LA186_0==EXIT||LA186_0==EXPORT||LA186_0==FALSE||(LA186_0 >= FILE && LA186_0 <= FINAL)||LA186_0==FUNCTION||LA186_0==HELPER||LA186_0==IMPLEMENTS||(LA186_0 >= INDEX && LA186_0 <= INHERITED)||LA186_0==INTERFACE||LA186_0==LBRACK||(LA186_0 >= LOCAL && LA186_0 <= LPAREN)||(LA186_0 >= MESSAGE && LA186_0 <= MINUS)||LA186_0==NAME||LA186_0==NIL||LA186_0==NOT||LA186_0==OBJECT||LA186_0==OPERATOR||LA186_0==OUT||(LA186_0 >= PACKAGE && LA186_0 <= PACKED)||(LA186_0 >= PLUS && LA186_0 <= POINTER2)||LA186_0==PROCEDURE||LA186_0==PROPERTY||LA186_0==QuotedString||(LA186_0 >= READ && LA186_0 <= REGISTER)||LA186_0==REMOVE||LA186_0==SET||(LA186_0 >= STORED && LA186_0 <= STRING)||LA186_0==TRUE||LA186_0==TYPE||LA186_0==TkAsmHexNum||(LA186_0 >= TkHexNum && LA186_0 <= TkIntNum)||LA186_0==TkRealNum||LA186_0==VAR||LA186_0==VARIANT||LA186_0==WRITE||LA186_0==199) ) {
				alt186=1;
			}
			switch (alt186) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:37: formalParameterList
					{
					pushFollow(FOLLOW_formalParameterList_in_formalParameterSection11528);
					formalParameterList535=formalParameterList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameterList.add(formalParameterList535.getTree());
					}
					break;

			}

			char_literal536=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_formalParameterSection11532); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(char_literal536);

			// AST REWRITE
			// elements: formalParameterList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 430:63: -> ( formalParameterList )?
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:430:66: ( formalParameterList )?
				if ( stream_formalParameterList.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameterList.nextTree());
				}
				stream_formalParameterList.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 109, formalParameterSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterSection"


	public static class formalParameterList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameterList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:1: formalParameterList : formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* ;
	public final DelphiParser.formalParameterList_return formalParameterList() throws RecognitionException {
		DelphiParser.formalParameterList_return retval = new DelphiParser.formalParameterList_return();
		retval.start = input.LT(1);
		int formalParameterList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal538=null;
		ParserRuleReturnScope formalParameter537 =null;
		ParserRuleReturnScope formalParameter539 =null;

		Object char_literal538_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:30: ( formalParameter ( ';' formalParameter )* -> formalParameter ( formalParameter )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:32: formalParameter ( ';' formalParameter )*
			{
			pushFollow(FOLLOW_formalParameter_in_formalParameterList11585);
			formalParameter537=formalParameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter537.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:48: ( ';' formalParameter )*
			loop187:
			while (true) {
				int alt187=2;
				int LA187_0 = input.LA(1);
				if ( (LA187_0==SEMI) ) {
					alt187=1;
				}

				switch (alt187) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:49: ';' formalParameter
					{
					char_literal538=(Token)match(input,SEMI,FOLLOW_SEMI_in_formalParameterList11588); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMI.add(char_literal538);

					pushFollow(FOLLOW_formalParameter_in_formalParameterList11590);
					formalParameter539=formalParameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter539.getTree());
					}
					break;

				default :
					break loop187;
				}
			}

			// AST REWRITE
			// elements: formalParameter, formalParameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 432:71: -> formalParameter ( formalParameter )*
			{
				adaptor.addChild(root_0, stream_formalParameter.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:432:90: ( formalParameter )*
				while ( stream_formalParameter.hasNext() ) {
					adaptor.addChild(root_0, stream_formalParameter.nextTree());
				}
				stream_formalParameter.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 110, formalParameterList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameterList"


	public static class formalParameter_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "formalParameter"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:1: formalParameter : ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? ;
	public final DelphiParser.formalParameter_return formalParameter() throws RecognitionException {
		DelphiParser.formalParameter_return retval = new DelphiParser.formalParameter_return();
		retval.start = input.LT(1);
		int formalParameter_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal543=null;
		Token char_literal545=null;
		ParserRuleReturnScope customAttribute540 =null;
		ParserRuleReturnScope parmType541 =null;
		ParserRuleReturnScope identListFlat542 =null;
		ParserRuleReturnScope typeDecl544 =null;
		ParserRuleReturnScope expression546 =null;

		Object char_literal543_tree=null;
		Object char_literal545_tree=null;
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_customAttribute=new RewriteRuleSubtreeStream(adaptor,"rule customAttribute");
		RewriteRuleSubtreeStream stream_identListFlat=new RewriteRuleSubtreeStream(adaptor,"rule identListFlat");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_parmType=new RewriteRuleSubtreeStream(adaptor,"rule parmType");
		RewriteRuleSubtreeStream stream_typeDecl=new RewriteRuleSubtreeStream(adaptor,"rule typeDecl");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:30: ( ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )? -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:32: ( customAttribute )? ( parmType )? identListFlat ( ':' typeDecl )? ( '=' expression )?
			{
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:32: ( customAttribute )?
			int alt188=2;
			switch ( input.LA(1) ) {
				case LBRACK:
					{
					alt188=1;
					}
					break;
				case OUT:
					{
					int LA188_2 = input.LA(2);
					if ( (synpred253_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA188_3 = input.LA(2);
					if ( (synpred253_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case 199:
					{
					int LA188_4 = input.LA(2);
					if ( (synpred253_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case CONST:
				case VAR:
					{
					int LA188_5 = input.LA(2);
					if ( (synpred253_Delphi()) ) {
						alt188=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA188_6 = input.LA(2);
					if ( (synpred253_Delphi()) ) {
						alt188=1;
					}
					}
					break;
			}
			switch (alt188) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:33: customAttribute
					{
					pushFollow(FOLLOW_customAttribute_in_formalParameter11652);
					customAttribute540=customAttribute();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customAttribute.add(customAttribute540.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:51: ( parmType )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==OUT) ) {
				int LA189_1 = input.LA(2);
				if ( (LA189_1==ADD||LA189_1==ANSISTRING||LA189_1==AT||LA189_1==BREAK||(LA189_1 >= CONTAINS && LA189_1 <= CONTINUE)||(LA189_1 >= DEFAULT && LA189_1 <= DEPRECATED)||LA189_1==EXIT||LA189_1==EXPORT||LA189_1==FINAL||LA189_1==HELPER||LA189_1==IMPLEMENTS||LA189_1==INDEX||LA189_1==LOCAL||LA189_1==MESSAGE||LA189_1==NAME||LA189_1==OBJECT||LA189_1==OPERATOR||LA189_1==OUT||LA189_1==PACKAGE||LA189_1==POINTER||(LA189_1 >= READ && LA189_1 <= READONLY)||(LA189_1 >= REFERENCE && LA189_1 <= REGISTER)||LA189_1==REMOVE||(LA189_1 >= STORED && LA189_1 <= STRING)||LA189_1==TkIdentifier||LA189_1==VARIANT||LA189_1==WRITE||LA189_1==199) ) {
					alt189=1;
				}
			}
			else if ( (LA189_0==CONST||LA189_0==VAR) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:52: parmType
					{
					pushFollow(FOLLOW_parmType_in_formalParameter11657);
					parmType541=parmType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parmType.add(parmType541.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identListFlat_in_formalParameter11661);
			identListFlat542=identListFlat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identListFlat.add(identListFlat542.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:77: ( ':' typeDecl )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==COLON) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:78: ':' typeDecl
					{
					char_literal543=(Token)match(input,COLON,FOLLOW_COLON_in_formalParameter11664); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(char_literal543);

					pushFollow(FOLLOW_typeDecl_in_formalParameter11666);
					typeDecl544=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_typeDecl.add(typeDecl544.getTree());
					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:93: ( '=' expression )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==EQUAL) ) {
				alt191=1;
			}
			switch (alt191) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:94: '=' expression
					{
					char_literal545=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_formalParameter11671); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUAL.add(char_literal545);

					pushFollow(FOLLOW_expression_in_formalParameter11673);
					expression546=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression546.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: parmType, identListFlat, customAttribute, typeDecl
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 434:111: -> ( customAttribute )? ^( TkVariableIdents identListFlat ) ^( TkVariableType ( typeDecl )? ) ( ^( TkVariableParam parmType ) )?
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:114: ( customAttribute )?
				if ( stream_customAttribute.hasNext() ) {
					adaptor.addChild(root_0, stream_customAttribute.nextTree());
				}
				stream_customAttribute.reset();

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:133: ^( TkVariableIdents identListFlat )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableIdents, "TkVariableIdents"), root_1);
				adaptor.addChild(root_1, stream_identListFlat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:167: ^( TkVariableType ( typeDecl )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableType, "TkVariableType"), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:184: ( typeDecl )?
				if ( stream_typeDecl.hasNext() ) {
					adaptor.addChild(root_1, stream_typeDecl.nextTree());
				}
				stream_typeDecl.reset();

				adaptor.addChild(root_0, root_1);
				}

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:195: ( ^( TkVariableParam parmType ) )?
				if ( stream_parmType.hasNext() ) {
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:195: ^( TkVariableParam parmType )
					{
					Object root_1 = (Object)adaptor.nil();
					root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkVariableParam, "TkVariableParam"), root_1);
					adaptor.addChild(root_1, stream_parmType.nextTree());
					adaptor.addChild(root_0, root_1);
					}

				}
				stream_parmType.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 111, formalParameter_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "formalParameter"


	public static class parmType_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parmType"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:1: parmType : ( 'const' | 'var' | 'out' );
	public final DelphiParser.parmType_return parmType() throws RecognitionException {
		DelphiParser.parmType_return retval = new DelphiParser.parmType_return();
		retval.start = input.LT(1);
		int parmType_StartIndex = input.index();

		Object root_0 = null;

		Token set547=null;

		Object set547_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:437:30: ( 'const' | 'var' | 'out' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set547=input.LT(1);
			if ( input.LA(1)==CONST||input.LA(1)==OUT||input.LA(1)==VAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set547));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 112, parmType_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parmType"


	public static class methodBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodBody"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:1: methodBody : block ';' -> block ;
	public final DelphiParser.methodBody_return methodBody() throws RecognitionException {
		DelphiParser.methodBody_return retval = new DelphiParser.methodBody_return();
		retval.start = input.LT(1);
		int methodBody_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal549=null;
		ParserRuleReturnScope block548 =null;

		Object char_literal549_tree=null;
		RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:30: ( block ';' -> block )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:441:32: block ';'
			{
			pushFollow(FOLLOW_block_in_methodBody11896);
			block548=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_block.add(block548.getTree());
			char_literal549=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodBody11898); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMI.add(char_literal549);

			// AST REWRITE
			// elements: block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 441:42: -> block
			{
				adaptor.addChild(root_0, stream_block.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 113, methodBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodBody"


	public static class procBody_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procBody"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:1: procBody : block ';' ;
	public final DelphiParser.procBody_return procBody() throws RecognitionException {
		DelphiParser.procBody_return retval = new DelphiParser.procBody_return();
		retval.start = input.LT(1);
		int procBody_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal551=null;
		ParserRuleReturnScope block550 =null;

		Object char_literal551_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:30: ( block ';' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:443:32: block ';'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_block_in_procBody11959);
			block550=block();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, block550.getTree());

			char_literal551=(Token)match(input,SEMI,FOLLOW_SEMI_in_procBody11961); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal551_tree = (Object)adaptor.create(char_literal551);
			adaptor.addChild(root_0, char_literal551_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 114, procBody_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "procBody"


	public static class customAttribute_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttribute"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:1: customAttribute : customAttributeList ;
	public final DelphiParser.customAttribute_return customAttribute() throws RecognitionException {
		DelphiParser.customAttribute_return retval = new DelphiParser.customAttribute_return();
		retval.start = input.LT(1);
		int customAttribute_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeList552 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:30: ( customAttributeList )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:448:32: customAttributeList
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_customAttributeList_in_customAttribute12014);
			customAttributeList552=customAttributeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeList552.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 115, customAttribute_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttribute"


	public static class customAttributeList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:1: customAttributeList : ( customAttributeDecl )* ;
	public final DelphiParser.customAttributeList_return customAttributeList() throws RecognitionException {
		DelphiParser.customAttributeList_return retval = new DelphiParser.customAttributeList_return();
		retval.start = input.LT(1);
		int customAttributeList_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope customAttributeDecl553 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:30: ( ( customAttributeDecl )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:32: ( customAttributeDecl )*
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:32: ( customAttributeDecl )*
			loop192:
			while (true) {
				int alt192=2;
				int LA192_0 = input.LA(1);
				if ( (LA192_0==LBRACK) ) {
					int LA192_30 = input.LA(2);
					if ( (synpred259_Delphi()) ) {
						alt192=1;
					}

				}

				switch (alt192) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:33: customAttributeDecl
					{
					pushFollow(FOLLOW_customAttributeDecl_in_customAttributeList12061);
					customAttributeDecl553=customAttributeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, customAttributeDecl553.getTree());

					}
					break;

				default :
					break loop192;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 116, customAttributeList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeList"


	public static class customAttributeDecl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "customAttributeDecl"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:1: customAttributeDecl : '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' ) ;
	public final DelphiParser.customAttributeDecl_return customAttributeDecl() throws RecognitionException {
		DelphiParser.customAttributeDecl_return retval = new DelphiParser.customAttributeDecl_return();
		retval.start = input.LT(1);
		int customAttributeDecl_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal554=null;
		Token char_literal556=null;
		Token char_literal558=null;
		Token char_literal559=null;
		ParserRuleReturnScope namespacedQualifiedIdent555 =null;
		ParserRuleReturnScope expressionList557 =null;

		Object char_literal554_tree=null;
		Object char_literal556_tree=null;
		Object char_literal558_tree=null;
		Object char_literal559_tree=null;
		RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
		RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_namespacedQualifiedIdent=new RewriteRuleSubtreeStream(adaptor,"rule namespacedQualifiedIdent");
		RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:30: ( '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:32: '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']'
			{
			char_literal554=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_customAttributeDecl12109); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACK.add(char_literal554);

			pushFollow(FOLLOW_namespacedQualifiedIdent_in_customAttributeDecl12111);
			namespacedQualifiedIdent555=namespacedQualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_namespacedQualifiedIdent.add(namespacedQualifiedIdent555.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:61: ( '(' ( expressionList )? ')' )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==LPAREN) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:62: '(' ( expressionList )? ')'
					{
					char_literal556=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_customAttributeDecl12114); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(char_literal556);

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:66: ( expressionList )?
					int alt193=2;
					int LA193_0 = input.LA(1);
					if ( (LA193_0==ADD||LA193_0==ANSISTRING||(LA193_0 >= AT && LA193_0 <= AT2)||LA193_0==BREAK||(LA193_0 >= CONTAINS && LA193_0 <= ControlString)||(LA193_0 >= DEFAULT && LA193_0 <= DEPRECATED)||LA193_0==EXIT||LA193_0==EXPORT||LA193_0==FALSE||(LA193_0 >= FILE && LA193_0 <= FINAL)||LA193_0==FUNCTION||LA193_0==HELPER||LA193_0==IMPLEMENTS||(LA193_0 >= INDEX && LA193_0 <= INHERITED)||LA193_0==LBRACK||(LA193_0 >= LOCAL && LA193_0 <= LPAREN)||(LA193_0 >= MESSAGE && LA193_0 <= MINUS)||LA193_0==NAME||LA193_0==NIL||LA193_0==NOT||LA193_0==OBJECT||LA193_0==OPERATOR||LA193_0==OUT||LA193_0==PACKAGE||(LA193_0 >= PLUS && LA193_0 <= POINTER)||LA193_0==PROCEDURE||LA193_0==QuotedString||(LA193_0 >= READ && LA193_0 <= READONLY)||(LA193_0 >= REFERENCE && LA193_0 <= REGISTER)||LA193_0==REMOVE||(LA193_0 >= STORED && LA193_0 <= STRING)||LA193_0==TRUE||LA193_0==TkAsmHexNum||(LA193_0 >= TkHexNum && LA193_0 <= TkIntNum)||LA193_0==TkRealNum||LA193_0==VARIANT||LA193_0==WRITE||LA193_0==199) ) {
						alt193=1;
					}
					switch (alt193) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:67: expressionList
							{
							pushFollow(FOLLOW_expressionList_in_customAttributeDecl12117);
							expressionList557=expressionList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expressionList.add(expressionList557.getTree());
							}
							break;

					}

					char_literal558=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_customAttributeDecl12121); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(char_literal558);

					}
					break;

			}

			char_literal559=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_customAttributeDecl12125); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACK.add(char_literal559);

			// AST REWRITE
			// elements: LPAREN, RPAREN, RBRACK, namespacedQualifiedIdent, expressionList, LBRACK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 452:95: -> ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:98: ^( TkCustomAttribute '[' namespacedQualifiedIdent ( '(' ( expressionList )? ')' )? ']' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkCustomAttribute, "TkCustomAttribute"), root_1);
				adaptor.addChild(root_1, stream_LBRACK.nextNode());
				adaptor.addChild(root_1, stream_namespacedQualifiedIdent.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:147: ( '(' ( expressionList )? ')' )?
				if ( stream_LPAREN.hasNext()||stream_RPAREN.hasNext()||stream_expressionList.hasNext() ) {
					adaptor.addChild(root_1, stream_LPAREN.nextNode());
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:452:152: ( expressionList )?
					if ( stream_expressionList.hasNext() ) {
						adaptor.addChild(root_1, stream_expressionList.nextTree());
					}
					stream_expressionList.reset();

					adaptor.addChild(root_1, stream_RPAREN.nextNode());
				}
				stream_LPAREN.reset();
				stream_RPAREN.reset();
				stream_expressionList.reset();

				adaptor.addChild(root_1, stream_RBRACK.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 117, customAttributeDecl_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "customAttributeDecl"


	public static class expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:1: expression : ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relationalOperator simpleExpression )* ( '=' expression )? );
	public final DelphiParser.expression_return expression() throws RecognitionException {
		DelphiParser.expression_return retval = new DelphiParser.expression_return();
		retval.start = input.LT(1);
		int expression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal564=null;
		ParserRuleReturnScope anonymousExpression560 =null;
		ParserRuleReturnScope simpleExpression561 =null;
		ParserRuleReturnScope relationalOperator562 =null;
		ParserRuleReturnScope simpleExpression563 =null;
		ParserRuleReturnScope expression565 =null;

		Object char_literal564_tree=null;
		RewriteRuleSubtreeStream stream_anonymousExpression=new RewriteRuleSubtreeStream(adaptor,"rule anonymousExpression");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:30: ( anonymousExpression -> ^( TkAnonymousExpression anonymousExpression ) | simpleExpression ( relationalOperator simpleExpression )* ( '=' expression )? )
			int alt197=2;
			int LA197_0 = input.LA(1);
			if ( (LA197_0==FUNCTION||LA197_0==PROCEDURE) ) {
				alt197=1;
			}
			else if ( (LA197_0==ADD||LA197_0==ANSISTRING||(LA197_0 >= AT && LA197_0 <= AT2)||LA197_0==BREAK||(LA197_0 >= CONTAINS && LA197_0 <= ControlString)||(LA197_0 >= DEFAULT && LA197_0 <= DEPRECATED)||LA197_0==EXIT||LA197_0==EXPORT||LA197_0==FALSE||(LA197_0 >= FILE && LA197_0 <= FINAL)||LA197_0==HELPER||LA197_0==IMPLEMENTS||(LA197_0 >= INDEX && LA197_0 <= INHERITED)||LA197_0==LBRACK||(LA197_0 >= LOCAL && LA197_0 <= LPAREN)||(LA197_0 >= MESSAGE && LA197_0 <= MINUS)||LA197_0==NAME||LA197_0==NIL||LA197_0==NOT||LA197_0==OBJECT||LA197_0==OPERATOR||LA197_0==OUT||LA197_0==PACKAGE||(LA197_0 >= PLUS && LA197_0 <= POINTER)||LA197_0==QuotedString||(LA197_0 >= READ && LA197_0 <= READONLY)||(LA197_0 >= REFERENCE && LA197_0 <= REGISTER)||LA197_0==REMOVE||(LA197_0 >= STORED && LA197_0 <= STRING)||LA197_0==TRUE||LA197_0==TkAsmHexNum||(LA197_0 >= TkHexNum && LA197_0 <= TkIntNum)||LA197_0==TkRealNum||LA197_0==VARIANT||LA197_0==WRITE||LA197_0==199) ) {
				alt197=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 197, 0, input);
				throw nvae;
			}

			switch (alt197) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:32: anonymousExpression
					{
					pushFollow(FOLLOW_anonymousExpression_in_expression12209);
					anonymousExpression560=anonymousExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_anonymousExpression.add(anonymousExpression560.getTree());
					// AST REWRITE
					// elements: anonymousExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 458:52: -> ^( TkAnonymousExpression anonymousExpression )
					{
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:458:55: ^( TkAnonymousExpression anonymousExpression )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TkAnonymousExpression, "TkAnonymousExpression"), root_1);
						adaptor.addChild(root_1, stream_anonymousExpression.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:32: simpleExpression ( relationalOperator simpleExpression )* ( '=' expression )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleExpression_in_expression12250);
					simpleExpression561=simpleExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression561.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:49: ( relationalOperator simpleExpression )*
					loop195:
					while (true) {
						int alt195=2;
						alt195 = dfa195.predict(input);
						switch (alt195) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:50: relationalOperator simpleExpression
							{
							pushFollow(FOLLOW_relationalOperator_in_expression12253);
							relationalOperator562=relationalOperator();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, relationalOperator562.getTree());

							pushFollow(FOLLOW_simpleExpression_in_expression12255);
							simpleExpression563=simpleExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression563.getTree());

							}
							break;

						default :
							break loop195;
						}
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:88: ( '=' expression )?
					int alt196=2;
					alt196 = dfa196.predict(input);
					switch (alt196) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:89: '=' expression
							{
							char_literal564=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_expression12260); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal564_tree = (Object)adaptor.create(char_literal564);
							adaptor.addChild(root_0, char_literal564_tree);
							}

							pushFollow(FOLLOW_expression_in_expression12262);
							expression565=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression565.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 118, expression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class anonymousExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "anonymousExpression"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:1: anonymousExpression : ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block );
	public final DelphiParser.anonymousExpression_return anonymousExpression() throws RecognitionException {
		DelphiParser.anonymousExpression_return retval = new DelphiParser.anonymousExpression_return();
		retval.start = input.LT(1);
		int anonymousExpression_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal566=null;
		Token string_literal569=null;
		Token char_literal571=null;
		ParserRuleReturnScope formalParameterSection567 =null;
		ParserRuleReturnScope block568 =null;
		ParserRuleReturnScope formalParameterSection570 =null;
		ParserRuleReturnScope typeDecl572 =null;
		ParserRuleReturnScope block573 =null;

		Object string_literal566_tree=null;
		Object string_literal569_tree=null;
		Object char_literal571_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:30: ( 'procedure' ( formalParameterSection )? block | 'function' ( formalParameterSection )? ':' typeDecl block )
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==PROCEDURE) ) {
				alt200=1;
			}
			else if ( (LA200_0==FUNCTION) ) {
				alt200=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 200, 0, input);
				throw nvae;
			}

			switch (alt200) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:32: 'procedure' ( formalParameterSection )? block
					{
					root_0 = (Object)adaptor.nil();


					string_literal566=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_anonymousExpression12310); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal566_tree = (Object)adaptor.create(string_literal566);
					adaptor.addChild(root_0, string_literal566_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:44: ( formalParameterSection )?
					int alt198=2;
					alt198 = dfa198.predict(input);
					switch (alt198) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:45: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12313);
							formalParameterSection567=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection567.getTree());

							}
							break;

					}

					pushFollow(FOLLOW_block_in_anonymousExpression12317);
					block568=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block568.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:32: 'function' ( formalParameterSection )? ':' typeDecl block
					{
					root_0 = (Object)adaptor.nil();


					string_literal569=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_anonymousExpression12350); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal569_tree = (Object)adaptor.create(string_literal569);
					adaptor.addChild(root_0, string_literal569_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:43: ( formalParameterSection )?
					int alt199=2;
					int LA199_0 = input.LA(1);
					if ( (LA199_0==LPAREN) ) {
						alt199=1;
					}
					switch (alt199) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:462:44: formalParameterSection
							{
							pushFollow(FOLLOW_formalParameterSection_in_anonymousExpression12353);
							formalParameterSection570=formalParameterSection();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, formalParameterSection570.getTree());

							}
							break;

					}

					char_literal571=(Token)match(input,COLON,FOLLOW_COLON_in_anonymousExpression12357); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal571_tree = (Object)adaptor.create(char_literal571);
					adaptor.addChild(root_0, char_literal571_tree);
					}

					pushFollow(FOLLOW_typeDecl_in_anonymousExpression12359);
					typeDecl572=typeDecl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeDecl572.getTree());

					pushFollow(FOLLOW_block_in_anonymousExpression12361);
					block573=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block573.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 119, anonymousExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "anonymousExpression"


	public static class simpleExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleExpression"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:1: simpleExpression : term ( addOperator term )* ;
	public final DelphiParser.simpleExpression_return simpleExpression() throws RecognitionException {
		DelphiParser.simpleExpression_return retval = new DelphiParser.simpleExpression_return();
		retval.start = input.LT(1);
		int simpleExpression_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope term574 =null;
		ParserRuleReturnScope addOperator575 =null;
		ParserRuleReturnScope term576 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:30: ( term ( addOperator term )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:32: term ( addOperator term )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_term_in_simpleExpression12410);
			term574=term();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, term574.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:37: ( addOperator term )*
			loop201:
			while (true) {
				int alt201=2;
				alt201 = dfa201.predict(input);
				switch (alt201) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:38: addOperator term
					{
					pushFollow(FOLLOW_addOperator_in_simpleExpression12413);
					addOperator575=addOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, addOperator575.getTree());

					pushFollow(FOLLOW_term_in_simpleExpression12415);
					term576=term();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, term576.getTree());

					}
					break;

				default :
					break loop201;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 120, simpleExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleExpression"


	public static class term_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "term"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:1: term : factor ( multOperator factor )* ;
	public final DelphiParser.term_return term() throws RecognitionException {
		DelphiParser.term_return retval = new DelphiParser.term_return();
		retval.start = input.LT(1);
		int term_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope factor577 =null;
		ParserRuleReturnScope multOperator578 =null;
		ParserRuleReturnScope factor579 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:30: ( factor ( multOperator factor )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:32: factor ( multOperator factor )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor_in_term12478);
			factor577=factor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor577.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:39: ( multOperator factor )*
			loop202:
			while (true) {
				int alt202=2;
				int LA202_0 = input.LA(1);
				if ( (LA202_0==AND||LA202_0==DIV||LA202_0==MOD||(LA202_0 >= SHL && LA202_0 <= STAR)) ) {
					alt202=1;
				}

				switch (alt202) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:466:40: multOperator factor
					{
					pushFollow(FOLLOW_multOperator_in_term12481);
					multOperator578=multOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, multOperator578.getTree());

					pushFollow(FOLLOW_factor_in_term12483);
					factor579=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor579.getTree());

					}
					break;

				default :
					break loop202;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 121, term_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "term"


	public static class factor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:1: factor : ( atom | unaryOperator factor | 'inherited' ( factor )? );
	public final DelphiParser.factor_return factor() throws RecognitionException {
		DelphiParser.factor_return retval = new DelphiParser.factor_return();
		retval.start = input.LT(1);
		int factor_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal583=null;
		ParserRuleReturnScope atom580 =null;
		ParserRuleReturnScope unaryOperator581 =null;
		ParserRuleReturnScope factor582 =null;
		ParserRuleReturnScope factor584 =null;

		Object string_literal583_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:30: ( atom | unaryOperator factor | 'inherited' ( factor )? )
			int alt204=3;
			switch ( input.LA(1) ) {
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case ControlString:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FILE:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LBRACK:
			case LOCAL:
			case LPAREN:
			case MESSAGE:
			case NAME:
			case NIL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case POINTER:
			case QuotedString:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case TkAsmHexNum:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case TkRealNum:
			case VARIANT:
			case WRITE:
			case 199:
				{
				alt204=1;
				}
				break;
			case AT2:
			case MINUS:
			case NOT:
			case PLUS:
				{
				alt204=2;
				}
				break;
			case INHERITED:
				{
				alt204=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 204, 0, input);
				throw nvae;
			}
			switch (alt204) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:468:32: atom
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_atom_in_factor12544);
					atom580=atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, atom580.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:469:32: unaryOperator factor
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_unaryOperator_in_factor12577);
					unaryOperator581=unaryOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryOperator581.getTree());

					pushFollow(FOLLOW_factor_in_factor12579);
					factor582=factor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor582.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:32: 'inherited' ( factor )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal583=(Token)match(input,INHERITED,FOLLOW_INHERITED_in_factor12612); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal583_tree = (Object)adaptor.create(string_literal583);
					adaptor.addChild(root_0, string_literal583_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:44: ( factor )?
					int alt203=2;
					alt203 = dfa203.predict(input);
					switch (alt203) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:45: factor
							{
							pushFollow(FOLLOW_factor_in_factor12615);
							factor584=factor();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, factor584.getTree());

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 122, factor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "factor"


	public static class atom_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "atom"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:1: atom : particle ( particleItem )* ;
	public final DelphiParser.atom_return atom() throws RecognitionException {
		DelphiParser.atom_return retval = new DelphiParser.atom_return();
		retval.start = input.LT(1);
		int atom_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope particle585 =null;
		ParserRuleReturnScope particleItem586 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:30: ( particle ( particleItem )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:32: particle ( particleItem )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_particle_in_atom12678);
			particle585=particle();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, particle585.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:41: ( particleItem )*
			loop205:
			while (true) {
				int alt205=2;
				alt205 = dfa205.predict(input);
				switch (alt205) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:41: particleItem
					{
					pushFollow(FOLLOW_particleItem_in_atom12680);
					particleItem586=particleItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, particleItem586.getTree());

					}
					break;

				default :
					break loop205;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 123, atom_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "atom"


	public static class particle_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "particle"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:1: particle : ( intNum | realNum | TkAsmHexNum | stringFactor | ident | 'nil' | 'true' | 'false' | parenthesizedExpression | setLiteral | 'string' | 'file' );
	public final DelphiParser.particle_return particle() throws RecognitionException {
		DelphiParser.particle_return retval = new DelphiParser.particle_return();
		retval.start = input.LT(1);
		int particle_StartIndex = input.index();

		Object root_0 = null;

		Token TkAsmHexNum589=null;
		Token string_literal592=null;
		Token string_literal593=null;
		Token string_literal594=null;
		Token string_literal597=null;
		Token string_literal598=null;
		ParserRuleReturnScope intNum587 =null;
		ParserRuleReturnScope realNum588 =null;
		ParserRuleReturnScope stringFactor590 =null;
		ParserRuleReturnScope ident591 =null;
		ParserRuleReturnScope parenthesizedExpression595 =null;
		ParserRuleReturnScope setLiteral596 =null;

		Object TkAsmHexNum589_tree=null;
		Object string_literal592_tree=null;
		Object string_literal593_tree=null;
		Object string_literal594_tree=null;
		Object string_literal597_tree=null;
		Object string_literal598_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:30: ( intNum | realNum | TkAsmHexNum | stringFactor | ident | 'nil' | 'true' | 'false' | parenthesizedExpression | setLiteral | 'string' | 'file' )
			int alt206=12;
			switch ( input.LA(1) ) {
			case TkHexNum:
			case TkIntNum:
				{
				alt206=1;
				}
				break;
			case TkRealNum:
				{
				alt206=2;
				}
				break;
			case TkAsmHexNum:
				{
				alt206=3;
				}
				break;
			case ControlString:
			case QuotedString:
				{
				alt206=4;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case TkIdentifier:
			case VARIANT:
			case WRITE:
			case 199:
				{
				alt206=5;
				}
				break;
			case STRING:
				{
				int LA206_6 = input.LA(2);
				if ( (synpred278_Delphi()) ) {
					alt206=5;
				}
				else if ( (synpred284_Delphi()) ) {
					alt206=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 206, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NIL:
				{
				alt206=6;
				}
				break;
			case TRUE:
				{
				alt206=7;
				}
				break;
			case FALSE:
				{
				alt206=8;
				}
				break;
			case LPAREN:
				{
				alt206=9;
				}
				break;
			case LBRACK:
				{
				alt206=10;
				}
				break;
			case FILE:
				{
				alt206=12;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 206, 0, input);
				throw nvae;
			}
			switch (alt206) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:474:32: intNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_intNum_in_particle12738);
					intNum587=intNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, intNum587.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:475:32: realNum
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_realNum_in_particle12771);
					realNum588=realNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, realNum588.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:476:32: TkAsmHexNum
					{
					root_0 = (Object)adaptor.nil();


					TkAsmHexNum589=(Token)match(input,TkAsmHexNum,FOLLOW_TkAsmHexNum_in_particle12804); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkAsmHexNum589_tree = (Object)adaptor.create(TkAsmHexNum589);
					adaptor.addChild(root_0, TkAsmHexNum589_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:477:32: stringFactor
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_stringFactor_in_particle12837);
					stringFactor590=stringFactor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor590.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: ident
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ident_in_particle12870);
					ident591=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident591.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:479:32: 'nil'
					{
					root_0 = (Object)adaptor.nil();


					string_literal592=(Token)match(input,NIL,FOLLOW_NIL_in_particle12903); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal592_tree = (Object)adaptor.create(string_literal592);
					adaptor.addChild(root_0, string_literal592_tree);
					}

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:480:32: 'true'
					{
					root_0 = (Object)adaptor.nil();


					string_literal593=(Token)match(input,TRUE,FOLLOW_TRUE_in_particle12936); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal593_tree = (Object)adaptor.create(string_literal593);
					adaptor.addChild(root_0, string_literal593_tree);
					}

					}
					break;
				case 8 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:481:32: 'false'
					{
					root_0 = (Object)adaptor.nil();


					string_literal594=(Token)match(input,FALSE,FOLLOW_FALSE_in_particle12969); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal594_tree = (Object)adaptor.create(string_literal594);
					adaptor.addChild(root_0, string_literal594_tree);
					}

					}
					break;
				case 9 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:482:32: parenthesizedExpression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_parenthesizedExpression_in_particle13002);
					parenthesizedExpression595=parenthesizedExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, parenthesizedExpression595.getTree());

					}
					break;
				case 10 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:483:32: setLiteral
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_setLiteral_in_particle13035);
					setLiteral596=setLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setLiteral596.getTree());

					}
					break;
				case 11 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: 'string'
					{
					root_0 = (Object)adaptor.nil();


					string_literal597=(Token)match(input,STRING,FOLLOW_STRING_in_particle13068); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal597_tree = (Object)adaptor.create(string_literal597);
					adaptor.addChild(root_0, string_literal597_tree);
					}

					}
					break;
				case 12 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:485:32: 'file'
					{
					root_0 = (Object)adaptor.nil();


					string_literal598=(Token)match(input,FILE,FOLLOW_FILE_in_particle13101); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal598_tree = (Object)adaptor.create(string_literal598);
					adaptor.addChild(root_0, string_literal598_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 124, particle_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "particle"


	public static class particleItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "particleItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:1: particleItem : ( ( '.' | '@' ) extendedIdent | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '^' | '(' ( parameterExpression ( ',' )? )* ')' );
	public final DelphiParser.particleItem_return particleItem() throws RecognitionException {
		DelphiParser.particleItem_return retval = new DelphiParser.particleItem_return();
		retval.start = input.LT(1);
		int particleItem_StartIndex = input.index();

		Object root_0 = null;

		Token set599=null;
		Token char_literal601=null;
		Token char_literal603=null;
		Token char_literal605=null;
		Token char_literal606=null;
		Token char_literal608=null;
		Token char_literal609=null;
		Token char_literal610=null;
		Token char_literal612=null;
		Token char_literal613=null;
		ParserRuleReturnScope extendedIdent600 =null;
		ParserRuleReturnScope genericTypeIdent602 =null;
		ParserRuleReturnScope genericTypeIdent604 =null;
		ParserRuleReturnScope expressionList607 =null;
		ParserRuleReturnScope parameterExpression611 =null;

		Object set599_tree=null;
		Object char_literal601_tree=null;
		Object char_literal603_tree=null;
		Object char_literal605_tree=null;
		Object char_literal606_tree=null;
		Object char_literal608_tree=null;
		Object char_literal609_tree=null;
		Object char_literal610_tree=null;
		Object char_literal612_tree=null;
		Object char_literal613_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:30: ( ( '.' | '@' ) extendedIdent | ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' ) | '[' expressionList ']' | '^' | '(' ( parameterExpression ( ',' )? )* ')' )
			int alt210=5;
			switch ( input.LA(1) ) {
			case AT2:
			case DOT:
				{
				alt210=1;
				}
				break;
			case LT:
				{
				alt210=2;
				}
				break;
			case LBRACK:
				{
				alt210=3;
				}
				break;
			case POINTER2:
				{
				alt210=4;
				}
				break;
			case LPAREN:
				{
				alt210=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 210, 0, input);
				throw nvae;
			}
			switch (alt210) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:487:32: ( '.' | '@' ) extendedIdent
					{
					root_0 = (Object)adaptor.nil();


					set599=input.LT(1);
					if ( input.LA(1)==AT2||input.LA(1)==DOT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set599));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_extendedIdent_in_particleItem13162);
					extendedIdent600=extendedIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, extendedIdent600.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:32: ( '<' genericTypeIdent ( ',' genericTypeIdent )* '>' )
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:33: '<' genericTypeIdent ( ',' genericTypeIdent )* '>'
					{
					char_literal601=(Token)match(input,LT,FOLLOW_LT_in_particleItem13196); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal601_tree = (Object)adaptor.create(char_literal601);
					adaptor.addChild(root_0, char_literal601_tree);
					}

					pushFollow(FOLLOW_genericTypeIdent_in_particleItem13198);
					genericTypeIdent602=genericTypeIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent602.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:54: ( ',' genericTypeIdent )*
					loop207:
					while (true) {
						int alt207=2;
						int LA207_0 = input.LA(1);
						if ( (LA207_0==COMMA) ) {
							alt207=1;
						}

						switch (alt207) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:488:55: ',' genericTypeIdent
							{
							char_literal603=(Token)match(input,COMMA,FOLLOW_COMMA_in_particleItem13201); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal603_tree = (Object)adaptor.create(char_literal603);
							adaptor.addChild(root_0, char_literal603_tree);
							}

							pushFollow(FOLLOW_genericTypeIdent_in_particleItem13203);
							genericTypeIdent604=genericTypeIdent();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, genericTypeIdent604.getTree());

							}
							break;

						default :
							break loop207;
						}
					}

					char_literal605=(Token)match(input,GT,FOLLOW_GT_in_particleItem13207); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal605_tree = (Object)adaptor.create(char_literal605);
					adaptor.addChild(root_0, char_literal605_tree);
					}

					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:489:32: '[' expressionList ']'
					{
					root_0 = (Object)adaptor.nil();


					char_literal606=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_particleItem13241); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal606_tree = (Object)adaptor.create(char_literal606);
					adaptor.addChild(root_0, char_literal606_tree);
					}

					pushFollow(FOLLOW_expressionList_in_particleItem13243);
					expressionList607=expressionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList607.getTree());

					char_literal608=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_particleItem13245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal608_tree = (Object)adaptor.create(char_literal608);
					adaptor.addChild(root_0, char_literal608_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:490:32: '^'
					{
					root_0 = (Object)adaptor.nil();


					char_literal609=(Token)match(input,POINTER2,FOLLOW_POINTER2_in_particleItem13278); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal609_tree = (Object)adaptor.create(char_literal609);
					adaptor.addChild(root_0, char_literal609_tree);
					}

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:491:32: '(' ( parameterExpression ( ',' )? )* ')'
					{
					root_0 = (Object)adaptor.nil();


					char_literal610=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_particleItem13311); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal610_tree = (Object)adaptor.create(char_literal610);
					adaptor.addChild(root_0, char_literal610_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:491:36: ( parameterExpression ( ',' )? )*
					loop209:
					while (true) {
						int alt209=2;
						int LA209_0 = input.LA(1);
						if ( (LA209_0==ADD||LA209_0==ANSISTRING||(LA209_0 >= AT && LA209_0 <= AT2)||LA209_0==BREAK||(LA209_0 >= CONTAINS && LA209_0 <= ControlString)||(LA209_0 >= DEFAULT && LA209_0 <= DEPRECATED)||LA209_0==EXIT||LA209_0==EXPORT||LA209_0==FALSE||(LA209_0 >= FILE && LA209_0 <= FINAL)||LA209_0==FUNCTION||LA209_0==HELPER||LA209_0==IMPLEMENTS||(LA209_0 >= INDEX && LA209_0 <= INHERITED)||LA209_0==LBRACK||(LA209_0 >= LOCAL && LA209_0 <= LPAREN)||(LA209_0 >= MESSAGE && LA209_0 <= MINUS)||LA209_0==NAME||LA209_0==NIL||LA209_0==NOT||LA209_0==OBJECT||LA209_0==OPERATOR||LA209_0==OUT||LA209_0==PACKAGE||(LA209_0 >= PLUS && LA209_0 <= POINTER)||LA209_0==PROCEDURE||LA209_0==QuotedString||(LA209_0 >= READ && LA209_0 <= READONLY)||(LA209_0 >= REFERENCE && LA209_0 <= REGISTER)||LA209_0==REMOVE||(LA209_0 >= STORED && LA209_0 <= STRING)||LA209_0==TRUE||LA209_0==TkAsmHexNum||(LA209_0 >= TkHexNum && LA209_0 <= TkIntNum)||LA209_0==TkRealNum||LA209_0==VARIANT||LA209_0==WRITE||LA209_0==199) ) {
							alt209=1;
						}

						switch (alt209) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:491:37: parameterExpression ( ',' )?
							{
							pushFollow(FOLLOW_parameterExpression_in_particleItem13314);
							parameterExpression611=parameterExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, parameterExpression611.getTree());

							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:491:57: ( ',' )?
							int alt208=2;
							int LA208_0 = input.LA(1);
							if ( (LA208_0==COMMA) ) {
								alt208=1;
							}
							switch (alt208) {
								case 1 :
									// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:491:58: ','
									{
									char_literal612=(Token)match(input,COMMA,FOLLOW_COMMA_in_particleItem13317); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									char_literal612_tree = (Object)adaptor.create(char_literal612);
									adaptor.addChild(root_0, char_literal612_tree);
									}

									}
									break;

							}

							}
							break;

						default :
							break loop209;
						}
					}

					char_literal613=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_particleItem13323); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal613_tree = (Object)adaptor.create(char_literal613);
					adaptor.addChild(root_0, char_literal613_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 125, particleItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "particleItem"


	public static class extendedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "extendedIdent"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:1: extendedIdent : ident ;
	public final DelphiParser.extendedIdent_return extendedIdent() throws RecognitionException {
		DelphiParser.extendedIdent_return retval = new DelphiParser.extendedIdent_return();
		retval.start = input.LT(1);
		int extendedIdent_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope ident614 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:30: ( ident )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:493:32: ident
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_extendedIdent13375);
			ident614=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident614.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 126, extendedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "extendedIdent"


	public static class expressionList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expressionList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:1: expressionList : ( expression ( ',' )? )+ ;
	public final DelphiParser.expressionList_return expressionList() throws RecognitionException {
		DelphiParser.expressionList_return retval = new DelphiParser.expressionList_return();
		retval.start = input.LT(1);
		int expressionList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal616=null;
		ParserRuleReturnScope expression615 =null;

		Object char_literal616_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:30: ( ( expression ( ',' )? )+ )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: ( expression ( ',' )? )+
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:32: ( expression ( ',' )? )+
			int cnt212=0;
			loop212:
			while (true) {
				int alt212=2;
				int LA212_0 = input.LA(1);
				if ( (LA212_0==ADD||LA212_0==ANSISTRING||(LA212_0 >= AT && LA212_0 <= AT2)||LA212_0==BREAK||(LA212_0 >= CONTAINS && LA212_0 <= ControlString)||(LA212_0 >= DEFAULT && LA212_0 <= DEPRECATED)||LA212_0==EXIT||LA212_0==EXPORT||LA212_0==FALSE||(LA212_0 >= FILE && LA212_0 <= FINAL)||LA212_0==FUNCTION||LA212_0==HELPER||LA212_0==IMPLEMENTS||(LA212_0 >= INDEX && LA212_0 <= INHERITED)||LA212_0==LBRACK||(LA212_0 >= LOCAL && LA212_0 <= LPAREN)||(LA212_0 >= MESSAGE && LA212_0 <= MINUS)||LA212_0==NAME||LA212_0==NIL||LA212_0==NOT||LA212_0==OBJECT||LA212_0==OPERATOR||LA212_0==OUT||LA212_0==PACKAGE||(LA212_0 >= PLUS && LA212_0 <= POINTER)||LA212_0==PROCEDURE||LA212_0==QuotedString||(LA212_0 >= READ && LA212_0 <= READONLY)||(LA212_0 >= REFERENCE && LA212_0 <= REGISTER)||LA212_0==REMOVE||(LA212_0 >= STORED && LA212_0 <= STRING)||LA212_0==TRUE||LA212_0==TkAsmHexNum||(LA212_0 >= TkHexNum && LA212_0 <= TkIntNum)||LA212_0==TkRealNum||LA212_0==VARIANT||LA212_0==WRITE||LA212_0==199) ) {
					alt212=1;
				}

				switch (alt212) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:33: expression ( ',' )?
					{
					pushFollow(FOLLOW_expression_in_expressionList13428);
					expression615=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression615.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:44: ( ',' )?
					int alt211=2;
					int LA211_0 = input.LA(1);
					if ( (LA211_0==COMMA) ) {
						alt211=1;
					}
					switch (alt211) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:495:45: ','
							{
							char_literal616=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList13431); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal616_tree = (Object)adaptor.create(char_literal616);
							adaptor.addChild(root_0, char_literal616_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					if ( cnt212 >= 1 ) break loop212;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(212, input);
					throw eee;
				}
				cnt212++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 127, expressionList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expressionList"


	public static class parameterExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parameterExpression"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:1: parameterExpression : expression ( ':' expression ( ':' expression )? )? ;
	public final DelphiParser.parameterExpression_return parameterExpression() throws RecognitionException {
		DelphiParser.parameterExpression_return retval = new DelphiParser.parameterExpression_return();
		retval.start = input.LT(1);
		int parameterExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal618=null;
		Token char_literal620=null;
		ParserRuleReturnScope expression617 =null;
		ParserRuleReturnScope expression619 =null;
		ParserRuleReturnScope expression621 =null;

		Object char_literal618_tree=null;
		Object char_literal620_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:30: ( expression ( ':' expression ( ':' expression )? )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:32: expression ( ':' expression ( ':' expression )? )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_parameterExpression13481);
			expression617=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression617.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:43: ( ':' expression ( ':' expression )? )?
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==COLON) ) {
				alt214=1;
			}
			switch (alt214) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:44: ':' expression ( ':' expression )?
					{
					char_literal618=(Token)match(input,COLON,FOLLOW_COLON_in_parameterExpression13484); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal618_tree = (Object)adaptor.create(char_literal618);
					adaptor.addChild(root_0, char_literal618_tree);
					}

					pushFollow(FOLLOW_expression_in_parameterExpression13486);
					expression619=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression619.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:59: ( ':' expression )?
					int alt213=2;
					int LA213_0 = input.LA(1);
					if ( (LA213_0==COLON) ) {
						alt213=1;
					}
					switch (alt213) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:497:60: ':' expression
							{
							char_literal620=(Token)match(input,COLON,FOLLOW_COLON_in_parameterExpression13489); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal620_tree = (Object)adaptor.create(char_literal620);
							adaptor.addChild(root_0, char_literal620_tree);
							}

							pushFollow(FOLLOW_expression_in_parameterExpression13491);
							expression621=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression621.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 128, parameterExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parameterExpression"


	public static class stringFactor_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "stringFactor"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:1: stringFactor : ( ControlString ( QuotedString ControlString )* ( QuotedString )? | QuotedString ( ControlString QuotedString )* ( ControlString )? );
	public final DelphiParser.stringFactor_return stringFactor() throws RecognitionException {
		DelphiParser.stringFactor_return retval = new DelphiParser.stringFactor_return();
		retval.start = input.LT(1);
		int stringFactor_StartIndex = input.index();

		Object root_0 = null;

		Token ControlString622=null;
		Token QuotedString623=null;
		Token ControlString624=null;
		Token QuotedString625=null;
		Token QuotedString626=null;
		Token ControlString627=null;
		Token QuotedString628=null;
		Token ControlString629=null;

		Object ControlString622_tree=null;
		Object QuotedString623_tree=null;
		Object ControlString624_tree=null;
		Object QuotedString625_tree=null;
		Object QuotedString626_tree=null;
		Object ControlString627_tree=null;
		Object QuotedString628_tree=null;
		Object ControlString629_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:30: ( ControlString ( QuotedString ControlString )* ( QuotedString )? | QuotedString ( ControlString QuotedString )* ( ControlString )? )
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==ControlString) ) {
				alt219=1;
			}
			else if ( (LA219_0==QuotedString) ) {
				alt219=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}

			switch (alt219) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:32: ControlString ( QuotedString ControlString )* ( QuotedString )?
					{
					root_0 = (Object)adaptor.nil();


					ControlString622=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13548); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ControlString622_tree = (Object)adaptor.create(ControlString622);
					adaptor.addChild(root_0, ControlString622_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:46: ( QuotedString ControlString )*
					loop215:
					while (true) {
						int alt215=2;
						int LA215_0 = input.LA(1);
						if ( (LA215_0==QuotedString) ) {
							int LA215_1 = input.LA(2);
							if ( (LA215_1==ControlString) ) {
								int LA215_3 = input.LA(3);
								if ( (synpred297_Delphi()) ) {
									alt215=1;
								}

							}

						}

						switch (alt215) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:47: QuotedString ControlString
							{
							QuotedString623=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13551); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString623_tree = (Object)adaptor.create(QuotedString623);
							adaptor.addChild(root_0, QuotedString623_tree);
							}

							ControlString624=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13553); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString624_tree = (Object)adaptor.create(ControlString624);
							adaptor.addChild(root_0, ControlString624_tree);
							}

							}
							break;

						default :
							break loop215;
						}
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:76: ( QuotedString )?
					int alt216=2;
					int LA216_0 = input.LA(1);
					if ( (LA216_0==QuotedString) ) {
						int LA216_1 = input.LA(2);
						if ( (synpred298_Delphi()) ) {
							alt216=1;
						}
					}
					switch (alt216) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:77: QuotedString
							{
							QuotedString625=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13558); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString625_tree = (Object)adaptor.create(QuotedString625);
							adaptor.addChild(root_0, QuotedString625_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:32: QuotedString ( ControlString QuotedString )* ( ControlString )?
					{
					root_0 = (Object)adaptor.nil();


					QuotedString626=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13593); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QuotedString626_tree = (Object)adaptor.create(QuotedString626);
					adaptor.addChild(root_0, QuotedString626_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:45: ( ControlString QuotedString )*
					loop217:
					while (true) {
						int alt217=2;
						int LA217_0 = input.LA(1);
						if ( (LA217_0==ControlString) ) {
							int LA217_1 = input.LA(2);
							if ( (LA217_1==QuotedString) ) {
								int LA217_3 = input.LA(3);
								if ( (synpred300_Delphi()) ) {
									alt217=1;
								}

							}

						}

						switch (alt217) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:46: ControlString QuotedString
							{
							ControlString627=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13596); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString627_tree = (Object)adaptor.create(ControlString627);
							adaptor.addChild(root_0, ControlString627_tree);
							}

							QuotedString628=(Token)match(input,QuotedString,FOLLOW_QuotedString_in_stringFactor13598); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							QuotedString628_tree = (Object)adaptor.create(QuotedString628);
							adaptor.addChild(root_0, QuotedString628_tree);
							}

							}
							break;

						default :
							break loop217;
						}
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:75: ( ControlString )?
					int alt218=2;
					int LA218_0 = input.LA(1);
					if ( (LA218_0==ControlString) ) {
						int LA218_1 = input.LA(2);
						if ( (synpred301_Delphi()) ) {
							alt218=1;
						}
					}
					switch (alt218) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:76: ControlString
							{
							ControlString629=(Token)match(input,ControlString,FOLLOW_ControlString_in_stringFactor13603); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ControlString629_tree = (Object)adaptor.create(ControlString629);
							adaptor.addChild(root_0, ControlString629_tree);
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 129, stringFactor_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "stringFactor"


	public static class parenthesizedExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parenthesizedExpression"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:502:1: parenthesizedExpression : '(' expression ')' ;
	public final DelphiParser.parenthesizedExpression_return parenthesizedExpression() throws RecognitionException {
		DelphiParser.parenthesizedExpression_return retval = new DelphiParser.parenthesizedExpression_return();
		retval.start = input.LT(1);
		int parenthesizedExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal630=null;
		Token char_literal632=null;
		ParserRuleReturnScope expression631 =null;

		Object char_literal630_tree=null;
		Object char_literal632_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:502:30: ( '(' expression ')' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:502:32: '(' expression ')'
			{
			root_0 = (Object)adaptor.nil();


			char_literal630=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parenthesizedExpression13647); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal630_tree = (Object)adaptor.create(char_literal630);
			adaptor.addChild(root_0, char_literal630_tree);
			}

			pushFollow(FOLLOW_expression_in_parenthesizedExpression13649);
			expression631=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression631.getTree());

			char_literal632=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parenthesizedExpression13651); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal632_tree = (Object)adaptor.create(char_literal632);
			adaptor.addChild(root_0, char_literal632_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 130, parenthesizedExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "parenthesizedExpression"


	public static class setLiteral_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "setLiteral"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:504:1: setLiteral : '[' ( expressionOrRangeList )? ']' ;
	public final DelphiParser.setLiteral_return setLiteral() throws RecognitionException {
		DelphiParser.setLiteral_return retval = new DelphiParser.setLiteral_return();
		retval.start = input.LT(1);
		int setLiteral_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal633=null;
		Token char_literal635=null;
		ParserRuleReturnScope expressionOrRangeList634 =null;

		Object char_literal633_tree=null;
		Object char_literal635_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:504:30: ( '[' ( expressionOrRangeList )? ']' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:504:32: '[' ( expressionOrRangeList )? ']'
			{
			root_0 = (Object)adaptor.nil();


			char_literal633=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_setLiteral13706); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal633_tree = (Object)adaptor.create(char_literal633);
			adaptor.addChild(root_0, char_literal633_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:504:36: ( expressionOrRangeList )?
			int alt220=2;
			int LA220_0 = input.LA(1);
			if ( (LA220_0==ADD||LA220_0==ANSISTRING||(LA220_0 >= AT && LA220_0 <= AT2)||LA220_0==BREAK||(LA220_0 >= CONTAINS && LA220_0 <= ControlString)||(LA220_0 >= DEFAULT && LA220_0 <= DEPRECATED)||LA220_0==EXIT||LA220_0==EXPORT||LA220_0==FALSE||(LA220_0 >= FILE && LA220_0 <= FINAL)||LA220_0==HELPER||LA220_0==IMPLEMENTS||(LA220_0 >= INDEX && LA220_0 <= INHERITED)||LA220_0==LBRACK||(LA220_0 >= LOCAL && LA220_0 <= LPAREN)||(LA220_0 >= MESSAGE && LA220_0 <= MINUS)||LA220_0==NAME||LA220_0==NIL||LA220_0==NOT||LA220_0==OBJECT||LA220_0==OPERATOR||LA220_0==OUT||LA220_0==PACKAGE||(LA220_0 >= PLUS && LA220_0 <= POINTER)||LA220_0==QuotedString||(LA220_0 >= READ && LA220_0 <= READONLY)||(LA220_0 >= REFERENCE && LA220_0 <= REGISTER)||LA220_0==REMOVE||(LA220_0 >= STORED && LA220_0 <= STRING)||LA220_0==TRUE||LA220_0==TkAsmHexNum||(LA220_0 >= TkHexNum && LA220_0 <= TkIntNum)||LA220_0==TkRealNum||LA220_0==VARIANT||LA220_0==WRITE||LA220_0==199) ) {
				alt220=1;
			}
			switch (alt220) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:504:37: expressionOrRangeList
					{
					pushFollow(FOLLOW_expressionOrRangeList_in_setLiteral13709);
					expressionOrRangeList634=expressionOrRangeList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionOrRangeList634.getTree());

					}
					break;

			}

			char_literal635=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_setLiteral13713); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal635_tree = (Object)adaptor.create(char_literal635);
			adaptor.addChild(root_0, char_literal635_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 131, setLiteral_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "setLiteral"


	public static class expressionOrRangeList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expressionOrRangeList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:1: expressionOrRangeList : ( expressionOrRange ( ',' )? )+ ;
	public final DelphiParser.expressionOrRangeList_return expressionOrRangeList() throws RecognitionException {
		DelphiParser.expressionOrRangeList_return retval = new DelphiParser.expressionOrRangeList_return();
		retval.start = input.LT(1);
		int expressionOrRangeList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal637=null;
		ParserRuleReturnScope expressionOrRange636 =null;

		Object char_literal637_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:30: ( ( expressionOrRange ( ',' )? )+ )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:32: ( expressionOrRange ( ',' )? )+
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:32: ( expressionOrRange ( ',' )? )+
			int cnt222=0;
			loop222:
			while (true) {
				int alt222=2;
				int LA222_0 = input.LA(1);
				if ( (LA222_0==ADD||LA222_0==ANSISTRING||(LA222_0 >= AT && LA222_0 <= AT2)||LA222_0==BREAK||(LA222_0 >= CONTAINS && LA222_0 <= ControlString)||(LA222_0 >= DEFAULT && LA222_0 <= DEPRECATED)||LA222_0==EXIT||LA222_0==EXPORT||LA222_0==FALSE||(LA222_0 >= FILE && LA222_0 <= FINAL)||LA222_0==HELPER||LA222_0==IMPLEMENTS||(LA222_0 >= INDEX && LA222_0 <= INHERITED)||LA222_0==LBRACK||(LA222_0 >= LOCAL && LA222_0 <= LPAREN)||(LA222_0 >= MESSAGE && LA222_0 <= MINUS)||LA222_0==NAME||LA222_0==NIL||LA222_0==NOT||LA222_0==OBJECT||LA222_0==OPERATOR||LA222_0==OUT||LA222_0==PACKAGE||(LA222_0 >= PLUS && LA222_0 <= POINTER)||LA222_0==QuotedString||(LA222_0 >= READ && LA222_0 <= READONLY)||(LA222_0 >= REFERENCE && LA222_0 <= REGISTER)||LA222_0==REMOVE||(LA222_0 >= STORED && LA222_0 <= STRING)||LA222_0==TRUE||LA222_0==TkAsmHexNum||(LA222_0 >= TkHexNum && LA222_0 <= TkIntNum)||LA222_0==TkRealNum||LA222_0==VARIANT||LA222_0==WRITE||LA222_0==199) ) {
					alt222=1;
				}

				switch (alt222) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:33: expressionOrRange ( ',' )?
					{
					pushFollow(FOLLOW_expressionOrRange_in_expressionOrRangeList13758);
					expressionOrRange636=expressionOrRange();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionOrRange636.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:51: ( ',' )?
					int alt221=2;
					int LA221_0 = input.LA(1);
					if ( (LA221_0==COMMA) ) {
						alt221=1;
					}
					switch (alt221) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:506:52: ','
							{
							char_literal637=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionOrRangeList13761); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal637_tree = (Object)adaptor.create(char_literal637);
							adaptor.addChild(root_0, char_literal637_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					if ( cnt222 >= 1 ) break loop222;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(222, input);
					throw eee;
				}
				cnt222++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 132, expressionOrRangeList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expressionOrRangeList"


	public static class expressionOrRange_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expressionOrRange"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:508:1: expressionOrRange : simpleExpression ( '..' simpleExpression )? ;
	public final DelphiParser.expressionOrRange_return expressionOrRange() throws RecognitionException {
		DelphiParser.expressionOrRange_return retval = new DelphiParser.expressionOrRange_return();
		retval.start = input.LT(1);
		int expressionOrRange_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal639=null;
		ParserRuleReturnScope simpleExpression638 =null;
		ParserRuleReturnScope simpleExpression640 =null;

		Object string_literal639_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:508:30: ( simpleExpression ( '..' simpleExpression )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:508:32: simpleExpression ( '..' simpleExpression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_simpleExpression_in_expressionOrRange13813);
			simpleExpression638=simpleExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression638.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:508:49: ( '..' simpleExpression )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==DOTDOT) ) {
				alt223=1;
			}
			switch (alt223) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:508:50: '..' simpleExpression
					{
					string_literal639=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_expressionOrRange13816); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal639_tree = (Object)adaptor.create(string_literal639);
					adaptor.addChild(root_0, string_literal639_tree);
					}

					pushFollow(FOLLOW_simpleExpression_in_expressionOrRange13818);
					simpleExpression640=simpleExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpression640.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 133, expressionOrRange_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "expressionOrRange"


	public static class designator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "designator"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:510:1: designator : factor ;
	public final DelphiParser.designator_return designator() throws RecognitionException {
		DelphiParser.designator_return retval = new DelphiParser.designator_return();
		retval.start = input.LT(1);
		int designator_StartIndex = input.index();

		Object root_0 = null;

		ParserRuleReturnScope factor641 =null;


		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:510:30: ( factor )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:510:32: factor
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor_in_designator13875);
			factor641=factor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor641.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 134, designator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "designator"


	public static class addOperator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "addOperator"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:512:1: addOperator : ( '+' | '-' | 'or' | 'xor' );
	public final DelphiParser.addOperator_return addOperator() throws RecognitionException {
		DelphiParser.addOperator_return retval = new DelphiParser.addOperator_return();
		retval.start = input.LT(1);
		int addOperator_StartIndex = input.index();

		Object root_0 = null;

		Token set642=null;

		Object set642_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:512:30: ( '+' | '-' | 'or' | 'xor' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set642=input.LT(1);
			if ( input.LA(1)==MINUS||input.LA(1)==OR||input.LA(1)==PLUS||input.LA(1)==XOR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set642));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 135, addOperator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "addOperator"


	public static class multOperator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "multOperator"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:517:1: multOperator : ( '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' );
	public final DelphiParser.multOperator_return multOperator() throws RecognitionException {
		DelphiParser.multOperator_return retval = new DelphiParser.multOperator_return();
		retval.start = input.LT(1);
		int multOperator_StartIndex = input.index();

		Object root_0 = null;

		Token set643=null;

		Object set643_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:517:30: ( '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set643=input.LT(1);
			if ( input.LA(1)==AND||input.LA(1)==DIV||input.LA(1)==MOD||(input.LA(1) >= SHL && input.LA(1) <= STAR) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set643));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 136, multOperator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "multOperator"


	public static class unaryOperator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unaryOperator"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:525:1: unaryOperator : ( 'not' | '+' | '-' | '@' );
	public final DelphiParser.unaryOperator_return unaryOperator() throws RecognitionException {
		DelphiParser.unaryOperator_return retval = new DelphiParser.unaryOperator_return();
		retval.start = input.LT(1);
		int unaryOperator_StartIndex = input.index();

		Object root_0 = null;

		Token set644=null;

		Object set644_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:525:30: ( 'not' | '+' | '-' | '@' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set644=input.LT(1);
			if ( input.LA(1)==AT2||input.LA(1)==MINUS||input.LA(1)==NOT||input.LA(1)==PLUS ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set644));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 137, unaryOperator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "unaryOperator"


	public static class relationalOperator_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "relationalOperator"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:530:1: relationalOperator : ( '=' | '>' | '<' | '<=' | '>=' | '<>' | 'in' | 'is' | 'as' );
	public final DelphiParser.relationalOperator_return relationalOperator() throws RecognitionException {
		DelphiParser.relationalOperator_return retval = new DelphiParser.relationalOperator_return();
		retval.start = input.LT(1);
		int relationalOperator_StartIndex = input.index();

		Object root_0 = null;

		Token set645=null;

		Object set645_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:530:30: ( '=' | '>' | '<' | '<=' | '>=' | '<>' | 'in' | 'is' | 'as' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set645=input.LT(1);
			if ( input.LA(1)==AS||input.LA(1)==EQUAL||input.LA(1)==GE||input.LA(1)==GT||input.LA(1)==IN||input.LA(1)==IS||input.LA(1)==LE||input.LA(1)==LT||input.LA(1)==NOT_EQUAL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set645));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 138, relationalOperator_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "relationalOperator"


	public static class statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:1: statement : ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement );
	public final DelphiParser.statement_return statement() throws RecognitionException {
		DelphiParser.statement_return retval = new DelphiParser.statement_return();
		retval.start = input.LT(1);
		int statement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal657=null;
		ParserRuleReturnScope ifStatement646 =null;
		ParserRuleReturnScope caseStatement647 =null;
		ParserRuleReturnScope repeatStatement648 =null;
		ParserRuleReturnScope whileStatement649 =null;
		ParserRuleReturnScope forStatement650 =null;
		ParserRuleReturnScope withStatement651 =null;
		ParserRuleReturnScope tryStatement652 =null;
		ParserRuleReturnScope raiseStatement653 =null;
		ParserRuleReturnScope assemblerStatement654 =null;
		ParserRuleReturnScope compoundStatement655 =null;
		ParserRuleReturnScope label656 =null;
		ParserRuleReturnScope statement658 =null;
		ParserRuleReturnScope simpleStatement659 =null;

		Object char_literal657_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:30: ( ifStatement | caseStatement | repeatStatement | whileStatement | forStatement | withStatement | tryStatement | raiseStatement | assemblerStatement | compoundStatement | label ':' statement | simpleStatement )
			int alt224=12;
			switch ( input.LA(1) ) {
			case IF:
				{
				alt224=1;
				}
				break;
			case CASE:
				{
				alt224=2;
				}
				break;
			case REPEAT:
				{
				alt224=3;
				}
				break;
			case WHILE:
				{
				alt224=4;
				}
				break;
			case FOR:
				{
				alt224=5;
				}
				break;
			case WITH:
				{
				alt224=6;
				}
				break;
			case TRY:
				{
				alt224=7;
				}
				break;
			case RAISE:
				{
				alt224=8;
				}
				break;
			case ASM:
				{
				alt224=9;
				}
				break;
			case BEGIN:
				{
				alt224=10;
				}
				break;
			case TkIdentifier:
				{
				int LA224_11 = input.LA(2);
				if ( (LA224_11==COLON) ) {
					alt224=11;
				}
				else if ( (LA224_11==EOF||LA224_11==ADD||LA224_11==ANSISTRING||(LA224_11 >= ASSIGN && LA224_11 <= AT2)||LA224_11==BREAK||(LA224_11 >= CONTAINS && LA224_11 <= ControlString)||(LA224_11 >= DEFAULT && LA224_11 <= DEPRECATED)||LA224_11==DOT||(LA224_11 >= ELSE && LA224_11 <= END)||(LA224_11 >= EXCEPT && LA224_11 <= EXIT)||LA224_11==EXPORT||LA224_11==FALSE||(LA224_11 >= FILE && LA224_11 <= FINALLY)||LA224_11==FUNCTION||LA224_11==HELPER||LA224_11==IMPLEMENTS||(LA224_11 >= INDEX && LA224_11 <= INHERITED)||LA224_11==LBRACK||(LA224_11 >= LOCAL && LA224_11 <= MINUS)||LA224_11==NAME||LA224_11==NIL||LA224_11==NOT||LA224_11==OBJECT||(LA224_11 >= ON && LA224_11 <= OPERATOR)||LA224_11==OUT||LA224_11==PACKAGE||(LA224_11 >= PLUS && LA224_11 <= POINTER2)||LA224_11==PROCEDURE||LA224_11==QuotedString||(LA224_11 >= READ && LA224_11 <= READONLY)||(LA224_11 >= REFERENCE && LA224_11 <= REGISTER)||LA224_11==REMOVE||LA224_11==SEMI||(LA224_11 >= STORED && LA224_11 <= STRING)||LA224_11==TRUE||LA224_11==TkAsmHexNum||(LA224_11 >= TkHexNum && LA224_11 <= TkIntNum)||LA224_11==TkRealNum||LA224_11==UNTIL||LA224_11==VARIANT||LA224_11==WRITE||LA224_11==199) ) {
					alt224=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 224, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIntNum:
				{
				int LA224_12 = input.LA(2);
				if ( (LA224_12==COLON) ) {
					alt224=11;
				}
				else if ( (LA224_12==EOF||LA224_12==ADD||LA224_12==ANSISTRING||(LA224_12 >= ASSIGN && LA224_12 <= AT2)||LA224_12==BREAK||(LA224_12 >= CONTAINS && LA224_12 <= ControlString)||(LA224_12 >= DEFAULT && LA224_12 <= DEPRECATED)||LA224_12==DOT||(LA224_12 >= ELSE && LA224_12 <= END)||(LA224_12 >= EXCEPT && LA224_12 <= EXIT)||LA224_12==EXPORT||LA224_12==FALSE||(LA224_12 >= FILE && LA224_12 <= FINALLY)||LA224_12==FUNCTION||LA224_12==HELPER||LA224_12==IMPLEMENTS||(LA224_12 >= INDEX && LA224_12 <= INHERITED)||LA224_12==LBRACK||(LA224_12 >= LOCAL && LA224_12 <= MINUS)||LA224_12==NAME||LA224_12==NIL||LA224_12==NOT||LA224_12==OBJECT||(LA224_12 >= ON && LA224_12 <= OPERATOR)||LA224_12==OUT||LA224_12==PACKAGE||(LA224_12 >= PLUS && LA224_12 <= POINTER2)||LA224_12==PROCEDURE||LA224_12==QuotedString||(LA224_12 >= READ && LA224_12 <= READONLY)||(LA224_12 >= REFERENCE && LA224_12 <= REGISTER)||LA224_12==REMOVE||LA224_12==SEMI||(LA224_12 >= STORED && LA224_12 <= STRING)||LA224_12==TRUE||LA224_12==TkAsmHexNum||(LA224_12 >= TkHexNum && LA224_12 <= TkIntNum)||LA224_12==TkRealNum||LA224_12==UNTIL||LA224_12==VARIANT||LA224_12==WRITE||LA224_12==199) ) {
					alt224=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 224, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkHexNum:
				{
				int LA224_13 = input.LA(2);
				if ( (LA224_13==COLON) ) {
					alt224=11;
				}
				else if ( (LA224_13==EOF||LA224_13==ADD||LA224_13==ANSISTRING||(LA224_13 >= ASSIGN && LA224_13 <= AT2)||LA224_13==BREAK||(LA224_13 >= CONTAINS && LA224_13 <= ControlString)||(LA224_13 >= DEFAULT && LA224_13 <= DEPRECATED)||LA224_13==DOT||(LA224_13 >= ELSE && LA224_13 <= END)||(LA224_13 >= EXCEPT && LA224_13 <= EXIT)||LA224_13==EXPORT||LA224_13==FALSE||(LA224_13 >= FILE && LA224_13 <= FINALLY)||LA224_13==FUNCTION||LA224_13==HELPER||LA224_13==IMPLEMENTS||(LA224_13 >= INDEX && LA224_13 <= INHERITED)||LA224_13==LBRACK||(LA224_13 >= LOCAL && LA224_13 <= MINUS)||LA224_13==NAME||LA224_13==NIL||LA224_13==NOT||LA224_13==OBJECT||(LA224_13 >= ON && LA224_13 <= OPERATOR)||LA224_13==OUT||LA224_13==PACKAGE||(LA224_13 >= PLUS && LA224_13 <= POINTER2)||LA224_13==PROCEDURE||LA224_13==QuotedString||(LA224_13 >= READ && LA224_13 <= READONLY)||(LA224_13 >= REFERENCE && LA224_13 <= REGISTER)||LA224_13==REMOVE||LA224_13==SEMI||(LA224_13 >= STORED && LA224_13 <= STRING)||LA224_13==TRUE||LA224_13==TkAsmHexNum||(LA224_13 >= TkHexNum && LA224_13 <= TkIntNum)||LA224_13==TkRealNum||LA224_13==UNTIL||LA224_13==VARIANT||LA224_13==WRITE||LA224_13==199) ) {
					alt224=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 224, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				int LA224_14 = input.LA(2);
				if ( (LA224_14==COLON) ) {
					alt224=11;
				}
				else if ( (LA224_14==EOF||LA224_14==ADD||LA224_14==ANSISTRING||(LA224_14 >= ASSIGN && LA224_14 <= AT2)||LA224_14==BREAK||(LA224_14 >= CONTAINS && LA224_14 <= ControlString)||(LA224_14 >= DEFAULT && LA224_14 <= DEPRECATED)||LA224_14==DOT||(LA224_14 >= ELSE && LA224_14 <= END)||(LA224_14 >= EXCEPT && LA224_14 <= EXIT)||LA224_14==EXPORT||LA224_14==FALSE||(LA224_14 >= FILE && LA224_14 <= FINALLY)||LA224_14==FUNCTION||LA224_14==HELPER||LA224_14==IMPLEMENTS||(LA224_14 >= INDEX && LA224_14 <= INHERITED)||LA224_14==LBRACK||(LA224_14 >= LOCAL && LA224_14 <= MINUS)||LA224_14==NAME||LA224_14==NIL||LA224_14==NOT||LA224_14==OBJECT||(LA224_14 >= ON && LA224_14 <= OPERATOR)||LA224_14==OUT||LA224_14==PACKAGE||(LA224_14 >= PLUS && LA224_14 <= POINTER2)||LA224_14==PROCEDURE||LA224_14==QuotedString||(LA224_14 >= READ && LA224_14 <= READONLY)||(LA224_14 >= REFERENCE && LA224_14 <= REGISTER)||LA224_14==REMOVE||LA224_14==SEMI||(LA224_14 >= STORED && LA224_14 <= STRING)||LA224_14==TRUE||LA224_14==TkAsmHexNum||(LA224_14 >= TkHexNum && LA224_14 <= TkIntNum)||LA224_14==TkRealNum||LA224_14==UNTIL||LA224_14==VARIANT||LA224_14==WRITE||LA224_14==199) ) {
					alt224=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 224, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT2:
			case ControlString:
			case FALSE:
			case FILE:
			case GOTO:
			case INHERITED:
			case LBRACK:
			case LPAREN:
			case MINUS:
			case NIL:
			case NOT:
			case PLUS:
			case QuotedString:
			case TRUE:
			case TkAsmHexNum:
			case TkRealNum:
			case 199:
				{
				alt224=12;
				}
				break;
			case EXIT:
				{
				int LA224_16 = input.LA(2);
				if ( (LA224_16==COLON) ) {
					alt224=11;
				}
				else if ( (LA224_16==EOF||LA224_16==ADD||LA224_16==ANSISTRING||(LA224_16 >= ASSIGN && LA224_16 <= AT2)||LA224_16==BREAK||(LA224_16 >= CONTAINS && LA224_16 <= ControlString)||(LA224_16 >= DEFAULT && LA224_16 <= DEPRECATED)||LA224_16==DOT||(LA224_16 >= ELSE && LA224_16 <= END)||(LA224_16 >= EXCEPT && LA224_16 <= EXIT)||LA224_16==EXPORT||LA224_16==FALSE||(LA224_16 >= FILE && LA224_16 <= FINALLY)||LA224_16==FUNCTION||LA224_16==HELPER||LA224_16==IMPLEMENTS||(LA224_16 >= INDEX && LA224_16 <= INHERITED)||LA224_16==LBRACK||(LA224_16 >= LOCAL && LA224_16 <= MINUS)||LA224_16==NAME||LA224_16==NIL||LA224_16==NOT||LA224_16==OBJECT||(LA224_16 >= ON && LA224_16 <= OPERATOR)||LA224_16==OUT||LA224_16==PACKAGE||(LA224_16 >= PLUS && LA224_16 <= POINTER2)||LA224_16==PROCEDURE||LA224_16==QuotedString||(LA224_16 >= READ && LA224_16 <= READONLY)||(LA224_16 >= REFERENCE && LA224_16 <= REGISTER)||LA224_16==REMOVE||LA224_16==SEMI||(LA224_16 >= STORED && LA224_16 <= STRING)||LA224_16==TRUE||LA224_16==TkAsmHexNum||(LA224_16 >= TkHexNum && LA224_16 <= TkIntNum)||LA224_16==TkRealNum||LA224_16==UNTIL||LA224_16==VARIANT||LA224_16==WRITE||LA224_16==199) ) {
					alt224=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 224, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BREAK:
				{
				int LA224_17 = input.LA(2);
				if ( (LA224_17==COLON) ) {
					alt224=11;
				}
				else if ( (LA224_17==EOF||LA224_17==ADD||LA224_17==ANSISTRING||(LA224_17 >= ASSIGN && LA224_17 <= AT2)||LA224_17==BREAK||(LA224_17 >= CONTAINS && LA224_17 <= ControlString)||(LA224_17 >= DEFAULT && LA224_17 <= DEPRECATED)||LA224_17==DOT||(LA224_17 >= ELSE && LA224_17 <= END)||(LA224_17 >= EXCEPT && LA224_17 <= EXIT)||LA224_17==EXPORT||LA224_17==FALSE||(LA224_17 >= FILE && LA224_17 <= FINALLY)||LA224_17==FUNCTION||LA224_17==HELPER||LA224_17==IMPLEMENTS||(LA224_17 >= INDEX && LA224_17 <= INHERITED)||LA224_17==LBRACK||(LA224_17 >= LOCAL && LA224_17 <= MINUS)||LA224_17==NAME||LA224_17==NIL||LA224_17==NOT||LA224_17==OBJECT||(LA224_17 >= ON && LA224_17 <= OPERATOR)||LA224_17==OUT||LA224_17==PACKAGE||(LA224_17 >= PLUS && LA224_17 <= POINTER2)||LA224_17==PROCEDURE||LA224_17==QuotedString||(LA224_17 >= READ && LA224_17 <= READONLY)||(LA224_17 >= REFERENCE && LA224_17 <= REGISTER)||LA224_17==REMOVE||LA224_17==SEMI||(LA224_17 >= STORED && LA224_17 <= STRING)||LA224_17==TRUE||LA224_17==TkAsmHexNum||(LA224_17 >= TkHexNum && LA224_17 <= TkIntNum)||LA224_17==TkRealNum||LA224_17==UNTIL||LA224_17==VARIANT||LA224_17==WRITE||LA224_17==199) ) {
					alt224=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 224, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CONTINUE:
				{
				int LA224_18 = input.LA(2);
				if ( (LA224_18==COLON) ) {
					alt224=11;
				}
				else if ( (LA224_18==EOF||LA224_18==ADD||LA224_18==ANSISTRING||(LA224_18 >= ASSIGN && LA224_18 <= AT2)||LA224_18==BREAK||(LA224_18 >= CONTAINS && LA224_18 <= ControlString)||(LA224_18 >= DEFAULT && LA224_18 <= DEPRECATED)||LA224_18==DOT||(LA224_18 >= ELSE && LA224_18 <= END)||(LA224_18 >= EXCEPT && LA224_18 <= EXIT)||LA224_18==EXPORT||LA224_18==FALSE||(LA224_18 >= FILE && LA224_18 <= FINALLY)||LA224_18==FUNCTION||LA224_18==HELPER||LA224_18==IMPLEMENTS||(LA224_18 >= INDEX && LA224_18 <= INHERITED)||LA224_18==LBRACK||(LA224_18 >= LOCAL && LA224_18 <= MINUS)||LA224_18==NAME||LA224_18==NIL||LA224_18==NOT||LA224_18==OBJECT||(LA224_18 >= ON && LA224_18 <= OPERATOR)||LA224_18==OUT||LA224_18==PACKAGE||(LA224_18 >= PLUS && LA224_18 <= POINTER2)||LA224_18==PROCEDURE||LA224_18==QuotedString||(LA224_18 >= READ && LA224_18 <= READONLY)||(LA224_18 >= REFERENCE && LA224_18 <= REGISTER)||LA224_18==REMOVE||LA224_18==SEMI||(LA224_18 >= STORED && LA224_18 <= STRING)||LA224_18==TRUE||LA224_18==TkAsmHexNum||(LA224_18 >= TkHexNum && LA224_18 <= TkIntNum)||LA224_18==TkRealNum||LA224_18==UNTIL||LA224_18==VARIANT||LA224_18==WRITE||LA224_18==199) ) {
					alt224=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 224, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case DEPRECATED:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case VARIANT:
			case WRITE:
				{
				int LA224_19 = input.LA(2);
				if ( (LA224_19==COLON) ) {
					alt224=11;
				}
				else if ( (LA224_19==EOF||LA224_19==ADD||LA224_19==ANSISTRING||(LA224_19 >= ASSIGN && LA224_19 <= AT2)||LA224_19==BREAK||(LA224_19 >= CONTAINS && LA224_19 <= ControlString)||(LA224_19 >= DEFAULT && LA224_19 <= DEPRECATED)||LA224_19==DOT||(LA224_19 >= ELSE && LA224_19 <= END)||(LA224_19 >= EXCEPT && LA224_19 <= EXIT)||LA224_19==EXPORT||LA224_19==FALSE||(LA224_19 >= FILE && LA224_19 <= FINALLY)||LA224_19==FUNCTION||LA224_19==HELPER||LA224_19==IMPLEMENTS||(LA224_19 >= INDEX && LA224_19 <= INHERITED)||LA224_19==LBRACK||(LA224_19 >= LOCAL && LA224_19 <= MINUS)||LA224_19==NAME||LA224_19==NIL||LA224_19==NOT||LA224_19==OBJECT||(LA224_19 >= ON && LA224_19 <= OPERATOR)||LA224_19==OUT||LA224_19==PACKAGE||(LA224_19 >= PLUS && LA224_19 <= POINTER2)||LA224_19==PROCEDURE||LA224_19==QuotedString||(LA224_19 >= READ && LA224_19 <= READONLY)||(LA224_19 >= REFERENCE && LA224_19 <= REGISTER)||LA224_19==REMOVE||LA224_19==SEMI||(LA224_19 >= STORED && LA224_19 <= STRING)||LA224_19==TRUE||LA224_19==TkAsmHexNum||(LA224_19 >= TkHexNum && LA224_19 <= TkIntNum)||LA224_19==TkRealNum||LA224_19==UNTIL||LA224_19==VARIANT||LA224_19==WRITE||LA224_19==199) ) {
					alt224=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 224, 19, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 224, 0, input);
				throw nvae;
			}
			switch (alt224) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:544:32: ifStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ifStatement_in_statement14801);
					ifStatement646=ifStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement646.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:545:32: caseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_caseStatement_in_statement14834);
					caseStatement647=caseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseStatement647.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:546:32: repeatStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_repeatStatement_in_statement14867);
					repeatStatement648=repeatStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, repeatStatement648.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:547:32: whileStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_whileStatement_in_statement14900);
					whileStatement649=whileStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whileStatement649.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:548:32: forStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_forStatement_in_statement14933);
					forStatement650=forStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, forStatement650.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:549:32: withStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_withStatement_in_statement14966);
					withStatement651=withStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, withStatement651.getTree());

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:550:32: tryStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_tryStatement_in_statement14999);
					tryStatement652=tryStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tryStatement652.getTree());

					}
					break;
				case 8 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:551:32: raiseStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_raiseStatement_in_statement15032);
					raiseStatement653=raiseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, raiseStatement653.getTree());

					}
					break;
				case 9 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:552:32: assemblerStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assemblerStatement_in_statement15065);
					assemblerStatement654=assemblerStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assemblerStatement654.getTree());

					}
					break;
				case 10 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:553:32: compoundStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compoundStatement_in_statement15098);
					compoundStatement655=compoundStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compoundStatement655.getTree());

					}
					break;
				case 11 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:554:32: label ':' statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_label_in_statement15131);
					label656=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label656.getTree());

					char_literal657=(Token)match(input,COLON,FOLLOW_COLON_in_statement15133); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal657_tree = (Object)adaptor.create(char_literal657);
					adaptor.addChild(root_0, char_literal657_tree);
					}

					pushFollow(FOLLOW_statement_in_statement15135);
					statement658=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement658.getTree());

					}
					break;
				case 12 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:555:32: simpleStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simpleStatement_in_statement15168);
					simpleStatement659=simpleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleStatement659.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 139, statement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class ifStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ifStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:1: ifStatement : 'if' expression 'then' statement ( 'else' statement )? ;
	public final DelphiParser.ifStatement_return ifStatement() throws RecognitionException {
		DelphiParser.ifStatement_return retval = new DelphiParser.ifStatement_return();
		retval.start = input.LT(1);
		int ifStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal660=null;
		Token string_literal662=null;
		Token string_literal664=null;
		ParserRuleReturnScope expression661 =null;
		ParserRuleReturnScope statement663 =null;
		ParserRuleReturnScope statement665 =null;

		Object string_literal660_tree=null;
		Object string_literal662_tree=null;
		Object string_literal664_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:30: ( 'if' expression 'then' statement ( 'else' statement )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:32: 'if' expression 'then' statement ( 'else' statement )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal660=(Token)match(input,IF,FOLLOW_IF_in_ifStatement15222); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal660_tree = (Object)adaptor.create(string_literal660);
			adaptor.addChild(root_0, string_literal660_tree);
			}

			pushFollow(FOLLOW_expression_in_ifStatement15224);
			expression661=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression661.getTree());

			string_literal662=(Token)match(input,THEN,FOLLOW_THEN_in_ifStatement15226); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal662_tree = (Object)adaptor.create(string_literal662);
			adaptor.addChild(root_0, string_literal662_tree);
			}

			pushFollow(FOLLOW_statement_in_ifStatement15228);
			statement663=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement663.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:65: ( 'else' statement )?
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==ELSE) ) {
				int LA225_1 = input.LA(2);
				if ( (synpred337_Delphi()) ) {
					alt225=1;
				}
			}
			switch (alt225) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:66: 'else' statement
					{
					string_literal664=(Token)match(input,ELSE,FOLLOW_ELSE_in_ifStatement15231); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal664_tree = (Object)adaptor.create(string_literal664);
					adaptor.addChild(root_0, string_literal664_tree);
					}

					pushFollow(FOLLOW_statement_in_ifStatement15233);
					statement665=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement665.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 140, ifStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ifStatement"


	public static class caseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:1: caseStatement : 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' ;
	public final DelphiParser.caseStatement_return caseStatement() throws RecognitionException {
		DelphiParser.caseStatement_return retval = new DelphiParser.caseStatement_return();
		retval.start = input.LT(1);
		int caseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal666=null;
		Token string_literal668=null;
		Token string_literal670=null;
		Token char_literal672=null;
		Token string_literal673=null;
		ParserRuleReturnScope expression667 =null;
		ParserRuleReturnScope caseItem669 =null;
		ParserRuleReturnScope statementList671 =null;

		Object string_literal666_tree=null;
		Object string_literal668_tree=null;
		Object string_literal670_tree=null;
		Object char_literal672_tree=null;
		Object string_literal673_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:30: ( 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:32: 'case' expression 'of' ( caseItem )* ( 'else' statementList ( ';' )? )? 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal666=(Token)match(input,CASE,FOLLOW_CASE_in_caseStatement15287); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal666_tree = (Object)adaptor.create(string_literal666);
			adaptor.addChild(root_0, string_literal666_tree);
			}

			pushFollow(FOLLOW_expression_in_caseStatement15289);
			expression667=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression667.getTree());

			string_literal668=(Token)match(input,OF,FOLLOW_OF_in_caseStatement15291); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal668_tree = (Object)adaptor.create(string_literal668);
			adaptor.addChild(root_0, string_literal668_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:55: ( caseItem )*
			loop226:
			while (true) {
				int alt226=2;
				int LA226_0 = input.LA(1);
				if ( (LA226_0==ADD||LA226_0==ANSISTRING||(LA226_0 >= AT && LA226_0 <= AT2)||LA226_0==BREAK||(LA226_0 >= CONTAINS && LA226_0 <= ControlString)||(LA226_0 >= DEFAULT && LA226_0 <= DEPRECATED)||LA226_0==EXIT||LA226_0==EXPORT||LA226_0==FALSE||(LA226_0 >= FILE && LA226_0 <= FINAL)||LA226_0==FUNCTION||LA226_0==HELPER||LA226_0==IMPLEMENTS||(LA226_0 >= INDEX && LA226_0 <= INHERITED)||LA226_0==LBRACK||(LA226_0 >= LOCAL && LA226_0 <= LPAREN)||(LA226_0 >= MESSAGE && LA226_0 <= MINUS)||LA226_0==NAME||LA226_0==NIL||LA226_0==NOT||LA226_0==OBJECT||LA226_0==OPERATOR||LA226_0==OUT||LA226_0==PACKAGE||(LA226_0 >= PLUS && LA226_0 <= POINTER)||LA226_0==PROCEDURE||LA226_0==QuotedString||(LA226_0 >= READ && LA226_0 <= READONLY)||(LA226_0 >= REFERENCE && LA226_0 <= REGISTER)||LA226_0==REMOVE||(LA226_0 >= STORED && LA226_0 <= STRING)||LA226_0==TRUE||LA226_0==TkAsmHexNum||(LA226_0 >= TkHexNum && LA226_0 <= TkIntNum)||LA226_0==TkRealNum||LA226_0==VARIANT||LA226_0==WRITE||LA226_0==199) ) {
					alt226=1;
				}

				switch (alt226) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:56: caseItem
					{
					pushFollow(FOLLOW_caseItem_in_caseStatement15294);
					caseItem669=caseItem();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseItem669.getTree());

					}
					break;

				default :
					break loop226;
				}
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:67: ( 'else' statementList ( ';' )? )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==ELSE) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:68: 'else' statementList ( ';' )?
					{
					string_literal670=(Token)match(input,ELSE,FOLLOW_ELSE_in_caseStatement15299); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal670_tree = (Object)adaptor.create(string_literal670);
					adaptor.addChild(root_0, string_literal670_tree);
					}

					pushFollow(FOLLOW_statementList_in_caseStatement15301);
					statementList671=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList671.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:89: ( ';' )?
					int alt227=2;
					int LA227_0 = input.LA(1);
					if ( (LA227_0==SEMI) ) {
						alt227=1;
					}
					switch (alt227) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:559:90: ';'
							{
							char_literal672=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseStatement15304); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal672_tree = (Object)adaptor.create(char_literal672);
							adaptor.addChild(root_0, char_literal672_tree);
							}

							}
							break;

					}

					}
					break;

			}

			string_literal673=(Token)match(input,END,FOLLOW_END_in_caseStatement15310); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal673_tree = (Object)adaptor.create(string_literal673);
			adaptor.addChild(root_0, string_literal673_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 141, caseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseStatement"


	public static class caseItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:1: caseItem : caseLabel ( ',' caseLabel )* ':' statement ( ';' )? ;
	public final DelphiParser.caseItem_return caseItem() throws RecognitionException {
		DelphiParser.caseItem_return retval = new DelphiParser.caseItem_return();
		retval.start = input.LT(1);
		int caseItem_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal675=null;
		Token char_literal677=null;
		Token char_literal679=null;
		ParserRuleReturnScope caseLabel674 =null;
		ParserRuleReturnScope caseLabel676 =null;
		ParserRuleReturnScope statement678 =null;

		Object char_literal675_tree=null;
		Object char_literal677_tree=null;
		Object char_literal679_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:30: ( caseLabel ( ',' caseLabel )* ':' statement ( ';' )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:32: caseLabel ( ',' caseLabel )* ':' statement ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_caseLabel_in_caseItem15367);
			caseLabel674=caseLabel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel674.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:42: ( ',' caseLabel )*
			loop229:
			while (true) {
				int alt229=2;
				int LA229_0 = input.LA(1);
				if ( (LA229_0==COMMA) ) {
					alt229=1;
				}

				switch (alt229) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:43: ',' caseLabel
					{
					char_literal675=(Token)match(input,COMMA,FOLLOW_COMMA_in_caseItem15370); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal675_tree = (Object)adaptor.create(char_literal675);
					adaptor.addChild(root_0, char_literal675_tree);
					}

					pushFollow(FOLLOW_caseLabel_in_caseItem15372);
					caseLabel676=caseLabel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, caseLabel676.getTree());

					}
					break;

				default :
					break loop229;
				}
			}

			char_literal677=(Token)match(input,COLON,FOLLOW_COLON_in_caseItem15376); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal677_tree = (Object)adaptor.create(char_literal677);
			adaptor.addChild(root_0, char_literal677_tree);
			}

			pushFollow(FOLLOW_statement_in_caseItem15378);
			statement678=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement678.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:73: ( ';' )?
			int alt230=2;
			int LA230_0 = input.LA(1);
			if ( (LA230_0==SEMI) ) {
				alt230=1;
			}
			switch (alt230) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:561:74: ';'
					{
					char_literal679=(Token)match(input,SEMI,FOLLOW_SEMI_in_caseItem15381); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal679_tree = (Object)adaptor.create(char_literal679);
					adaptor.addChild(root_0, char_literal679_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 142, caseItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseItem"


	public static class caseLabel_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "caseLabel"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:1: caseLabel : expression ( '..' expression )? ;
	public final DelphiParser.caseLabel_return caseLabel() throws RecognitionException {
		DelphiParser.caseLabel_return retval = new DelphiParser.caseLabel_return();
		retval.start = input.LT(1);
		int caseLabel_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal681=null;
		ParserRuleReturnScope expression680 =null;
		ParserRuleReturnScope expression682 =null;

		Object string_literal681_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:30: ( expression ( '..' expression )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:32: expression ( '..' expression )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_expression_in_caseLabel15440);
			expression680=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression680.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:43: ( '..' expression )?
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==DOTDOT) ) {
				alt231=1;
			}
			switch (alt231) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:563:44: '..' expression
					{
					string_literal681=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_caseLabel15443); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal681_tree = (Object)adaptor.create(string_literal681);
					adaptor.addChild(root_0, string_literal681_tree);
					}

					pushFollow(FOLLOW_expression_in_caseLabel15445);
					expression682=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression682.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 143, caseLabel_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "caseLabel"


	public static class repeatStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "repeatStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:1: repeatStatement : 'repeat' ( statementList )? 'until' expression ;
	public final DelphiParser.repeatStatement_return repeatStatement() throws RecognitionException {
		DelphiParser.repeatStatement_return retval = new DelphiParser.repeatStatement_return();
		retval.start = input.LT(1);
		int repeatStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal683=null;
		Token string_literal685=null;
		ParserRuleReturnScope statementList684 =null;
		ParserRuleReturnScope expression686 =null;

		Object string_literal683_tree=null;
		Object string_literal685_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:30: ( 'repeat' ( statementList )? 'until' expression )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:32: 'repeat' ( statementList )? 'until' expression
			{
			root_0 = (Object)adaptor.nil();


			string_literal683=(Token)match(input,REPEAT,FOLLOW_REPEAT_in_repeatStatement15497); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal683_tree = (Object)adaptor.create(string_literal683);
			adaptor.addChild(root_0, string_literal683_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:41: ( statementList )?
			int alt232=2;
			int LA232_0 = input.LA(1);
			if ( (LA232_0==ADD||LA232_0==ANSISTRING||LA232_0==ASM||(LA232_0 >= AT && LA232_0 <= AT2)||(LA232_0 >= BEGIN && LA232_0 <= CASE)||(LA232_0 >= CONTAINS && LA232_0 <= ControlString)||(LA232_0 >= DEFAULT && LA232_0 <= DEPRECATED)||LA232_0==EXIT||LA232_0==EXPORT||LA232_0==FALSE||(LA232_0 >= FILE && LA232_0 <= FINAL)||LA232_0==FOR||LA232_0==GOTO||LA232_0==HELPER||LA232_0==IF||LA232_0==IMPLEMENTS||(LA232_0 >= INDEX && LA232_0 <= INHERITED)||LA232_0==LBRACK||(LA232_0 >= LOCAL && LA232_0 <= LPAREN)||(LA232_0 >= MESSAGE && LA232_0 <= MINUS)||LA232_0==NAME||LA232_0==NIL||LA232_0==NOT||LA232_0==OBJECT||LA232_0==OPERATOR||LA232_0==OUT||LA232_0==PACKAGE||(LA232_0 >= PLUS && LA232_0 <= POINTER)||(LA232_0 >= QuotedString && LA232_0 <= RAISE)||(LA232_0 >= READ && LA232_0 <= READONLY)||(LA232_0 >= REFERENCE && LA232_0 <= REGISTER)||(LA232_0 >= REMOVE && LA232_0 <= REPEAT)||LA232_0==SEMI||(LA232_0 >= STORED && LA232_0 <= STRING)||(LA232_0 >= TRUE && LA232_0 <= TRY)||LA232_0==TkAsmHexNum||(LA232_0 >= TkHexNum && LA232_0 <= TkIntNum)||LA232_0==TkRealNum||LA232_0==VARIANT||(LA232_0 >= WHILE && LA232_0 <= WRITE)||LA232_0==199) ) {
				alt232=1;
			}
			else if ( (LA232_0==UNTIL) ) {
				int LA232_2 = input.LA(2);
				if ( (synpred344_Delphi()) ) {
					alt232=1;
				}
			}
			switch (alt232) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:42: statementList
					{
					pushFollow(FOLLOW_statementList_in_repeatStatement15500);
					statementList684=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList684.getTree());

					}
					break;

			}

			string_literal685=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_repeatStatement15504); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal685_tree = (Object)adaptor.create(string_literal685);
			adaptor.addChild(root_0, string_literal685_tree);
			}

			pushFollow(FOLLOW_expression_in_repeatStatement15506);
			expression686=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression686.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 144, repeatStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "repeatStatement"


	public static class whileStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "whileStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:1: whileStatement : 'while' expression 'do' statement ;
	public final DelphiParser.whileStatement_return whileStatement() throws RecognitionException {
		DelphiParser.whileStatement_return retval = new DelphiParser.whileStatement_return();
		retval.start = input.LT(1);
		int whileStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal687=null;
		Token string_literal689=null;
		ParserRuleReturnScope expression688 =null;
		ParserRuleReturnScope statement690 =null;

		Object string_literal687_tree=null;
		Object string_literal689_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:30: ( 'while' expression 'do' statement )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:567:32: 'while' expression 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal687=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileStatement15557); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal687_tree = (Object)adaptor.create(string_literal687);
			adaptor.addChild(root_0, string_literal687_tree);
			}

			pushFollow(FOLLOW_expression_in_whileStatement15559);
			expression688=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression688.getTree());

			string_literal689=(Token)match(input,DO,FOLLOW_DO_in_whileStatement15561); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal689_tree = (Object)adaptor.create(string_literal689);
			adaptor.addChild(root_0, string_literal689_tree);
			}

			pushFollow(FOLLOW_statement_in_whileStatement15563);
			statement690=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement690.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 145, whileStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "whileStatement"


	public static class forStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "forStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:1: forStatement : ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement );
	public final DelphiParser.forStatement_return forStatement() throws RecognitionException {
		DelphiParser.forStatement_return retval = new DelphiParser.forStatement_return();
		retval.start = input.LT(1);
		int forStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal691=null;
		Token string_literal693=null;
		Token string_literal695=null;
		Token string_literal697=null;
		Token string_literal699=null;
		Token string_literal701=null;
		Token string_literal703=null;
		Token string_literal705=null;
		Token string_literal707=null;
		Token string_literal709=null;
		Token string_literal711=null;
		ParserRuleReturnScope designator692 =null;
		ParserRuleReturnScope expression694 =null;
		ParserRuleReturnScope expression696 =null;
		ParserRuleReturnScope statement698 =null;
		ParserRuleReturnScope designator700 =null;
		ParserRuleReturnScope expression702 =null;
		ParserRuleReturnScope expression704 =null;
		ParserRuleReturnScope statement706 =null;
		ParserRuleReturnScope designator708 =null;
		ParserRuleReturnScope expression710 =null;
		ParserRuleReturnScope statement712 =null;

		Object string_literal691_tree=null;
		Object string_literal693_tree=null;
		Object string_literal695_tree=null;
		Object string_literal697_tree=null;
		Object string_literal699_tree=null;
		Object string_literal701_tree=null;
		Object string_literal703_tree=null;
		Object string_literal705_tree=null;
		Object string_literal707_tree=null;
		Object string_literal709_tree=null;
		Object string_literal711_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:30: ( 'for' designator ':=' expression 'to' expression 'do' statement | 'for' designator ':=' expression 'downto' expression 'do' statement | 'for' designator 'in' expression 'do' statement )
			int alt233=3;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==FOR) ) {
				int LA233_1 = input.LA(2);
				if ( (synpred345_Delphi()) ) {
					alt233=1;
				}
				else if ( (synpred346_Delphi()) ) {
					alt233=2;
				}
				else if ( (true) ) {
					alt233=3;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 233, 0, input);
				throw nvae;
			}

			switch (alt233) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: 'for' designator ':=' expression 'to' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal691=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15616); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal691_tree = (Object)adaptor.create(string_literal691);
					adaptor.addChild(root_0, string_literal691_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15618);
					designator692=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator692.getTree());

					string_literal693=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement15620); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal693_tree = (Object)adaptor.create(string_literal693);
					adaptor.addChild(root_0, string_literal693_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15622);
					expression694=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression694.getTree());

					string_literal695=(Token)match(input,TO,FOLLOW_TO_in_forStatement15624); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal695_tree = (Object)adaptor.create(string_literal695);
					adaptor.addChild(root_0, string_literal695_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15626);
					expression696=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression696.getTree());

					string_literal697=(Token)match(input,DO,FOLLOW_DO_in_forStatement15628); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal697_tree = (Object)adaptor.create(string_literal697);
					adaptor.addChild(root_0, string_literal697_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15630);
					statement698=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement698.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:32: 'for' designator ':=' expression 'downto' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal699=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15663); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal699_tree = (Object)adaptor.create(string_literal699);
					adaptor.addChild(root_0, string_literal699_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15665);
					designator700=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator700.getTree());

					string_literal701=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_forStatement15667); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal701_tree = (Object)adaptor.create(string_literal701);
					adaptor.addChild(root_0, string_literal701_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15669);
					expression702=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression702.getTree());

					string_literal703=(Token)match(input,DOWNTO,FOLLOW_DOWNTO_in_forStatement15671); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal703_tree = (Object)adaptor.create(string_literal703);
					adaptor.addChild(root_0, string_literal703_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15673);
					expression704=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression704.getTree());

					string_literal705=(Token)match(input,DO,FOLLOW_DO_in_forStatement15675); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal705_tree = (Object)adaptor.create(string_literal705);
					adaptor.addChild(root_0, string_literal705_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15677);
					statement706=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement706.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:571:32: 'for' designator 'in' expression 'do' statement
					{
					root_0 = (Object)adaptor.nil();


					string_literal707=(Token)match(input,FOR,FOLLOW_FOR_in_forStatement15710); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal707_tree = (Object)adaptor.create(string_literal707);
					adaptor.addChild(root_0, string_literal707_tree);
					}

					pushFollow(FOLLOW_designator_in_forStatement15712);
					designator708=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator708.getTree());

					string_literal709=(Token)match(input,IN,FOLLOW_IN_in_forStatement15714); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal709_tree = (Object)adaptor.create(string_literal709);
					adaptor.addChild(root_0, string_literal709_tree);
					}

					pushFollow(FOLLOW_expression_in_forStatement15716);
					expression710=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression710.getTree());

					string_literal711=(Token)match(input,DO,FOLLOW_DO_in_forStatement15718); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal711_tree = (Object)adaptor.create(string_literal711);
					adaptor.addChild(root_0, string_literal711_tree);
					}

					pushFollow(FOLLOW_statement_in_forStatement15720);
					statement712=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement712.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 146, forStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "forStatement"


	public static class withStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:1: withStatement : 'with' withItem 'do' statement ;
	public final DelphiParser.withStatement_return withStatement() throws RecognitionException {
		DelphiParser.withStatement_return retval = new DelphiParser.withStatement_return();
		retval.start = input.LT(1);
		int withStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal713=null;
		Token string_literal715=null;
		ParserRuleReturnScope withItem714 =null;
		ParserRuleReturnScope statement716 =null;

		Object string_literal713_tree=null;
		Object string_literal715_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:30: ( 'with' withItem 'do' statement )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:573:32: 'with' withItem 'do' statement
			{
			root_0 = (Object)adaptor.nil();


			string_literal713=(Token)match(input,WITH,FOLLOW_WITH_in_withStatement15772); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal713_tree = (Object)adaptor.create(string_literal713);
			adaptor.addChild(root_0, string_literal713_tree);
			}

			pushFollow(FOLLOW_withItem_in_withStatement15774);
			withItem714=withItem();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, withItem714.getTree());

			string_literal715=(Token)match(input,DO,FOLLOW_DO_in_withStatement15776); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal715_tree = (Object)adaptor.create(string_literal715);
			adaptor.addChild(root_0, string_literal715_tree);
			}

			pushFollow(FOLLOW_statement_in_withStatement15778);
			statement716=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, statement716.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 147, withStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withStatement"


	public static class withItem_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "withItem"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:1: withItem : ( designator 'as' designator | designator ( ',' designator )* );
	public final DelphiParser.withItem_return withItem() throws RecognitionException {
		DelphiParser.withItem_return retval = new DelphiParser.withItem_return();
		retval.start = input.LT(1);
		int withItem_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal718=null;
		Token char_literal721=null;
		ParserRuleReturnScope designator717 =null;
		ParserRuleReturnScope designator719 =null;
		ParserRuleReturnScope designator720 =null;
		ParserRuleReturnScope designator722 =null;

		Object string_literal718_tree=null;
		Object char_literal721_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:30: ( designator 'as' designator | designator ( ',' designator )* )
			int alt235=2;
			switch ( input.LA(1) ) {
			case TkHexNum:
			case TkIntNum:
				{
				int LA235_1 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case TkRealNum:
				{
				int LA235_2 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case TkAsmHexNum:
				{
				int LA235_3 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case ControlString:
				{
				int LA235_4 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case QuotedString:
				{
				int LA235_5 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case TkIdentifier:
				{
				int LA235_6 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case 199:
				{
				int LA235_7 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case STRING:
				{
				int LA235_8 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case NIL:
				{
				int LA235_9 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case TRUE:
				{
				int LA235_10 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case FALSE:
				{
				int LA235_11 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case LPAREN:
				{
				int LA235_12 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case LBRACK:
				{
				int LA235_13 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case VARIANT:
			case WRITE:
				{
				int LA235_14 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case FILE:
				{
				int LA235_15 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case AT2:
			case MINUS:
			case NOT:
			case PLUS:
				{
				int LA235_16 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			case INHERITED:
				{
				int LA235_17 = input.LA(2);
				if ( (synpred347_Delphi()) ) {
					alt235=1;
				}
				else if ( (true) ) {
					alt235=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 235, 0, input);
				throw nvae;
			}
			switch (alt235) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:32: designator 'as' designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_withItem15835);
					designator717=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator717.getTree());

					string_literal718=(Token)match(input,AS,FOLLOW_AS_in_withItem15837); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal718_tree = (Object)adaptor.create(string_literal718);
					adaptor.addChild(root_0, string_literal718_tree);
					}

					pushFollow(FOLLOW_designator_in_withItem15839);
					designator719=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator719.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:576:32: designator ( ',' designator )*
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_withItem15879);
					designator720=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator720.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:576:43: ( ',' designator )*
					loop234:
					while (true) {
						int alt234=2;
						int LA234_0 = input.LA(1);
						if ( (LA234_0==COMMA) ) {
							alt234=1;
						}

						switch (alt234) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:576:44: ',' designator
							{
							char_literal721=(Token)match(input,COMMA,FOLLOW_COMMA_in_withItem15882); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal721_tree = (Object)adaptor.create(char_literal721);
							adaptor.addChild(root_0, char_literal721_tree);
							}

							pushFollow(FOLLOW_designator_in_withItem15884);
							designator722=designator();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, designator722.getTree());

							}
							break;

						default :
							break loop234;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 148, withItem_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "withItem"


	public static class compoundStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compoundStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:1: compoundStatement : 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) ;
	public final DelphiParser.compoundStatement_return compoundStatement() throws RecognitionException {
		DelphiParser.compoundStatement_return retval = new DelphiParser.compoundStatement_return();
		retval.start = input.LT(1);
		int compoundStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal723=null;
		Token string_literal725=null;
		ParserRuleReturnScope statementList724 =null;

		Object string_literal723_tree=null;
		Object string_literal725_tree=null;
		RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
		RewriteRuleTokenStream stream_BEGIN=new RewriteRuleTokenStream(adaptor,"token BEGIN");
		RewriteRuleSubtreeStream stream_statementList=new RewriteRuleSubtreeStream(adaptor,"rule statementList");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:30: ( 'begin' ( statementList )? 'end' -> ^( 'begin' ( statementList )? 'end' ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:32: 'begin' ( statementList )? 'end'
			{
			string_literal723=(Token)match(input,BEGIN,FOLLOW_BEGIN_in_compoundStatement15934); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BEGIN.add(string_literal723);

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:40: ( statementList )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==ADD||LA236_0==ANSISTRING||LA236_0==ASM||(LA236_0 >= AT && LA236_0 <= AT2)||(LA236_0 >= BEGIN && LA236_0 <= CASE)||(LA236_0 >= CONTAINS && LA236_0 <= ControlString)||(LA236_0 >= DEFAULT && LA236_0 <= DEPRECATED)||LA236_0==EXIT||LA236_0==EXPORT||LA236_0==FALSE||(LA236_0 >= FILE && LA236_0 <= FINAL)||LA236_0==FOR||LA236_0==GOTO||LA236_0==HELPER||LA236_0==IF||LA236_0==IMPLEMENTS||(LA236_0 >= INDEX && LA236_0 <= INHERITED)||LA236_0==LBRACK||(LA236_0 >= LOCAL && LA236_0 <= LPAREN)||(LA236_0 >= MESSAGE && LA236_0 <= MINUS)||LA236_0==NAME||LA236_0==NIL||LA236_0==NOT||LA236_0==OBJECT||LA236_0==OPERATOR||LA236_0==OUT||LA236_0==PACKAGE||(LA236_0 >= PLUS && LA236_0 <= POINTER)||(LA236_0 >= QuotedString && LA236_0 <= RAISE)||(LA236_0 >= READ && LA236_0 <= READONLY)||(LA236_0 >= REFERENCE && LA236_0 <= REGISTER)||(LA236_0 >= REMOVE && LA236_0 <= REPEAT)||LA236_0==SEMI||(LA236_0 >= STORED && LA236_0 <= STRING)||(LA236_0 >= TRUE && LA236_0 <= TRY)||LA236_0==TkAsmHexNum||(LA236_0 >= TkHexNum && LA236_0 <= TkIntNum)||LA236_0==TkRealNum||LA236_0==VARIANT||(LA236_0 >= WHILE && LA236_0 <= WRITE)||LA236_0==199) ) {
				alt236=1;
			}
			else if ( (LA236_0==END) ) {
				int LA236_2 = input.LA(2);
				if ( (synpred349_Delphi()) ) {
					alt236=1;
				}
			}
			switch (alt236) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:41: statementList
					{
					pushFollow(FOLLOW_statementList_in_compoundStatement15937);
					statementList724=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statementList.add(statementList724.getTree());
					}
					break;

			}

			string_literal725=(Token)match(input,END,FOLLOW_END_in_compoundStatement15941); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_END.add(string_literal725);

			// AST REWRITE
			// elements: statementList, END, BEGIN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 578:63: -> ^( 'begin' ( statementList )? 'end' )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:66: ^( 'begin' ( statementList )? 'end' )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_BEGIN.nextNode(), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:76: ( statementList )?
				if ( stream_statementList.hasNext() ) {
					adaptor.addChild(root_1, stream_statementList.nextTree());
				}
				stream_statementList.reset();

				adaptor.addChild(root_1, stream_END.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 149, compoundStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "compoundStatement"


	public static class statementList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statementList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:1: statementList : ( statement )? ( ';' ( statement )? )* ;
	public final DelphiParser.statementList_return statementList() throws RecognitionException {
		DelphiParser.statementList_return retval = new DelphiParser.statementList_return();
		retval.start = input.LT(1);
		int statementList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal727=null;
		ParserRuleReturnScope statement726 =null;
		ParserRuleReturnScope statement728 =null;

		Object char_literal727_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:30: ( ( statement )? ( ';' ( statement )? )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: ( statement )? ( ';' ( statement )? )*
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:32: ( statement )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==ADD||LA237_0==ANSISTRING||LA237_0==ASM||(LA237_0 >= AT && LA237_0 <= AT2)||(LA237_0 >= BEGIN && LA237_0 <= CASE)||(LA237_0 >= CONTAINS && LA237_0 <= ControlString)||(LA237_0 >= DEFAULT && LA237_0 <= DEPRECATED)||LA237_0==EXIT||LA237_0==EXPORT||LA237_0==FALSE||(LA237_0 >= FILE && LA237_0 <= FINAL)||LA237_0==FOR||LA237_0==GOTO||LA237_0==HELPER||LA237_0==IF||LA237_0==IMPLEMENTS||(LA237_0 >= INDEX && LA237_0 <= INHERITED)||LA237_0==LBRACK||(LA237_0 >= LOCAL && LA237_0 <= LPAREN)||(LA237_0 >= MESSAGE && LA237_0 <= MINUS)||LA237_0==NAME||LA237_0==NIL||LA237_0==NOT||LA237_0==OBJECT||LA237_0==OPERATOR||LA237_0==OUT||LA237_0==PACKAGE||(LA237_0 >= PLUS && LA237_0 <= POINTER)||(LA237_0 >= QuotedString && LA237_0 <= RAISE)||(LA237_0 >= READ && LA237_0 <= READONLY)||(LA237_0 >= REFERENCE && LA237_0 <= REGISTER)||(LA237_0 >= REMOVE && LA237_0 <= REPEAT)||(LA237_0 >= STORED && LA237_0 <= STRING)||(LA237_0 >= TRUE && LA237_0 <= TRY)||LA237_0==TkAsmHexNum||(LA237_0 >= TkHexNum && LA237_0 <= TkIntNum)||LA237_0==TkRealNum||LA237_0==VARIANT||(LA237_0 >= WHILE && LA237_0 <= WRITE)||LA237_0==199) ) {
				alt237=1;
			}
			switch (alt237) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:33: statement
					{
					pushFollow(FOLLOW_statement_in_statementList16007);
					statement726=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement726.getTree());

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:45: ( ';' ( statement )? )*
			loop239:
			while (true) {
				int alt239=2;
				int LA239_0 = input.LA(1);
				if ( (LA239_0==SEMI) ) {
					int LA239_2 = input.LA(2);
					if ( (synpred352_Delphi()) ) {
						alt239=1;
					}

				}

				switch (alt239) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:46: ';' ( statement )?
					{
					char_literal727=(Token)match(input,SEMI,FOLLOW_SEMI_in_statementList16012); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal727_tree = (Object)adaptor.create(char_literal727);
					adaptor.addChild(root_0, char_literal727_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:50: ( statement )?
					int alt238=2;
					int LA238_0 = input.LA(1);
					if ( (LA238_0==ADD||LA238_0==ANSISTRING||LA238_0==ASM||(LA238_0 >= AT && LA238_0 <= AT2)||(LA238_0 >= BEGIN && LA238_0 <= CASE)||(LA238_0 >= CONTAINS && LA238_0 <= ControlString)||(LA238_0 >= DEFAULT && LA238_0 <= DEPRECATED)||LA238_0==EXIT||LA238_0==EXPORT||LA238_0==FALSE||(LA238_0 >= FILE && LA238_0 <= FINAL)||LA238_0==FOR||LA238_0==GOTO||LA238_0==HELPER||LA238_0==IF||LA238_0==IMPLEMENTS||(LA238_0 >= INDEX && LA238_0 <= INHERITED)||LA238_0==LBRACK||(LA238_0 >= LOCAL && LA238_0 <= LPAREN)||(LA238_0 >= MESSAGE && LA238_0 <= MINUS)||LA238_0==NAME||LA238_0==NIL||LA238_0==NOT||LA238_0==OBJECT||LA238_0==OPERATOR||LA238_0==OUT||LA238_0==PACKAGE||(LA238_0 >= PLUS && LA238_0 <= POINTER)||(LA238_0 >= QuotedString && LA238_0 <= RAISE)||(LA238_0 >= READ && LA238_0 <= READONLY)||(LA238_0 >= REFERENCE && LA238_0 <= REGISTER)||(LA238_0 >= REMOVE && LA238_0 <= REPEAT)||(LA238_0 >= STORED && LA238_0 <= STRING)||(LA238_0 >= TRUE && LA238_0 <= TRY)||LA238_0==TkAsmHexNum||(LA238_0 >= TkHexNum && LA238_0 <= TkIntNum)||LA238_0==TkRealNum||LA238_0==VARIANT||(LA238_0 >= WHILE && LA238_0 <= WRITE)||LA238_0==199) ) {
						alt238=1;
					}
					switch (alt238) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:51: statement
							{
							pushFollow(FOLLOW_statement_in_statementList16015);
							statement728=statement();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statement728.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop239;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 150, statementList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "statementList"


	public static class simpleStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simpleStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:1: simpleStatement : ( designator ':=' expression | designator | gotoStatement );
	public final DelphiParser.simpleStatement_return simpleStatement() throws RecognitionException {
		DelphiParser.simpleStatement_return retval = new DelphiParser.simpleStatement_return();
		retval.start = input.LT(1);
		int simpleStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal730=null;
		ParserRuleReturnScope designator729 =null;
		ParserRuleReturnScope expression731 =null;
		ParserRuleReturnScope designator732 =null;
		ParserRuleReturnScope gotoStatement733 =null;

		Object string_literal730_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:30: ( designator ':=' expression | designator | gotoStatement )
			int alt240=3;
			switch ( input.LA(1) ) {
			case TkHexNum:
			case TkIntNum:
				{
				int LA240_1 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkRealNum:
				{
				int LA240_2 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkAsmHexNum:
				{
				int LA240_3 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ControlString:
				{
				int LA240_4 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QuotedString:
				{
				int LA240_5 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TkIdentifier:
				{
				int LA240_6 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 199:
				{
				int LA240_7 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				int LA240_8 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NIL:
				{
				int LA240_9 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TRUE:
				{
				int LA240_10 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FALSE:
				{
				int LA240_11 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				int LA240_12 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACK:
				{
				int LA240_13 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXIT:
				{
				int LA240_14 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}
				else if ( (true) ) {
					alt240=3;
				}

				}
				break;
			case FILE:
				{
				int LA240_15 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 15, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT2:
			case MINUS:
			case NOT:
			case PLUS:
				{
				int LA240_16 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case INHERITED:
				{
				int LA240_17 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GOTO:
				{
				alt240=3;
				}
				break;
			case BREAK:
				{
				int LA240_19 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}
				else if ( (true) ) {
					alt240=3;
				}

				}
				break;
			case CONTINUE:
				{
				int LA240_20 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}
				else if ( (true) ) {
					alt240=3;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case CONTAINS:
			case DEFAULT:
			case DEPRECATED:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case VARIANT:
			case WRITE:
				{
				int LA240_21 = input.LA(2);
				if ( (synpred353_Delphi()) ) {
					alt240=1;
				}
				else if ( (synpred354_Delphi()) ) {
					alt240=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 240, 21, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 240, 0, input);
				throw nvae;
			}
			switch (alt240) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:32: designator ':=' expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16069);
					designator729=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator729.getTree());

					string_literal730=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_simpleStatement16071); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal730_tree = (Object)adaptor.create(string_literal730);
					adaptor.addChild(root_0, string_literal730_tree);
					}

					pushFollow(FOLLOW_expression_in_simpleStatement16073);
					expression731=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression731.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: designator
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_designator_in_simpleStatement16106);
					designator732=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator732.getTree());

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:584:32: gotoStatement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_gotoStatement_in_simpleStatement16140);
					gotoStatement733=gotoStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, gotoStatement733.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 151, simpleStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "simpleStatement"


	public static class gotoStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "gotoStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:586:1: gotoStatement : ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' );
	public final DelphiParser.gotoStatement_return gotoStatement() throws RecognitionException {
		DelphiParser.gotoStatement_return retval = new DelphiParser.gotoStatement_return();
		retval.start = input.LT(1);
		int gotoStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal734=null;
		Token string_literal736=null;
		Token char_literal737=null;
		Token char_literal739=null;
		Token string_literal740=null;
		Token string_literal741=null;
		ParserRuleReturnScope label735 =null;
		ParserRuleReturnScope expression738 =null;

		Object string_literal734_tree=null;
		Object string_literal736_tree=null;
		Object char_literal737_tree=null;
		Object char_literal739_tree=null;
		Object string_literal740_tree=null;
		Object string_literal741_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:586:30: ( 'goto' label | 'exit' ( '(' expression ')' )? | 'break' | 'continue' )
			int alt242=4;
			switch ( input.LA(1) ) {
			case GOTO:
				{
				alt242=1;
				}
				break;
			case EXIT:
				{
				alt242=2;
				}
				break;
			case BREAK:
				{
				alt242=3;
				}
				break;
			case CONTINUE:
				{
				alt242=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 242, 0, input);
				throw nvae;
			}
			switch (alt242) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:586:32: 'goto' label
					{
					root_0 = (Object)adaptor.nil();


					string_literal734=(Token)match(input,GOTO,FOLLOW_GOTO_in_gotoStatement16192); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal734_tree = (Object)adaptor.create(string_literal734);
					adaptor.addChild(root_0, string_literal734_tree);
					}

					pushFollow(FOLLOW_label_in_gotoStatement16194);
					label735=label();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, label735.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:32: 'exit' ( '(' expression ')' )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal736=(Token)match(input,EXIT,FOLLOW_EXIT_in_gotoStatement16227); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal736_tree = (Object)adaptor.create(string_literal736);
					adaptor.addChild(root_0, string_literal736_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:39: ( '(' expression ')' )?
					int alt241=2;
					int LA241_0 = input.LA(1);
					if ( (LA241_0==LPAREN) ) {
						int LA241_1 = input.LA(2);
						if ( (synpred356_Delphi()) ) {
							alt241=1;
						}
					}
					switch (alt241) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:40: '(' expression ')'
							{
							char_literal737=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_gotoStatement16230); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal737_tree = (Object)adaptor.create(char_literal737);
							adaptor.addChild(root_0, char_literal737_tree);
							}

							pushFollow(FOLLOW_expression_in_gotoStatement16232);
							expression738=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression738.getTree());

							char_literal739=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_gotoStatement16234); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal739_tree = (Object)adaptor.create(char_literal739);
							adaptor.addChild(root_0, char_literal739_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:588:32: 'break'
					{
					root_0 = (Object)adaptor.nil();


					string_literal740=(Token)match(input,BREAK,FOLLOW_BREAK_in_gotoStatement16269); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal740_tree = (Object)adaptor.create(string_literal740);
					adaptor.addChild(root_0, string_literal740_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:589:32: 'continue'
					{
					root_0 = (Object)adaptor.nil();


					string_literal741=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_gotoStatement16302); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal741_tree = (Object)adaptor.create(string_literal741);
					adaptor.addChild(root_0, string_literal741_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 152, gotoStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "gotoStatement"


	public static class constExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constExpression"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:1: constExpression : ( expression | '(' recordConstExpression ( recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' );
	public final DelphiParser.constExpression_return constExpression() throws RecognitionException {
		DelphiParser.constExpression_return retval = new DelphiParser.constExpression_return();
		retval.start = input.LT(1);
		int constExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal743=null;
		Token char_literal746=null;
		Token char_literal747=null;
		Token char_literal749=null;
		Token char_literal751=null;
		ParserRuleReturnScope expression742 =null;
		ParserRuleReturnScope recordConstExpression744 =null;
		ParserRuleReturnScope recordConstExpression745 =null;
		ParserRuleReturnScope constExpression748 =null;
		ParserRuleReturnScope constExpression750 =null;

		Object char_literal743_tree=null;
		Object char_literal746_tree=null;
		Object char_literal747_tree=null;
		Object char_literal749_tree=null;
		Object char_literal751_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:30: ( expression | '(' recordConstExpression ( recordConstExpression )* ')' | '(' constExpression ( ',' constExpression )* ')' )
			int alt245=3;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==ADD||LA245_0==ANSISTRING||(LA245_0 >= AT && LA245_0 <= AT2)||LA245_0==BREAK||(LA245_0 >= CONTAINS && LA245_0 <= ControlString)||(LA245_0 >= DEFAULT && LA245_0 <= DEPRECATED)||LA245_0==EXIT||LA245_0==EXPORT||LA245_0==FALSE||(LA245_0 >= FILE && LA245_0 <= FINAL)||LA245_0==FUNCTION||LA245_0==HELPER||LA245_0==IMPLEMENTS||(LA245_0 >= INDEX && LA245_0 <= INHERITED)||LA245_0==LBRACK||LA245_0==LOCAL||(LA245_0 >= MESSAGE && LA245_0 <= MINUS)||LA245_0==NAME||LA245_0==NIL||LA245_0==NOT||LA245_0==OBJECT||LA245_0==OPERATOR||LA245_0==OUT||LA245_0==PACKAGE||(LA245_0 >= PLUS && LA245_0 <= POINTER)||LA245_0==PROCEDURE||LA245_0==QuotedString||(LA245_0 >= READ && LA245_0 <= READONLY)||(LA245_0 >= REFERENCE && LA245_0 <= REGISTER)||LA245_0==REMOVE||(LA245_0 >= STORED && LA245_0 <= STRING)||LA245_0==TRUE||LA245_0==TkAsmHexNum||(LA245_0 >= TkHexNum && LA245_0 <= TkIntNum)||LA245_0==TkRealNum||LA245_0==VARIANT||LA245_0==WRITE||LA245_0==199) ) {
				alt245=1;
			}
			else if ( (LA245_0==LPAREN) ) {
				int LA245_14 = input.LA(2);
				if ( (synpred359_Delphi()) ) {
					alt245=1;
				}
				else if ( (synpred361_Delphi()) ) {
					alt245=2;
				}
				else if ( (true) ) {
					alt245=3;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 245, 0, input);
				throw nvae;
			}

			switch (alt245) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: expression
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_in_constExpression16355);
					expression742=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression742.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:32: '(' recordConstExpression ( recordConstExpression )* ')'
					{
					root_0 = (Object)adaptor.nil();


					char_literal743=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16388); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal743_tree = (Object)adaptor.create(char_literal743);
					adaptor.addChild(root_0, char_literal743_tree);
					}

					pushFollow(FOLLOW_recordConstExpression_in_constExpression16390);
					recordConstExpression744=recordConstExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression744.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:58: ( recordConstExpression )*
					loop243:
					while (true) {
						int alt243=2;
						int LA243_0 = input.LA(1);
						if ( (LA243_0==ADD||LA243_0==ANSISTRING||LA243_0==AT||LA243_0==BREAK||(LA243_0 >= CONTAINS && LA243_0 <= CONTINUE)||(LA243_0 >= DEFAULT && LA243_0 <= DEPRECATED)||LA243_0==EXIT||LA243_0==EXPORT||LA243_0==FINAL||LA243_0==HELPER||LA243_0==IMPLEMENTS||LA243_0==INDEX||LA243_0==LOCAL||LA243_0==MESSAGE||LA243_0==NAME||LA243_0==OBJECT||LA243_0==OPERATOR||LA243_0==OUT||LA243_0==PACKAGE||LA243_0==POINTER||(LA243_0 >= READ && LA243_0 <= READONLY)||(LA243_0 >= REFERENCE && LA243_0 <= REGISTER)||LA243_0==REMOVE||(LA243_0 >= STORED && LA243_0 <= STRING)||LA243_0==TkIdentifier||LA243_0==VARIANT||LA243_0==WRITE||LA243_0==199) ) {
							alt243=1;
						}

						switch (alt243) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:59: recordConstExpression
							{
							pushFollow(FOLLOW_recordConstExpression_in_constExpression16393);
							recordConstExpression745=recordConstExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, recordConstExpression745.getTree());

							}
							break;

						default :
							break loop243;
						}
					}

					char_literal746=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16397); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal746_tree = (Object)adaptor.create(char_literal746);
					adaptor.addChild(root_0, char_literal746_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:596:32: '(' constExpression ( ',' constExpression )* ')'
					{
					root_0 = (Object)adaptor.nil();


					char_literal747=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_constExpression16430); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal747_tree = (Object)adaptor.create(char_literal747);
					adaptor.addChild(root_0, char_literal747_tree);
					}

					pushFollow(FOLLOW_constExpression_in_constExpression16432);
					constExpression748=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression748.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:596:52: ( ',' constExpression )*
					loop244:
					while (true) {
						int alt244=2;
						int LA244_0 = input.LA(1);
						if ( (LA244_0==COMMA) ) {
							alt244=1;
						}

						switch (alt244) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:596:53: ',' constExpression
							{
							char_literal749=(Token)match(input,COMMA,FOLLOW_COMMA_in_constExpression16435); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal749_tree = (Object)adaptor.create(char_literal749);
							adaptor.addChild(root_0, char_literal749_tree);
							}

							pushFollow(FOLLOW_constExpression_in_constExpression16437);
							constExpression750=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression750.getTree());

							}
							break;

						default :
							break loop244;
						}
					}

					char_literal751=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_constExpression16441); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal751_tree = (Object)adaptor.create(char_literal751);
					adaptor.addChild(root_0, char_literal751_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 153, constExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "constExpression"


	public static class recordConstExpression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "recordConstExpression"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:1: recordConstExpression : ident ':' constExpression ( ';' )? ;
	public final DelphiParser.recordConstExpression_return recordConstExpression() throws RecognitionException {
		DelphiParser.recordConstExpression_return retval = new DelphiParser.recordConstExpression_return();
		retval.start = input.LT(1);
		int recordConstExpression_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal753=null;
		Token char_literal755=null;
		ParserRuleReturnScope ident752 =null;
		ParserRuleReturnScope constExpression754 =null;

		Object char_literal753_tree=null;
		Object char_literal755_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:30: ( ident ':' constExpression ( ';' )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:32: ident ':' constExpression ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_recordConstExpression16485);
			ident752=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident752.getTree());

			char_literal753=(Token)match(input,COLON,FOLLOW_COLON_in_recordConstExpression16487); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal753_tree = (Object)adaptor.create(char_literal753);
			adaptor.addChild(root_0, char_literal753_tree);
			}

			pushFollow(FOLLOW_constExpression_in_recordConstExpression16489);
			constExpression754=constExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression754.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:58: ( ';' )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==SEMI) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:598:59: ';'
					{
					char_literal755=(Token)match(input,SEMI,FOLLOW_SEMI_in_recordConstExpression16492); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal755_tree = (Object)adaptor.create(char_literal755);
					adaptor.addChild(root_0, char_literal755_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 154, recordConstExpression_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "recordConstExpression"


	public static class tryStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "tryStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:1: tryStatement : ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' );
	public final DelphiParser.tryStatement_return tryStatement() throws RecognitionException {
		DelphiParser.tryStatement_return retval = new DelphiParser.tryStatement_return();
		retval.start = input.LT(1);
		int tryStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal756=null;
		Token string_literal758=null;
		Token string_literal760=null;
		Token string_literal761=null;
		Token string_literal763=null;
		Token string_literal765=null;
		ParserRuleReturnScope statementList757 =null;
		ParserRuleReturnScope handlerList759 =null;
		ParserRuleReturnScope statementList762 =null;
		ParserRuleReturnScope statementList764 =null;

		Object string_literal756_tree=null;
		Object string_literal758_tree=null;
		Object string_literal760_tree=null;
		Object string_literal761_tree=null;
		Object string_literal763_tree=null;
		Object string_literal765_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:30: ( 'try' ( statementList )? 'except' handlerList 'end' | 'try' ( statementList )? 'finally' ( statementList )? 'end' )
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==TRY) ) {
				int LA250_1 = input.LA(2);
				if ( (synpred365_Delphi()) ) {
					alt250=1;
				}
				else if ( (true) ) {
					alt250=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 250, 0, input);
				throw nvae;
			}

			switch (alt250) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:32: 'try' ( statementList )? 'except' handlerList 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal756=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement16550); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal756_tree = (Object)adaptor.create(string_literal756);
					adaptor.addChild(root_0, string_literal756_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:38: ( statementList )?
					int alt247=2;
					int LA247_0 = input.LA(1);
					if ( (LA247_0==ADD||LA247_0==ANSISTRING||LA247_0==ASM||(LA247_0 >= AT && LA247_0 <= AT2)||(LA247_0 >= BEGIN && LA247_0 <= CASE)||(LA247_0 >= CONTAINS && LA247_0 <= ControlString)||(LA247_0 >= DEFAULT && LA247_0 <= DEPRECATED)||LA247_0==EXIT||LA247_0==EXPORT||LA247_0==FALSE||(LA247_0 >= FILE && LA247_0 <= FINAL)||LA247_0==FOR||LA247_0==GOTO||LA247_0==HELPER||LA247_0==IF||LA247_0==IMPLEMENTS||(LA247_0 >= INDEX && LA247_0 <= INHERITED)||LA247_0==LBRACK||(LA247_0 >= LOCAL && LA247_0 <= LPAREN)||(LA247_0 >= MESSAGE && LA247_0 <= MINUS)||LA247_0==NAME||LA247_0==NIL||LA247_0==NOT||LA247_0==OBJECT||LA247_0==OPERATOR||LA247_0==OUT||LA247_0==PACKAGE||(LA247_0 >= PLUS && LA247_0 <= POINTER)||(LA247_0 >= QuotedString && LA247_0 <= RAISE)||(LA247_0 >= READ && LA247_0 <= READONLY)||(LA247_0 >= REFERENCE && LA247_0 <= REGISTER)||(LA247_0 >= REMOVE && LA247_0 <= REPEAT)||LA247_0==SEMI||(LA247_0 >= STORED && LA247_0 <= STRING)||(LA247_0 >= TRUE && LA247_0 <= TRY)||LA247_0==TkAsmHexNum||(LA247_0 >= TkHexNum && LA247_0 <= TkIntNum)||LA247_0==TkRealNum||LA247_0==VARIANT||(LA247_0 >= WHILE && LA247_0 <= WRITE)||LA247_0==199) ) {
						alt247=1;
					}
					else if ( (LA247_0==EXCEPT) ) {
						int LA247_2 = input.LA(2);
						if ( (synpred364_Delphi()) ) {
							alt247=1;
						}
					}
					switch (alt247) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16553);
							statementList757=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList757.getTree());

							}
							break;

					}

					string_literal758=(Token)match(input,EXCEPT,FOLLOW_EXCEPT_in_tryStatement16557); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal758_tree = (Object)adaptor.create(string_literal758);
					adaptor.addChild(root_0, string_literal758_tree);
					}

					pushFollow(FOLLOW_handlerList_in_tryStatement16559);
					handlerList759=handlerList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerList759.getTree());

					string_literal760=(Token)match(input,END,FOLLOW_END_in_tryStatement16561); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal760_tree = (Object)adaptor.create(string_literal760);
					adaptor.addChild(root_0, string_literal760_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:32: 'try' ( statementList )? 'finally' ( statementList )? 'end'
					{
					root_0 = (Object)adaptor.nil();


					string_literal761=(Token)match(input,TRY,FOLLOW_TRY_in_tryStatement16594); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal761_tree = (Object)adaptor.create(string_literal761);
					adaptor.addChild(root_0, string_literal761_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:38: ( statementList )?
					int alt248=2;
					int LA248_0 = input.LA(1);
					if ( (LA248_0==ADD||LA248_0==ANSISTRING||LA248_0==ASM||(LA248_0 >= AT && LA248_0 <= AT2)||(LA248_0 >= BEGIN && LA248_0 <= CASE)||(LA248_0 >= CONTAINS && LA248_0 <= ControlString)||(LA248_0 >= DEFAULT && LA248_0 <= DEPRECATED)||LA248_0==EXIT||LA248_0==EXPORT||LA248_0==FALSE||(LA248_0 >= FILE && LA248_0 <= FINAL)||LA248_0==FOR||LA248_0==GOTO||LA248_0==HELPER||LA248_0==IF||LA248_0==IMPLEMENTS||(LA248_0 >= INDEX && LA248_0 <= INHERITED)||LA248_0==LBRACK||(LA248_0 >= LOCAL && LA248_0 <= LPAREN)||(LA248_0 >= MESSAGE && LA248_0 <= MINUS)||LA248_0==NAME||LA248_0==NIL||LA248_0==NOT||LA248_0==OBJECT||LA248_0==OPERATOR||LA248_0==OUT||LA248_0==PACKAGE||(LA248_0 >= PLUS && LA248_0 <= POINTER)||(LA248_0 >= QuotedString && LA248_0 <= RAISE)||(LA248_0 >= READ && LA248_0 <= READONLY)||(LA248_0 >= REFERENCE && LA248_0 <= REGISTER)||(LA248_0 >= REMOVE && LA248_0 <= REPEAT)||LA248_0==SEMI||(LA248_0 >= STORED && LA248_0 <= STRING)||(LA248_0 >= TRUE && LA248_0 <= TRY)||LA248_0==TkAsmHexNum||(LA248_0 >= TkHexNum && LA248_0 <= TkIntNum)||LA248_0==TkRealNum||LA248_0==VARIANT||(LA248_0 >= WHILE && LA248_0 <= WRITE)||LA248_0==199) ) {
						alt248=1;
					}
					else if ( (LA248_0==FINALLY) ) {
						int LA248_2 = input.LA(2);
						if ( (synpred366_Delphi()) ) {
							alt248=1;
						}
					}
					switch (alt248) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:39: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16597);
							statementList762=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList762.getTree());

							}
							break;

					}

					string_literal763=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_tryStatement16601); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal763_tree = (Object)adaptor.create(string_literal763);
					adaptor.addChild(root_0, string_literal763_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:65: ( statementList )?
					int alt249=2;
					int LA249_0 = input.LA(1);
					if ( (LA249_0==ADD||LA249_0==ANSISTRING||LA249_0==ASM||(LA249_0 >= AT && LA249_0 <= AT2)||(LA249_0 >= BEGIN && LA249_0 <= CASE)||(LA249_0 >= CONTAINS && LA249_0 <= ControlString)||(LA249_0 >= DEFAULT && LA249_0 <= DEPRECATED)||LA249_0==EXIT||LA249_0==EXPORT||LA249_0==FALSE||(LA249_0 >= FILE && LA249_0 <= FINAL)||LA249_0==FOR||LA249_0==GOTO||LA249_0==HELPER||LA249_0==IF||LA249_0==IMPLEMENTS||(LA249_0 >= INDEX && LA249_0 <= INHERITED)||LA249_0==LBRACK||(LA249_0 >= LOCAL && LA249_0 <= LPAREN)||(LA249_0 >= MESSAGE && LA249_0 <= MINUS)||LA249_0==NAME||LA249_0==NIL||LA249_0==NOT||LA249_0==OBJECT||LA249_0==OPERATOR||LA249_0==OUT||LA249_0==PACKAGE||(LA249_0 >= PLUS && LA249_0 <= POINTER)||(LA249_0 >= QuotedString && LA249_0 <= RAISE)||(LA249_0 >= READ && LA249_0 <= READONLY)||(LA249_0 >= REFERENCE && LA249_0 <= REGISTER)||(LA249_0 >= REMOVE && LA249_0 <= REPEAT)||LA249_0==SEMI||(LA249_0 >= STORED && LA249_0 <= STRING)||(LA249_0 >= TRUE && LA249_0 <= TRY)||LA249_0==TkAsmHexNum||(LA249_0 >= TkHexNum && LA249_0 <= TkIntNum)||LA249_0==TkRealNum||LA249_0==VARIANT||(LA249_0 >= WHILE && LA249_0 <= WRITE)||LA249_0==199) ) {
						alt249=1;
					}
					else if ( (LA249_0==END) ) {
						int LA249_2 = input.LA(2);
						if ( (synpred367_Delphi()) ) {
							alt249=1;
						}
					}
					switch (alt249) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:66: statementList
							{
							pushFollow(FOLLOW_statementList_in_tryStatement16604);
							statementList764=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList764.getTree());

							}
							break;

					}

					string_literal765=(Token)match(input,END,FOLLOW_END_in_tryStatement16608); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal765_tree = (Object)adaptor.create(string_literal765);
					adaptor.addChild(root_0, string_literal765_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 155, tryStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "tryStatement"


	public static class handlerList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:1: handlerList : ( ( handler )* ( 'else' statementList )? | statementList );
	public final DelphiParser.handlerList_return handlerList() throws RecognitionException {
		DelphiParser.handlerList_return retval = new DelphiParser.handlerList_return();
		retval.start = input.LT(1);
		int handlerList_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal767=null;
		ParserRuleReturnScope handler766 =null;
		ParserRuleReturnScope statementList768 =null;
		ParserRuleReturnScope statementList769 =null;

		Object string_literal767_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:30: ( ( handler )* ( 'else' statementList )? | statementList )
			int alt253=2;
			switch ( input.LA(1) ) {
			case ELSE:
			case ON:
				{
				alt253=1;
				}
				break;
			case END:
				{
				int LA253_2 = input.LA(2);
				if ( (synpred370_Delphi()) ) {
					alt253=1;
				}
				else if ( (true) ) {
					alt253=2;
				}

				}
				break;
			case ADD:
			case ANSISTRING:
			case ASM:
			case AT:
			case AT2:
			case BEGIN:
			case BREAK:
			case CASE:
			case CONTAINS:
			case CONTINUE:
			case ControlString:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FALSE:
			case FILE:
			case FINAL:
			case FOR:
			case GOTO:
			case HELPER:
			case IF:
			case IMPLEMENTS:
			case INDEX:
			case INHERITED:
			case LBRACK:
			case LOCAL:
			case LPAREN:
			case MESSAGE:
			case MINUS:
			case NAME:
			case NIL:
			case NOT:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case PLUS:
			case POINTER:
			case QuotedString:
			case RAISE:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case REPEAT:
			case SEMI:
			case STORED:
			case STRICT:
			case STRING:
			case TRUE:
			case TRY:
			case TkAsmHexNum:
			case TkHexNum:
			case TkIdentifier:
			case TkIntNum:
			case TkRealNum:
			case VARIANT:
			case WHILE:
			case WITH:
			case WRITE:
			case 199:
				{
				alt253=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 253, 0, input);
				throw nvae;
			}
			switch (alt253) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: ( handler )* ( 'else' statementList )?
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: ( handler )*
					loop251:
					while (true) {
						int alt251=2;
						int LA251_0 = input.LA(1);
						if ( (LA251_0==ON) ) {
							alt251=1;
						}

						switch (alt251) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:33: handler
							{
							pushFollow(FOLLOW_handler_in_handlerList16663);
							handler766=handler();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, handler766.getTree());

							}
							break;

						default :
							break loop251;
						}
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:43: ( 'else' statementList )?
					int alt252=2;
					int LA252_0 = input.LA(1);
					if ( (LA252_0==ELSE) ) {
						alt252=1;
					}
					switch (alt252) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:44: 'else' statementList
							{
							string_literal767=(Token)match(input,ELSE,FOLLOW_ELSE_in_handlerList16668); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal767_tree = (Object)adaptor.create(string_literal767);
							adaptor.addChild(root_0, string_literal767_tree);
							}

							pushFollow(FOLLOW_statementList_in_handlerList16670);
							statementList768=statementList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList768.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:607:32: statementList
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statementList_in_handlerList16705);
					statementList769=statementList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statementList769.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 156, handlerList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerList"


	public static class handler_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:1: handler : 'on' ( handlerIdent )? typeId 'do' handlerStatement ;
	public final DelphiParser.handler_return handler() throws RecognitionException {
		DelphiParser.handler_return retval = new DelphiParser.handler_return();
		retval.start = input.LT(1);
		int handler_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal770=null;
		Token string_literal773=null;
		ParserRuleReturnScope handlerIdent771 =null;
		ParserRuleReturnScope typeId772 =null;
		ParserRuleReturnScope handlerStatement774 =null;

		Object string_literal770_tree=null;
		Object string_literal773_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:30: ( 'on' ( handlerIdent )? typeId 'do' handlerStatement )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:32: 'on' ( handlerIdent )? typeId 'do' handlerStatement
			{
			root_0 = (Object)adaptor.nil();


			string_literal770=(Token)match(input,ON,FOLLOW_ON_in_handler16763); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal770_tree = (Object)adaptor.create(string_literal770);
			adaptor.addChild(root_0, string_literal770_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:37: ( handlerIdent )?
			int alt254=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA254_1 = input.LA(2);
					if ( (LA254_1==COLON) ) {
						alt254=1;
					}
					}
					break;
				case 199:
					{
					int LA254_2 = input.LA(2);
					if ( (LA254_2==TkIdentifier) ) {
						int LA254_6 = input.LA(3);
						if ( (LA254_6==COLON) ) {
							alt254=1;
						}
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA254_3 = input.LA(2);
					if ( (LA254_3==COLON) ) {
						alt254=1;
					}
					}
					break;
			}
			switch (alt254) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:609:38: handlerIdent
					{
					pushFollow(FOLLOW_handlerIdent_in_handler16766);
					handlerIdent771=handlerIdent();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerIdent771.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_typeId_in_handler16770);
			typeId772=typeId();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, typeId772.getTree());

			string_literal773=(Token)match(input,DO,FOLLOW_DO_in_handler16772); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal773_tree = (Object)adaptor.create(string_literal773);
			adaptor.addChild(root_0, string_literal773_tree);
			}

			pushFollow(FOLLOW_handlerStatement_in_handler16774);
			handlerStatement774=handlerStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, handlerStatement774.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 157, handler_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handler"


	public static class handlerIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerIdent"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:1: handlerIdent : ident ':' ;
	public final DelphiParser.handlerIdent_return handlerIdent() throws RecognitionException {
		DelphiParser.handlerIdent_return retval = new DelphiParser.handlerIdent_return();
		retval.start = input.LT(1);
		int handlerIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal776=null;
		ParserRuleReturnScope ident775 =null;

		Object char_literal776_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:30: ( ident ':' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:611:32: ident ':'
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_handlerIdent16829);
			ident775=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident775.getTree());

			char_literal776=(Token)match(input,COLON,FOLLOW_COLON_in_handlerIdent16831); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal776_tree = (Object)adaptor.create(char_literal776);
			adaptor.addChild(root_0, char_literal776_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 158, handlerIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerIdent"


	public static class handlerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handlerStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:613:1: handlerStatement : ( statement ( ';' )? | ';' );
	public final DelphiParser.handlerStatement_return handlerStatement() throws RecognitionException {
		DelphiParser.handlerStatement_return retval = new DelphiParser.handlerStatement_return();
		retval.start = input.LT(1);
		int handlerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal778=null;
		Token char_literal779=null;
		ParserRuleReturnScope statement777 =null;

		Object char_literal778_tree=null;
		Object char_literal779_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:613:30: ( statement ( ';' )? | ';' )
			int alt256=2;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==ADD||LA256_0==ANSISTRING||LA256_0==ASM||(LA256_0 >= AT && LA256_0 <= AT2)||(LA256_0 >= BEGIN && LA256_0 <= CASE)||(LA256_0 >= CONTAINS && LA256_0 <= ControlString)||(LA256_0 >= DEFAULT && LA256_0 <= DEPRECATED)||LA256_0==EXIT||LA256_0==EXPORT||LA256_0==FALSE||(LA256_0 >= FILE && LA256_0 <= FINAL)||LA256_0==FOR||LA256_0==GOTO||LA256_0==HELPER||LA256_0==IF||LA256_0==IMPLEMENTS||(LA256_0 >= INDEX && LA256_0 <= INHERITED)||LA256_0==LBRACK||(LA256_0 >= LOCAL && LA256_0 <= LPAREN)||(LA256_0 >= MESSAGE && LA256_0 <= MINUS)||LA256_0==NAME||LA256_0==NIL||LA256_0==NOT||LA256_0==OBJECT||LA256_0==OPERATOR||LA256_0==OUT||LA256_0==PACKAGE||(LA256_0 >= PLUS && LA256_0 <= POINTER)||(LA256_0 >= QuotedString && LA256_0 <= RAISE)||(LA256_0 >= READ && LA256_0 <= READONLY)||(LA256_0 >= REFERENCE && LA256_0 <= REGISTER)||(LA256_0 >= REMOVE && LA256_0 <= REPEAT)||(LA256_0 >= STORED && LA256_0 <= STRING)||(LA256_0 >= TRUE && LA256_0 <= TRY)||LA256_0==TkAsmHexNum||(LA256_0 >= TkHexNum && LA256_0 <= TkIntNum)||LA256_0==TkRealNum||LA256_0==VARIANT||(LA256_0 >= WHILE && LA256_0 <= WRITE)||LA256_0==199) ) {
				alt256=1;
			}
			else if ( (LA256_0==SEMI) ) {
				alt256=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 256, 0, input);
				throw nvae;
			}

			switch (alt256) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:613:32: statement ( ';' )?
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_statement_in_handlerStatement16880);
					statement777=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statement777.getTree());

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:613:42: ( ';' )?
					int alt255=2;
					int LA255_0 = input.LA(1);
					if ( (LA255_0==SEMI) ) {
						alt255=1;
					}
					switch (alt255) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:613:43: ';'
							{
							char_literal778=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement16883); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal778_tree = (Object)adaptor.create(char_literal778);
							adaptor.addChild(root_0, char_literal778_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:614:32: ';'
					{
					root_0 = (Object)adaptor.nil();


					char_literal779=(Token)match(input,SEMI,FOLLOW_SEMI_in_handlerStatement16918); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal779_tree = (Object)adaptor.create(char_literal779);
					adaptor.addChild(root_0, char_literal779_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 159, handlerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "handlerStatement"


	public static class raiseStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "raiseStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:1: raiseStatement : 'raise' ( designator )? ( AT designator )? ;
	public final DelphiParser.raiseStatement_return raiseStatement() throws RecognitionException {
		DelphiParser.raiseStatement_return retval = new DelphiParser.raiseStatement_return();
		retval.start = input.LT(1);
		int raiseStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal780=null;
		Token AT782=null;
		ParserRuleReturnScope designator781 =null;
		ParserRuleReturnScope designator783 =null;

		Object string_literal780_tree=null;
		Object AT782_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:30: ( 'raise' ( designator )? ( AT designator )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:32: 'raise' ( designator )? ( AT designator )?
			{
			root_0 = (Object)adaptor.nil();


			string_literal780=(Token)match(input,RAISE,FOLLOW_RAISE_in_raiseStatement16969); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal780_tree = (Object)adaptor.create(string_literal780);
			adaptor.addChild(root_0, string_literal780_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:40: ( designator )?
			int alt257=2;
			switch ( input.LA(1) ) {
				case TkHexNum:
				case TkIntNum:
					{
					int LA257_1 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case TkRealNum:
					{
					int LA257_2 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case TkAsmHexNum:
					{
					int LA257_3 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case ControlString:
					{
					int LA257_4 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case QuotedString:
					{
					int LA257_5 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case TkIdentifier:
					{
					int LA257_6 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case 199:
					{
					int LA257_7 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case STRING:
					{
					int LA257_8 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case NIL:
					{
					int LA257_9 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case TRUE:
					{
					int LA257_10 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case FALSE:
					{
					int LA257_11 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case LPAREN:
					{
					int LA257_12 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case LBRACK:
					{
					int LA257_13 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case AT:
					{
					int LA257_14 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case FILE:
					{
					int LA257_15 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case AT2:
				case MINUS:
				case NOT:
				case PLUS:
					{
					int LA257_16 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case INHERITED:
					{
					int LA257_17 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case VARIANT:
				case WRITE:
					{
					int LA257_18 = input.LA(2);
					if ( (synpred374_Delphi()) ) {
						alt257=1;
					}
					}
					break;
			}
			switch (alt257) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:41: designator
					{
					pushFollow(FOLLOW_designator_in_raiseStatement16972);
					designator781=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator781.getTree());

					}
					break;

			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:54: ( AT designator )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==AT) ) {
				int LA258_1 = input.LA(2);
				if ( (synpred375_Delphi()) ) {
					alt258=1;
				}
			}
			switch (alt258) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:55: AT designator
					{
					AT782=(Token)match(input,AT,FOLLOW_AT_in_raiseStatement16977); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT782_tree = (Object)adaptor.create(AT782);
					adaptor.addChild(root_0, AT782_tree);
					}

					pushFollow(FOLLOW_designator_in_raiseStatement16979);
					designator783=designator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, designator783.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 160, raiseStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "raiseStatement"


	public static class assemblerStatement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "assemblerStatement"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:1: assemblerStatement : 'asm' (~ ( 'end' ) )* 'end' ;
	public final DelphiParser.assemblerStatement_return assemblerStatement() throws RecognitionException {
		DelphiParser.assemblerStatement_return retval = new DelphiParser.assemblerStatement_return();
		retval.start = input.LT(1);
		int assemblerStatement_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal784=null;
		Token set785=null;
		Token string_literal786=null;

		Object string_literal784_tree=null;
		Object set785_tree=null;
		Object string_literal786_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:30: ( 'asm' (~ ( 'end' ) )* 'end' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:32: 'asm' (~ ( 'end' ) )* 'end'
			{
			root_0 = (Object)adaptor.nil();


			string_literal784=(Token)match(input,ASM,FOLLOW_ASM_in_assemblerStatement17032); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal784_tree = (Object)adaptor.create(string_literal784);
			adaptor.addChild(root_0, string_literal784_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:621:38: (~ ( 'end' ) )*
			loop259:
			while (true) {
				int alt259=2;
				int LA259_0 = input.LA(1);
				if ( ((LA259_0 >= ABSOLUTE && LA259_0 <= ELSE)||(LA259_0 >= EQUAL && LA259_0 <= 199)) ) {
					alt259=1;
				}

				switch (alt259) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
					{
					set785=input.LT(1);
					if ( (input.LA(1) >= ABSOLUTE && input.LA(1) <= ELSE)||(input.LA(1) >= EQUAL && input.LA(1) <= 199) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set785));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop259;
				}
			}

			string_literal786=(Token)match(input,END,FOLLOW_END_in_assemblerStatement17040); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal786_tree = (Object)adaptor.create(string_literal786);
			adaptor.addChild(root_0, string_literal786_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 161, assemblerStatement_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "assemblerStatement"


	public static class methodDirectiveSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDirectiveSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:1: methodDirectiveSection : ( ( ( ';' )? methodDirective )* ';' | standaloneOverloadDirective );
	public final DelphiParser.methodDirectiveSection_return methodDirectiveSection() throws RecognitionException {
		DelphiParser.methodDirectiveSection_return retval = new DelphiParser.methodDirectiveSection_return();
		retval.start = input.LT(1);
		int methodDirectiveSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal787=null;
		Token char_literal789=null;
		ParserRuleReturnScope methodDirective788 =null;
		ParserRuleReturnScope standaloneOverloadDirective790 =null;

		Object char_literal787_tree=null;
		Object char_literal789_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:30: ( ( ( ';' )? methodDirective )* ';' | standaloneOverloadDirective )
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==SEMI) ) {
				int LA262_1 = input.LA(2);
				if ( (LA262_1==OVERLOAD) ) {
					int LA262_3 = input.LA(3);
					if ( (synpred380_Delphi()) ) {
						alt262=1;
					}
					else if ( (true) ) {
						alt262=2;
					}

				}
				else if ( (LA262_1==EOF||(LA262_1 >= ABSOLUTE && LA262_1 <= ADD)||LA262_1==ANSISTRING||(LA262_1 >= ASM && LA262_1 <= ASSEMBLER)||(LA262_1 >= AT && LA262_1 <= AUTOMATED)||(LA262_1 >= BEGIN && LA262_1 <= COMMA)||(LA262_1 >= CONST && LA262_1 <= ControlString)||(LA262_1 >= DEFAULT && LA262_1 <= DISPID)||(LA262_1 >= DO && LA262_1 <= DOWNTO)||LA262_1==DYNAMIC||(LA262_1 >= ELSE && LA262_1 <= FINALLY)||(LA262_1 >= FORWARD && LA262_1 <= FUNCTION)||(LA262_1 >= GT && LA262_1 <= HELPER)||(LA262_1 >= IMPLEMENTATION && LA262_1 <= IMPLEMENTS)||(LA262_1 >= INDEX && LA262_1 <= INLINE)||(LA262_1 >= LABEL && LA262_1 <= LBRACK)||(LA262_1 >= LIBRARY && LA262_1 <= LPAREN)||(LA262_1 >= MESSAGE && LA262_1 <= MINUS)||(LA262_1 >= NAME && LA262_1 <= NOT)||(LA262_1 >= OBJECT && LA262_1 <= OPERATOR)||LA262_1==OUT||(LA262_1 >= OVERRIDE && LA262_1 <= PACKAGE)||(LA262_1 >= PASCAL && LA262_1 <= POINTER)||(LA262_1 >= PRIVATE && LA262_1 <= PROCEDURE)||(LA262_1 >= PROPERTY && LA262_1 <= QuotedString)||LA262_1==RBRACK||(LA262_1 >= READ && LA262_1 <= READONLY)||(LA262_1 >= REFERENCE && LA262_1 <= REMOVE)||(LA262_1 >= RESIDENT && LA262_1 <= SAFECALL)||LA262_1==SEMI||(LA262_1 >= STATIC && LA262_1 <= TRUE)||LA262_1==TYPE||LA262_1==TkAsmHexNum||(LA262_1 >= TkHexNum && LA262_1 <= TkIntNum)||LA262_1==TkRealNum||(LA262_1 >= UNSAFE && LA262_1 <= UNTIL)||(LA262_1 >= VAR && LA262_1 <= VIRTUAL)||(LA262_1 >= WRITE && LA262_1 <= WRITEONLY)||LA262_1==199) ) {
					alt262=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 262, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA262_0==ABSTRACT||LA262_0==ASSEMBLER||LA262_0==CDECL||LA262_0==DEPRECATED||LA262_0==DISPID||LA262_0==DYNAMIC||(LA262_0 >= EXPERIMENTAL && LA262_0 <= EXPORT)||LA262_0==FAR||LA262_0==FINAL||LA262_0==INLINE||(LA262_0 >= LIBRARY && LA262_0 <= LOCAL)||LA262_0==MESSAGE||LA262_0==NEAR||(LA262_0 >= OVERLOAD && LA262_0 <= OVERRIDE)||(LA262_0 >= PASCAL && LA262_0 <= PLATFORM)||(LA262_0 >= REGISTER && LA262_0 <= REINTRODUCE)||LA262_0==SAFECALL||(LA262_0 >= STATIC && LA262_0 <= STDCALL)||LA262_0==VIRTUAL) ) {
				alt262=1;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 262, 0, input);
				throw nvae;
			}

			switch (alt262) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: ( ( ';' )? methodDirective )* ';'
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: ( ( ';' )? methodDirective )*
					loop261:
					while (true) {
						int alt261=2;
						int LA261_0 = input.LA(1);
						if ( (LA261_0==SEMI) ) {
							int LA261_1 = input.LA(2);
							if ( (synpred379_Delphi()) ) {
								alt261=1;
							}

						}
						else if ( (LA261_0==ABSTRACT||LA261_0==ASSEMBLER||LA261_0==CDECL||LA261_0==DEPRECATED||LA261_0==DISPID||LA261_0==DYNAMIC||(LA261_0 >= EXPERIMENTAL && LA261_0 <= EXPORT)||LA261_0==FAR||LA261_0==FINAL||LA261_0==INLINE||(LA261_0 >= LIBRARY && LA261_0 <= LOCAL)||LA261_0==MESSAGE||LA261_0==NEAR||(LA261_0 >= OVERLOAD && LA261_0 <= OVERRIDE)||(LA261_0 >= PASCAL && LA261_0 <= PLATFORM)||(LA261_0 >= REGISTER && LA261_0 <= REINTRODUCE)||LA261_0==SAFECALL||(LA261_0 >= STATIC && LA261_0 <= STDCALL)||LA261_0==VIRTUAL) ) {
							alt261=1;
						}

						switch (alt261) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:33: ( ';' )? methodDirective
							{
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:33: ( ';' )?
							int alt260=2;
							int LA260_0 = input.LA(1);
							if ( (LA260_0==SEMI) ) {
								alt260=1;
							}
							switch (alt260) {
								case 1 :
									// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:34: ';'
									{
									char_literal787=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDirectiveSection17108); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									char_literal787_tree = (Object)adaptor.create(char_literal787);
									adaptor.addChild(root_0, char_literal787_tree);
									}

									}
									break;

							}

							pushFollow(FOLLOW_methodDirective_in_methodDirectiveSection17112);
							methodDirective788=methodDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDirective788.getTree());

							}
							break;

						default :
							break loop261;
						}
					}

					char_literal789=(Token)match(input,SEMI,FOLLOW_SEMI_in_methodDirectiveSection17116); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal789_tree = (Object)adaptor.create(char_literal789);
					adaptor.addChild(root_0, char_literal789_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:627:32: standaloneOverloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_standaloneOverloadDirective_in_methodDirectiveSection17149);
					standaloneOverloadDirective790=standaloneOverloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, standaloneOverloadDirective790.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 162, methodDirectiveSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDirectiveSection"


	public static class functionDirectiveSection_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "functionDirectiveSection"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:1: functionDirectiveSection : ( ( ( ';' )? functionDirective )* ';' | standaloneOverloadDirective );
	public final DelphiParser.functionDirectiveSection_return functionDirectiveSection() throws RecognitionException {
		DelphiParser.functionDirectiveSection_return retval = new DelphiParser.functionDirectiveSection_return();
		retval.start = input.LT(1);
		int functionDirectiveSection_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal791=null;
		Token char_literal793=null;
		ParserRuleReturnScope functionDirective792 =null;
		ParserRuleReturnScope standaloneOverloadDirective794 =null;

		Object char_literal791_tree=null;
		Object char_literal793_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:30: ( ( ( ';' )? functionDirective )* ';' | standaloneOverloadDirective )
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==SEMI) ) {
				int LA265_1 = input.LA(2);
				if ( (LA265_1==OVERLOAD) ) {
					int LA265_3 = input.LA(3);
					if ( (synpred383_Delphi()) ) {
						alt265=1;
					}
					else if ( (true) ) {
						alt265=2;
					}

				}
				else if ( (LA265_1==EOF||(LA265_1 >= ABSOLUTE && LA265_1 <= ADD)||LA265_1==ANSISTRING||(LA265_1 >= ASM && LA265_1 <= ASSEMBLER)||(LA265_1 >= AT && LA265_1 <= AUTOMATED)||(LA265_1 >= BEGIN && LA265_1 <= COMMA)||(LA265_1 >= CONST && LA265_1 <= ControlString)||(LA265_1 >= DEFAULT && LA265_1 <= DISPID)||(LA265_1 >= DO && LA265_1 <= DOWNTO)||LA265_1==DYNAMIC||(LA265_1 >= ELSE && LA265_1 <= FINALLY)||(LA265_1 >= FORWARD && LA265_1 <= FUNCTION)||(LA265_1 >= GT && LA265_1 <= HELPER)||(LA265_1 >= IMPLEMENTATION && LA265_1 <= IMPLEMENTS)||(LA265_1 >= INDEX && LA265_1 <= INLINE)||(LA265_1 >= LABEL && LA265_1 <= LBRACK)||(LA265_1 >= LIBRARY && LA265_1 <= LPAREN)||(LA265_1 >= MESSAGE && LA265_1 <= MINUS)||(LA265_1 >= NAME && LA265_1 <= NOT)||(LA265_1 >= OBJECT && LA265_1 <= OPERATOR)||LA265_1==OUT||(LA265_1 >= OVERRIDE && LA265_1 <= PACKAGE)||(LA265_1 >= PASCAL && LA265_1 <= POINTER)||(LA265_1 >= PRIVATE && LA265_1 <= PROCEDURE)||(LA265_1 >= PROPERTY && LA265_1 <= QuotedString)||LA265_1==RBRACK||(LA265_1 >= READ && LA265_1 <= READONLY)||(LA265_1 >= REFERENCE && LA265_1 <= REMOVE)||(LA265_1 >= RESIDENT && LA265_1 <= SAFECALL)||LA265_1==SEMI||(LA265_1 >= STATIC && LA265_1 <= TRUE)||LA265_1==TYPE||LA265_1==TkAsmHexNum||(LA265_1 >= TkHexNum && LA265_1 <= TkIntNum)||LA265_1==TkRealNum||(LA265_1 >= UNSAFE && LA265_1 <= UNTIL)||(LA265_1 >= VAR && LA265_1 <= VIRTUAL)||(LA265_1 >= WRITE && LA265_1 <= WRITEONLY)||LA265_1==199) ) {
					alt265=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 265, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA265_0==ASSEMBLER||LA265_0==CDECL||LA265_0==DEPRECATED||(LA265_0 >= EXPERIMENTAL && LA265_0 <= EXPORT)||LA265_0==EXTERNAL||LA265_0==FAR||LA265_0==FORWARD||LA265_0==INLINE||(LA265_0 >= LIBRARY && LA265_0 <= LOCAL)||LA265_0==NEAR||LA265_0==OVERLOAD||(LA265_0 >= PASCAL && LA265_0 <= PLATFORM)||LA265_0==REGISTER||LA265_0==SAFECALL||LA265_0==STDCALL||LA265_0==UNSAFE||LA265_0==VARARGS) ) {
				alt265=1;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 265, 0, input);
				throw nvae;
			}

			switch (alt265) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: ( ( ';' )? functionDirective )* ';'
					{
					root_0 = (Object)adaptor.nil();


					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: ( ( ';' )? functionDirective )*
					loop264:
					while (true) {
						int alt264=2;
						int LA264_0 = input.LA(1);
						if ( (LA264_0==SEMI) ) {
							int LA264_1 = input.LA(2);
							if ( (synpred382_Delphi()) ) {
								alt264=1;
							}

						}
						else if ( (LA264_0==ASSEMBLER||LA264_0==CDECL||LA264_0==DEPRECATED||(LA264_0 >= EXPERIMENTAL && LA264_0 <= EXPORT)||LA264_0==EXTERNAL||LA264_0==FAR||LA264_0==FORWARD||LA264_0==INLINE||(LA264_0 >= LIBRARY && LA264_0 <= LOCAL)||LA264_0==NEAR||LA264_0==OVERLOAD||(LA264_0 >= PASCAL && LA264_0 <= PLATFORM)||LA264_0==REGISTER||LA264_0==SAFECALL||LA264_0==STDCALL||LA264_0==UNSAFE||LA264_0==VARARGS) ) {
							alt264=1;
						}

						switch (alt264) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:33: ( ';' )? functionDirective
							{
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:33: ( ';' )?
							int alt263=2;
							int LA263_0 = input.LA(1);
							if ( (LA263_0==SEMI) ) {
								alt263=1;
							}
							switch (alt263) {
								case 1 :
									// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:34: ';'
									{
									char_literal791=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirectiveSection17192); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									char_literal791_tree = (Object)adaptor.create(char_literal791);
									adaptor.addChild(root_0, char_literal791_tree);
									}

									}
									break;

							}

							pushFollow(FOLLOW_functionDirective_in_functionDirectiveSection17196);
							functionDirective792=functionDirective();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDirective792.getTree());

							}
							break;

						default :
							break loop264;
						}
					}

					char_literal793=(Token)match(input,SEMI,FOLLOW_SEMI_in_functionDirectiveSection17200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal793_tree = (Object)adaptor.create(char_literal793);
					adaptor.addChild(root_0, char_literal793_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:630:32: standaloneOverloadDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_standaloneOverloadDirective_in_functionDirectiveSection17233);
					standaloneOverloadDirective794=standaloneOverloadDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, standaloneOverloadDirective794.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 163, functionDirectiveSection_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "functionDirectiveSection"


	public static class standaloneOverloadDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "standaloneOverloadDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:1: standaloneOverloadDirective : ';' 'overload' ( ';' )? ;
	public final DelphiParser.standaloneOverloadDirective_return standaloneOverloadDirective() throws RecognitionException {
		DelphiParser.standaloneOverloadDirective_return retval = new DelphiParser.standaloneOverloadDirective_return();
		retval.start = input.LT(1);
		int standaloneOverloadDirective_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal795=null;
		Token string_literal796=null;
		Token char_literal797=null;

		Object char_literal795_tree=null;
		Object string_literal796_tree=null;
		Object char_literal797_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:30: ( ';' 'overload' ( ';' )? )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:32: ';' 'overload' ( ';' )?
			{
			root_0 = (Object)adaptor.nil();


			char_literal795=(Token)match(input,SEMI,FOLLOW_SEMI_in_standaloneOverloadDirective17271); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal795_tree = (Object)adaptor.create(char_literal795);
			adaptor.addChild(root_0, char_literal795_tree);
			}

			string_literal796=(Token)match(input,OVERLOAD,FOLLOW_OVERLOAD_in_standaloneOverloadDirective17273); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal796_tree = (Object)adaptor.create(string_literal796);
			adaptor.addChild(root_0, string_literal796_tree);
			}

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:47: ( ';' )?
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==SEMI) ) {
				int LA266_1 = input.LA(2);
				if ( (synpred384_Delphi()) ) {
					alt266=1;
				}
			}
			switch (alt266) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:48: ';'
					{
					char_literal797=(Token)match(input,SEMI,FOLLOW_SEMI_in_standaloneOverloadDirective17276); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal797_tree = (Object)adaptor.create(char_literal797);
					adaptor.addChild(root_0, char_literal797_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 164, standaloneOverloadDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "standaloneOverloadDirective"


	public static class methodDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "methodDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:1: methodDirective : ( 'overload' | 'reintroduce' | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective | oldCallConventionDirective | dispIDDirective );
	public final DelphiParser.methodDirective_return methodDirective() throws RecognitionException {
		DelphiParser.methodDirective_return retval = new DelphiParser.methodDirective_return();
		retval.start = input.LT(1);
		int methodDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal798=null;
		Token string_literal799=null;
		ParserRuleReturnScope bindingDirective800 =null;
		ParserRuleReturnScope abstractDirective801 =null;
		ParserRuleReturnScope inlineDirective802 =null;
		ParserRuleReturnScope callConvention803 =null;
		ParserRuleReturnScope hintingDirective804 =null;
		ParserRuleReturnScope oldCallConventionDirective805 =null;
		ParserRuleReturnScope dispIDDirective806 =null;

		Object string_literal798_tree=null;
		Object string_literal799_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:30: ( 'overload' | 'reintroduce' | bindingDirective | abstractDirective | inlineDirective | callConvention | hintingDirective | oldCallConventionDirective | dispIDDirective )
			int alt267=9;
			switch ( input.LA(1) ) {
			case OVERLOAD:
				{
				alt267=1;
				}
				break;
			case REINTRODUCE:
				{
				alt267=2;
				}
				break;
			case DYNAMIC:
			case MESSAGE:
			case OVERRIDE:
			case STATIC:
			case VIRTUAL:
				{
				alt267=3;
				}
				break;
			case ABSTRACT:
			case FINAL:
				{
				alt267=4;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt267=5;
				}
				break;
			case CDECL:
			case EXPORT:
			case PASCAL:
			case REGISTER:
			case SAFECALL:
			case STDCALL:
				{
				alt267=6;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt267=7;
				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt267=8;
				}
				break;
			case DISPID:
				{
				alt267=9;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 267, 0, input);
				throw nvae;
			}
			switch (alt267) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:634:32: 'overload'
					{
					root_0 = (Object)adaptor.nil();


					string_literal798=(Token)match(input,OVERLOAD,FOLLOW_OVERLOAD_in_methodDirective17328); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal798_tree = (Object)adaptor.create(string_literal798);
					adaptor.addChild(root_0, string_literal798_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:635:32: 'reintroduce'
					{
					root_0 = (Object)adaptor.nil();


					string_literal799=(Token)match(input,REINTRODUCE,FOLLOW_REINTRODUCE_in_methodDirective17361); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal799_tree = (Object)adaptor.create(string_literal799);
					adaptor.addChild(root_0, string_literal799_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:636:32: bindingDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_bindingDirective_in_methodDirective17394);
					bindingDirective800=bindingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bindingDirective800.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:637:32: abstractDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_abstractDirective_in_methodDirective17427);
					abstractDirective801=abstractDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, abstractDirective801.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:638:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_methodDirective17461);
					inlineDirective802=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective802.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:639:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_methodDirective17497);
					callConvention803=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention803.getTree());

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:640:32: hintingDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_methodDirective17530);
					hintingDirective804=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective804.getTree());

					}
					break;
				case 8 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:641:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_methodDirective17565);
					oldCallConventionDirective805=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective805.getTree());

					}
					break;
				case 9 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:642:32: dispIDDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_dispIDDirective_in_methodDirective17598);
					dispIDDirective806=dispIDDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dispIDDirective806.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 165, methodDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "methodDirective"


	public static class functionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "functionDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:644:1: functionDirective : ( 'forward' | 'overload' | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective | externalDirective | 'unsafe' );
	public final DelphiParser.functionDirective_return functionDirective() throws RecognitionException {
		DelphiParser.functionDirective_return retval = new DelphiParser.functionDirective_return();
		retval.start = input.LT(1);
		int functionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal807=null;
		Token string_literal808=null;
		Token string_literal814=null;
		ParserRuleReturnScope inlineDirective809 =null;
		ParserRuleReturnScope callConvention810 =null;
		ParserRuleReturnScope oldCallConventionDirective811 =null;
		ParserRuleReturnScope hintingDirective812 =null;
		ParserRuleReturnScope externalDirective813 =null;

		Object string_literal807_tree=null;
		Object string_literal808_tree=null;
		Object string_literal814_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:644:30: ( 'forward' | 'overload' | inlineDirective | callConvention | oldCallConventionDirective | hintingDirective | externalDirective | 'unsafe' )
			int alt268=8;
			switch ( input.LA(1) ) {
			case FORWARD:
				{
				alt268=1;
				}
				break;
			case OVERLOAD:
				{
				alt268=2;
				}
				break;
			case ASSEMBLER:
			case INLINE:
				{
				alt268=3;
				}
				break;
			case CDECL:
			case EXPORT:
			case PASCAL:
			case REGISTER:
			case SAFECALL:
			case STDCALL:
				{
				alt268=4;
				}
				break;
			case FAR:
			case LOCAL:
			case NEAR:
				{
				alt268=5;
				}
				break;
			case DEPRECATED:
			case EXPERIMENTAL:
			case LIBRARY:
			case PLATFORM:
				{
				alt268=6;
				}
				break;
			case EXTERNAL:
			case VARARGS:
				{
				alt268=7;
				}
				break;
			case UNSAFE:
				{
				alt268=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 268, 0, input);
				throw nvae;
			}
			switch (alt268) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:644:32: 'forward'
					{
					root_0 = (Object)adaptor.nil();


					string_literal807=(Token)match(input,FORWARD,FOLLOW_FORWARD_in_functionDirective17646); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal807_tree = (Object)adaptor.create(string_literal807);
					adaptor.addChild(root_0, string_literal807_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:645:32: 'overload'
					{
					root_0 = (Object)adaptor.nil();


					string_literal808=(Token)match(input,OVERLOAD,FOLLOW_OVERLOAD_in_functionDirective17679); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal808_tree = (Object)adaptor.create(string_literal808);
					adaptor.addChild(root_0, string_literal808_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:646:32: inlineDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inlineDirective_in_functionDirective17712);
					inlineDirective809=inlineDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inlineDirective809.getTree());

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:647:32: callConvention
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_callConvention_in_functionDirective17745);
					callConvention810=callConvention();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, callConvention810.getTree());

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:648:32: oldCallConventionDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_oldCallConventionDirective_in_functionDirective17778);
					oldCallConventionDirective811=oldCallConventionDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, oldCallConventionDirective811.getTree());

					}
					break;
				case 6 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:649:32: hintingDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_hintingDirective_in_functionDirective17811);
					hintingDirective812=hintingDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hintingDirective812.getTree());

					}
					break;
				case 7 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:650:32: externalDirective
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_externalDirective_in_functionDirective17844);
					externalDirective813=externalDirective();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, externalDirective813.getTree());

					}
					break;
				case 8 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:651:32: 'unsafe'
					{
					root_0 = (Object)adaptor.nil();


					string_literal814=(Token)match(input,UNSAFE,FOLLOW_UNSAFE_in_functionDirective17877); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal814_tree = (Object)adaptor.create(string_literal814);
					adaptor.addChild(root_0, string_literal814_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 166, functionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "functionDirective"


	public static class bindingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bindingDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:653:1: bindingDirective : ( 'message' expression | 'static' | 'dynamic' | 'override' | 'virtual' );
	public final DelphiParser.bindingDirective_return bindingDirective() throws RecognitionException {
		DelphiParser.bindingDirective_return retval = new DelphiParser.bindingDirective_return();
		retval.start = input.LT(1);
		int bindingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal815=null;
		Token string_literal817=null;
		Token string_literal818=null;
		Token string_literal819=null;
		Token string_literal820=null;
		ParserRuleReturnScope expression816 =null;

		Object string_literal815_tree=null;
		Object string_literal817_tree=null;
		Object string_literal818_tree=null;
		Object string_literal819_tree=null;
		Object string_literal820_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:653:30: ( 'message' expression | 'static' | 'dynamic' | 'override' | 'virtual' )
			int alt269=5;
			switch ( input.LA(1) ) {
			case MESSAGE:
				{
				alt269=1;
				}
				break;
			case STATIC:
				{
				alt269=2;
				}
				break;
			case DYNAMIC:
				{
				alt269=3;
				}
				break;
			case OVERRIDE:
				{
				alt269=4;
				}
				break;
			case VIRTUAL:
				{
				alt269=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 269, 0, input);
				throw nvae;
			}
			switch (alt269) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:653:32: 'message' expression
					{
					root_0 = (Object)adaptor.nil();


					string_literal815=(Token)match(input,MESSAGE,FOLLOW_MESSAGE_in_bindingDirective17928); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal815_tree = (Object)adaptor.create(string_literal815);
					adaptor.addChild(root_0, string_literal815_tree);
					}

					pushFollow(FOLLOW_expression_in_bindingDirective17930);
					expression816=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression816.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:654:32: 'static'
					{
					root_0 = (Object)adaptor.nil();


					string_literal817=(Token)match(input,STATIC,FOLLOW_STATIC_in_bindingDirective17963); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal817_tree = (Object)adaptor.create(string_literal817);
					adaptor.addChild(root_0, string_literal817_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:655:32: 'dynamic'
					{
					root_0 = (Object)adaptor.nil();


					string_literal818=(Token)match(input,DYNAMIC,FOLLOW_DYNAMIC_in_bindingDirective17996); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal818_tree = (Object)adaptor.create(string_literal818);
					adaptor.addChild(root_0, string_literal818_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:656:32: 'override'
					{
					root_0 = (Object)adaptor.nil();


					string_literal819=(Token)match(input,OVERRIDE,FOLLOW_OVERRIDE_in_bindingDirective18029); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal819_tree = (Object)adaptor.create(string_literal819);
					adaptor.addChild(root_0, string_literal819_tree);
					}

					}
					break;
				case 5 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:657:32: 'virtual'
					{
					root_0 = (Object)adaptor.nil();


					string_literal820=(Token)match(input,VIRTUAL,FOLLOW_VIRTUAL_in_bindingDirective18062); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal820_tree = (Object)adaptor.create(string_literal820);
					adaptor.addChild(root_0, string_literal820_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 167, bindingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "bindingDirective"


	public static class abstractDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "abstractDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:659:1: abstractDirective : ( 'abstract' | 'final' );
	public final DelphiParser.abstractDirective_return abstractDirective() throws RecognitionException {
		DelphiParser.abstractDirective_return retval = new DelphiParser.abstractDirective_return();
		retval.start = input.LT(1);
		int abstractDirective_StartIndex = input.index();

		Object root_0 = null;

		Token set821=null;

		Object set821_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:659:30: ( 'abstract' | 'final' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set821=input.LT(1);
			if ( input.LA(1)==ABSTRACT||input.LA(1)==FINAL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set821));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 168, abstractDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "abstractDirective"


	public static class inlineDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inlineDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:1: inlineDirective : ( 'inline' | 'assembler' );
	public final DelphiParser.inlineDirective_return inlineDirective() throws RecognitionException {
		DelphiParser.inlineDirective_return retval = new DelphiParser.inlineDirective_return();
		retval.start = input.LT(1);
		int inlineDirective_StartIndex = input.index();

		Object root_0 = null;

		Token set822=null;

		Object set822_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:662:30: ( 'inline' | 'assembler' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set822=input.LT(1);
			if ( input.LA(1)==ASSEMBLER||input.LA(1)==INLINE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set822));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 169, inlineDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "inlineDirective"


	public static class callConvention_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "callConvention"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:665:1: callConvention : ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' );
	public final DelphiParser.callConvention_return callConvention() throws RecognitionException {
		DelphiParser.callConvention_return retval = new DelphiParser.callConvention_return();
		retval.start = input.LT(1);
		int callConvention_StartIndex = input.index();

		Object root_0 = null;

		Token set823=null;

		Object set823_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:665:30: ( 'cdecl' | 'pascal' | 'register' | 'safecall' | 'stdcall' | 'export' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set823=input.LT(1);
			if ( input.LA(1)==CDECL||input.LA(1)==EXPORT||input.LA(1)==PASCAL||input.LA(1)==REGISTER||input.LA(1)==SAFECALL||input.LA(1)==STDCALL ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set823));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 170, callConvention_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "callConvention"


	public static class oldCallConventionDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "oldCallConventionDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:1: oldCallConventionDirective : ( 'far' | 'local' | 'near' );
	public final DelphiParser.oldCallConventionDirective_return oldCallConventionDirective() throws RecognitionException {
		DelphiParser.oldCallConventionDirective_return retval = new DelphiParser.oldCallConventionDirective_return();
		retval.start = input.LT(1);
		int oldCallConventionDirective_StartIndex = input.index();

		Object root_0 = null;

		Token set824=null;

		Object set824_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:672:30: ( 'far' | 'local' | 'near' )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set824=input.LT(1);
			if ( input.LA(1)==FAR||input.LA(1)==LOCAL||input.LA(1)==NEAR ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set824));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 171, oldCallConventionDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "oldCallConventionDirective"


	public static class hintingDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "hintingDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:1: hintingDirective : ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' );
	public final DelphiParser.hintingDirective_return hintingDirective() throws RecognitionException {
		DelphiParser.hintingDirective_return retval = new DelphiParser.hintingDirective_return();
		retval.start = input.LT(1);
		int hintingDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal825=null;
		Token string_literal827=null;
		Token string_literal828=null;
		Token string_literal829=null;
		ParserRuleReturnScope stringFactor826 =null;

		Object string_literal825_tree=null;
		Object string_literal827_tree=null;
		Object string_literal828_tree=null;
		Object string_literal829_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:30: ( 'deprecated' ( stringFactor )? | 'experimental' | 'platform' | 'library' )
			int alt271=4;
			switch ( input.LA(1) ) {
			case DEPRECATED:
				{
				alt271=1;
				}
				break;
			case EXPERIMENTAL:
				{
				alt271=2;
				}
				break;
			case PLATFORM:
				{
				alt271=3;
				}
				break;
			case LIBRARY:
				{
				alt271=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 271, 0, input);
				throw nvae;
			}
			switch (alt271) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:32: 'deprecated' ( stringFactor )?
					{
					root_0 = (Object)adaptor.nil();


					string_literal825=(Token)match(input,DEPRECATED,FOLLOW_DEPRECATED_in_hintingDirective18626); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal825_tree = (Object)adaptor.create(string_literal825);
					adaptor.addChild(root_0, string_literal825_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:45: ( stringFactor )?
					int alt270=2;
					int LA270_0 = input.LA(1);
					if ( (LA270_0==ControlString||LA270_0==QuotedString) ) {
						alt270=1;
					}
					switch (alt270) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:676:46: stringFactor
							{
							pushFollow(FOLLOW_stringFactor_in_hintingDirective18629);
							stringFactor826=stringFactor();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, stringFactor826.getTree());

							}
							break;

					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:677:32: 'experimental'
					{
					root_0 = (Object)adaptor.nil();


					string_literal827=(Token)match(input,EXPERIMENTAL,FOLLOW_EXPERIMENTAL_in_hintingDirective18664); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal827_tree = (Object)adaptor.create(string_literal827);
					adaptor.addChild(root_0, string_literal827_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:678:32: 'platform'
					{
					root_0 = (Object)adaptor.nil();


					string_literal828=(Token)match(input,PLATFORM,FOLLOW_PLATFORM_in_hintingDirective18699); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal828_tree = (Object)adaptor.create(string_literal828);
					adaptor.addChild(root_0, string_literal828_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:679:32: 'library'
					{
					root_0 = (Object)adaptor.nil();


					string_literal829=(Token)match(input,LIBRARY,FOLLOW_LIBRARY_in_hintingDirective18732); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal829_tree = (Object)adaptor.create(string_literal829);
					adaptor.addChild(root_0, string_literal829_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 172, hintingDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "hintingDirective"


	public static class externalDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:1: externalDirective : ( 'varargs' | 'external' ( constExpression )? ( externalSpecifier )* );
	public final DelphiParser.externalDirective_return externalDirective() throws RecognitionException {
		DelphiParser.externalDirective_return retval = new DelphiParser.externalDirective_return();
		retval.start = input.LT(1);
		int externalDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal830=null;
		Token string_literal831=null;
		ParserRuleReturnScope constExpression832 =null;
		ParserRuleReturnScope externalSpecifier833 =null;

		Object string_literal830_tree=null;
		Object string_literal831_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:30: ( 'varargs' | 'external' ( constExpression )? ( externalSpecifier )* )
			int alt274=2;
			int LA274_0 = input.LA(1);
			if ( (LA274_0==VARARGS) ) {
				alt274=1;
			}
			else if ( (LA274_0==EXTERNAL) ) {
				alt274=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 274, 0, input);
				throw nvae;
			}

			switch (alt274) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:681:32: 'varargs'
					{
					root_0 = (Object)adaptor.nil();


					string_literal830=(Token)match(input,VARARGS,FOLLOW_VARARGS_in_externalDirective18780); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal830_tree = (Object)adaptor.create(string_literal830);
					adaptor.addChild(root_0, string_literal830_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:32: 'external' ( constExpression )? ( externalSpecifier )*
					{
					root_0 = (Object)adaptor.nil();


					string_literal831=(Token)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_externalDirective18816); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal831_tree = (Object)adaptor.create(string_literal831);
					adaptor.addChild(root_0, string_literal831_tree);
					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:43: ( constExpression )?
					int alt272=2;
					switch ( input.LA(1) ) {
						case ADD:
						case ANSISTRING:
						case AT:
						case AT2:
						case BREAK:
						case CONTAINS:
						case CONTINUE:
						case ControlString:
						case DEFAULT:
						case EXIT:
						case FALSE:
						case FILE:
						case FINAL:
						case FUNCTION:
						case HELPER:
						case IMPLEMENTS:
						case INHERITED:
						case LBRACK:
						case LPAREN:
						case MESSAGE:
						case MINUS:
						case NIL:
						case NOT:
						case OBJECT:
						case OPERATOR:
						case OUT:
						case PACKAGE:
						case PLUS:
						case POINTER:
						case PROCEDURE:
						case QuotedString:
						case READ:
						case READONLY:
						case REFERENCE:
						case REMOVE:
						case STORED:
						case STRICT:
						case STRING:
						case TRUE:
						case TkAsmHexNum:
						case TkHexNum:
						case TkIdentifier:
						case TkIntNum:
						case TkRealNum:
						case VARIANT:
						case WRITE:
						case 199:
							{
							alt272=1;
							}
							break;
						case NAME:
							{
							int LA272_16 = input.LA(2);
							if ( (synpred418_Delphi()) ) {
								alt272=1;
							}
							}
							break;
						case INDEX:
							{
							int LA272_20 = input.LA(2);
							if ( (synpred418_Delphi()) ) {
								alt272=1;
							}
							}
							break;
						case EXPORT:
						case REGISTER:
							{
							int LA272_21 = input.LA(2);
							if ( (synpred418_Delphi()) ) {
								alt272=1;
							}
							}
							break;
						case LOCAL:
							{
							int LA272_26 = input.LA(2);
							if ( (synpred418_Delphi()) ) {
								alt272=1;
							}
							}
							break;
						case DEPRECATED:
							{
							int LA272_28 = input.LA(2);
							if ( (synpred418_Delphi()) ) {
								alt272=1;
							}
							}
							break;
					}
					switch (alt272) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:44: constExpression
							{
							pushFollow(FOLLOW_constExpression_in_externalDirective18819);
							constExpression832=constExpression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression832.getTree());

							}
							break;

					}

					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:62: ( externalSpecifier )*
					loop273:
					while (true) {
						int alt273=2;
						int LA273_0 = input.LA(1);
						if ( (LA273_0==INDEX||LA273_0==NAME) ) {
							alt273=1;
						}

						switch (alt273) {
						case 1 :
							// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:63: externalSpecifier
							{
							pushFollow(FOLLOW_externalSpecifier_in_externalDirective18824);
							externalSpecifier833=externalSpecifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, externalSpecifier833.getTree());

							}
							break;

						default :
							break loop273;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 173, externalDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalDirective"


	public static class externalSpecifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "externalSpecifier"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:1: externalSpecifier : ( 'name' constExpression | 'index' constExpression );
	public final DelphiParser.externalSpecifier_return externalSpecifier() throws RecognitionException {
		DelphiParser.externalSpecifier_return retval = new DelphiParser.externalSpecifier_return();
		retval.start = input.LT(1);
		int externalSpecifier_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal834=null;
		Token string_literal836=null;
		ParserRuleReturnScope constExpression835 =null;
		ParserRuleReturnScope constExpression837 =null;

		Object string_literal834_tree=null;
		Object string_literal836_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:30: ( 'name' constExpression | 'index' constExpression )
			int alt275=2;
			int LA275_0 = input.LA(1);
			if ( (LA275_0==NAME) ) {
				alt275=1;
			}
			else if ( (LA275_0==INDEX) ) {
				alt275=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 275, 0, input);
				throw nvae;
			}

			switch (alt275) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:684:32: 'name' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal834=(Token)match(input,NAME,FOLLOW_NAME_in_externalSpecifier18875); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal834_tree = (Object)adaptor.create(string_literal834);
					adaptor.addChild(root_0, string_literal834_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier18877);
					constExpression835=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression835.getTree());

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:685:32: 'index' constExpression
					{
					root_0 = (Object)adaptor.nil();


					string_literal836=(Token)match(input,INDEX,FOLLOW_INDEX_in_externalSpecifier18910); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					string_literal836_tree = (Object)adaptor.create(string_literal836);
					adaptor.addChild(root_0, string_literal836_tree);
					}

					pushFollow(FOLLOW_constExpression_in_externalSpecifier18912);
					constExpression837=constExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constExpression837.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 174, externalSpecifier_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "externalSpecifier"


	public static class dispIDDirective_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dispIDDirective"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:687:1: dispIDDirective : 'dispid' expression ;
	public final DelphiParser.dispIDDirective_return dispIDDirective() throws RecognitionException {
		DelphiParser.dispIDDirective_return retval = new DelphiParser.dispIDDirective_return();
		retval.start = input.LT(1);
		int dispIDDirective_StartIndex = input.index();

		Object root_0 = null;

		Token string_literal838=null;
		ParserRuleReturnScope expression839 =null;

		Object string_literal838_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:687:30: ( 'dispid' expression )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:687:32: 'dispid' expression
			{
			root_0 = (Object)adaptor.nil();


			string_literal838=(Token)match(input,DISPID,FOLLOW_DISPID_in_dispIDDirective18965); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal838_tree = (Object)adaptor.create(string_literal838);
			adaptor.addChild(root_0, string_literal838_tree);
			}

			pushFollow(FOLLOW_expression_in_dispIDDirective18967);
			expression839=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression839.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 175, dispIDDirective_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "dispIDDirective"


	public static class ident_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "ident"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:1: ident : ( TkIdentifier | '&' TkIdentifier | usedKeywordsAsNames );
	public final DelphiParser.ident_return ident() throws RecognitionException {
		DelphiParser.ident_return retval = new DelphiParser.ident_return();
		retval.start = input.LT(1);
		int ident_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier840=null;
		Token char_literal841=null;
		Token TkIdentifier842=null;
		ParserRuleReturnScope usedKeywordsAsNames843 =null;

		Object TkIdentifier840_tree=null;
		Object char_literal841_tree=null;
		Object TkIdentifier842_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:30: ( TkIdentifier | '&' TkIdentifier | usedKeywordsAsNames )
			int alt276=3;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt276=1;
				}
				break;
			case 199:
				{
				alt276=2;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case VARIANT:
			case WRITE:
				{
				alt276=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 276, 0, input);
				throw nvae;
			}
			switch (alt276) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:692:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier840=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident19030); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier840_tree = (Object)adaptor.create(TkIdentifier840);
					adaptor.addChild(root_0, TkIdentifier840_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:693:32: '&' TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					char_literal841=(Token)match(input,199,FOLLOW_199_in_ident19063); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal841_tree = (Object)adaptor.create(char_literal841);
					adaptor.addChild(root_0, char_literal841_tree);
					}

					TkIdentifier842=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_ident19065); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier842_tree = (Object)adaptor.create(TkIdentifier842);
					adaptor.addChild(root_0, TkIdentifier842_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:694:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_ident19098);
					usedKeywordsAsNames843=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames843.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 176, ident_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "ident"


	public static class usedKeywordsAsNames_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "usedKeywordsAsNames"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:696:1: usedKeywordsAsNames : ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED | HELPER ) | ( PACKAGE | DEPRECATED ) );
	public final DelphiParser.usedKeywordsAsNames_return usedKeywordsAsNames() throws RecognitionException {
		DelphiParser.usedKeywordsAsNames_return retval = new DelphiParser.usedKeywordsAsNames_return();
		retval.start = input.LT(1);
		int usedKeywordsAsNames_StartIndex = input.index();

		Object root_0 = null;

		Token set844=null;

		Object set844_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:696:30: ( ( NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE ) | ( READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL ) | ( BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED | HELPER ) | ( PACKAGE | DEPRECATED ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set844=input.LT(1);
			if ( input.LA(1)==ADD||input.LA(1)==ANSISTRING||input.LA(1)==AT||input.LA(1)==BREAK||(input.LA(1) >= CONTAINS && input.LA(1) <= CONTINUE)||(input.LA(1) >= DEFAULT && input.LA(1) <= DEPRECATED)||input.LA(1)==EXIT||input.LA(1)==EXPORT||input.LA(1)==FINAL||input.LA(1)==HELPER||input.LA(1)==IMPLEMENTS||input.LA(1)==INDEX||input.LA(1)==LOCAL||input.LA(1)==MESSAGE||input.LA(1)==NAME||input.LA(1)==OBJECT||input.LA(1)==OPERATOR||input.LA(1)==OUT||input.LA(1)==PACKAGE||input.LA(1)==POINTER||(input.LA(1) >= READ && input.LA(1) <= READONLY)||(input.LA(1) >= REFERENCE && input.LA(1) <= REGISTER)||input.LA(1)==REMOVE||(input.LA(1) >= STORED && input.LA(1) <= STRING)||input.LA(1)==VARIANT||input.LA(1)==WRITE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set844));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 177, usedKeywordsAsNames_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "usedKeywordsAsNames"


	public static class identList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identList"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:1: identList : ident ( ',' ident )* -> ^( ident ( ident )* ) ;
	public final DelphiParser.identList_return identList() throws RecognitionException {
		DelphiParser.identList_return retval = new DelphiParser.identList_return();
		retval.start = input.LT(1);
		int identList_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal846=null;
		ParserRuleReturnScope ident845 =null;
		ParserRuleReturnScope ident847 =null;

		Object char_literal846_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:30: ( ident ( ',' ident )* -> ^( ident ( ident )* ) )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identList19420);
			ident845=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident845.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:38: ( ',' ident )*
			loop277:
			while (true) {
				int alt277=2;
				int LA277_0 = input.LA(1);
				if ( (LA277_0==COMMA) ) {
					alt277=1;
				}

				switch (alt277) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:39: ',' ident
					{
					char_literal846=(Token)match(input,COMMA,FOLLOW_COMMA_in_identList19423); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal846);

					pushFollow(FOLLOW_ident_in_identList19425);
					ident847=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident847.getTree());
					}
					break;

				default :
					break loop277;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 701:51: -> ^( ident ( ident )* )
			{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:54: ^( ident ( ident )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_ident.nextNode(), root_1);
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:701:62: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_1, stream_ident.nextTree());
				}
				stream_ident.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 178, identList_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identList"


	public static class identListFlat_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "identListFlat"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:1: identListFlat : ident ( ',' ident )* -> ident ( ident )* ;
	public final DelphiParser.identListFlat_return identListFlat() throws RecognitionException {
		DelphiParser.identListFlat_return retval = new DelphiParser.identListFlat_return();
		retval.start = input.LT(1);
		int identListFlat_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal849=null;
		ParserRuleReturnScope ident848 =null;
		ParserRuleReturnScope ident850 =null;

		Object char_literal849_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:30: ( ident ( ',' ident )* -> ident ( ident )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:32: ident ( ',' ident )*
			{
			pushFollow(FOLLOW_ident_in_identListFlat19490);
			ident848=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_ident.add(ident848.getTree());
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:38: ( ',' ident )*
			loop278:
			while (true) {
				int alt278=2;
				int LA278_0 = input.LA(1);
				if ( (LA278_0==COMMA) ) {
					alt278=1;
				}

				switch (alt278) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:39: ',' ident
					{
					char_literal849=(Token)match(input,COMMA,FOLLOW_COMMA_in_identListFlat19493); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(char_literal849);

					pushFollow(FOLLOW_ident_in_identListFlat19495);
					ident850=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ident.add(ident850.getTree());
					}
					break;

				default :
					break loop278;
				}
			}

			// AST REWRITE
			// elements: ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 703:51: -> ident ( ident )*
			{
				adaptor.addChild(root_0, stream_ident.nextTree());
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:703:60: ( ident )*
				while ( stream_ident.hasNext() ) {
					adaptor.addChild(root_0, stream_ident.nextTree());
				}
				stream_ident.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 179, identListFlat_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "identListFlat"


	public static class label_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "label"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:1: label : ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames );
	public final DelphiParser.label_return label() throws RecognitionException {
		DelphiParser.label_return retval = new DelphiParser.label_return();
		retval.start = input.LT(1);
		int label_StartIndex = input.index();

		Object root_0 = null;

		Token TkIdentifier851=null;
		Token TkIntNum852=null;
		Token TkHexNum853=null;
		ParserRuleReturnScope usedKeywordsAsNames854 =null;

		Object TkIdentifier851_tree=null;
		Object TkIntNum852_tree=null;
		Object TkHexNum853_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:30: ( TkIdentifier | TkIntNum | TkHexNum | usedKeywordsAsNames )
			int alt279=4;
			switch ( input.LA(1) ) {
			case TkIdentifier:
				{
				alt279=1;
				}
				break;
			case TkIntNum:
				{
				alt279=2;
				}
				break;
			case TkHexNum:
				{
				alt279=3;
				}
				break;
			case ADD:
			case ANSISTRING:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case POINTER:
			case READ:
			case READONLY:
			case REFERENCE:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case STRING:
			case VARIANT:
			case WRITE:
				{
				alt279=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 279, 0, input);
				throw nvae;
			}
			switch (alt279) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:705:32: TkIdentifier
					{
					root_0 = (Object)adaptor.nil();


					TkIdentifier851=(Token)match(input,TkIdentifier,FOLLOW_TkIdentifier_in_label19569); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIdentifier851_tree = (Object)adaptor.create(TkIdentifier851);
					adaptor.addChild(root_0, TkIdentifier851_tree);
					}

					}
					break;
				case 2 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:706:32: TkIntNum
					{
					root_0 = (Object)adaptor.nil();


					TkIntNum852=(Token)match(input,TkIntNum,FOLLOW_TkIntNum_in_label19602); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkIntNum852_tree = (Object)adaptor.create(TkIntNum852);
					adaptor.addChild(root_0, TkIntNum852_tree);
					}

					}
					break;
				case 3 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:707:32: TkHexNum
					{
					root_0 = (Object)adaptor.nil();


					TkHexNum853=(Token)match(input,TkHexNum,FOLLOW_TkHexNum_in_label19635); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TkHexNum853_tree = (Object)adaptor.create(TkHexNum853);
					adaptor.addChild(root_0, TkHexNum853_tree);
					}

					}
					break;
				case 4 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:708:32: usedKeywordsAsNames
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_usedKeywordsAsNames_in_label19668);
					usedKeywordsAsNames854=usedKeywordsAsNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, usedKeywordsAsNames854.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 180, label_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "label"


	public static class intNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "intNum"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:710:1: intNum : ( TkIntNum | TkHexNum );
	public final DelphiParser.intNum_return intNum() throws RecognitionException {
		DelphiParser.intNum_return retval = new DelphiParser.intNum_return();
		retval.start = input.LT(1);
		int intNum_StartIndex = input.index();

		Object root_0 = null;

		Token set855=null;

		Object set855_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:710:30: ( TkIntNum | TkHexNum )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:
			{
			root_0 = (Object)adaptor.nil();


			set855=input.LT(1);
			if ( input.LA(1)==TkHexNum||input.LA(1)==TkIntNum ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set855));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 181, intNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "intNum"


	public static class realNum_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "realNum"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:713:1: realNum : TkRealNum ;
	public final DelphiParser.realNum_return realNum() throws RecognitionException {
		DelphiParser.realNum_return retval = new DelphiParser.realNum_return();
		retval.start = input.LT(1);
		int realNum_StartIndex = input.index();

		Object root_0 = null;

		Token TkRealNum856=null;

		Object TkRealNum856_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:713:30: ( TkRealNum )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:713:32: TkRealNum
			{
			root_0 = (Object)adaptor.nil();


			TkRealNum856=(Token)match(input,TkRealNum,FOLLOW_TkRealNum_in_realNum19818); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TkRealNum856_tree = (Object)adaptor.create(TkRealNum856);
			adaptor.addChild(root_0, TkRealNum856_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 182, realNum_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "realNum"


	public static class namespacedQualifiedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespacedQualifiedIdent"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:1: namespacedQualifiedIdent : ( namespaceName '.' )? qualifiedIdent ;
	public final DelphiParser.namespacedQualifiedIdent_return namespacedQualifiedIdent() throws RecognitionException {
		DelphiParser.namespacedQualifiedIdent_return retval = new DelphiParser.namespacedQualifiedIdent_return();
		retval.start = input.LT(1);
		int namespacedQualifiedIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal858=null;
		ParserRuleReturnScope namespaceName857 =null;
		ParserRuleReturnScope qualifiedIdent859 =null;

		Object char_literal858_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:30: ( ( namespaceName '.' )? qualifiedIdent )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:32: ( namespaceName '.' )? qualifiedIdent
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:32: ( namespaceName '.' )?
			int alt280=2;
			switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA280_1 = input.LA(2);
					if ( (LA280_1==DOT) ) {
						int LA280_4 = input.LA(3);
						if ( (synpred460_Delphi()) ) {
							alt280=1;
						}
					}
					}
					break;
				case 199:
					{
					int LA280_2 = input.LA(2);
					if ( (LA280_2==TkIdentifier) ) {
						int LA280_6 = input.LA(3);
						if ( (LA280_6==DOT) ) {
							int LA280_9 = input.LA(4);
							if ( (synpred460_Delphi()) ) {
								alt280=1;
							}
						}
					}
					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA280_3 = input.LA(2);
					if ( (LA280_3==DOT) ) {
						int LA280_7 = input.LA(3);
						if ( (synpred460_Delphi()) ) {
							alt280=1;
						}
					}
					}
					break;
			}
			switch (alt280) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:33: namespaceName '.'
					{
					pushFollow(FOLLOW_namespaceName_in_namespacedQualifiedIdent19860);
					namespaceName857=namespaceName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, namespaceName857.getTree());

					char_literal858=(Token)match(input,DOT,FOLLOW_DOT_in_namespacedQualifiedIdent19862); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal858_tree = (Object)adaptor.create(char_literal858);
					adaptor.addChild(root_0, char_literal858_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_qualifiedIdent_in_namespacedQualifiedIdent19866);
			qualifiedIdent859=qualifiedIdent();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedIdent859.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 183, namespacedQualifiedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespacedQualifiedIdent"


	public static class namespaceName_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "namespaceName"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:1: namespaceName : ident ( '.' ident )* ;
	public final DelphiParser.namespaceName_return namespaceName() throws RecognitionException {
		DelphiParser.namespaceName_return retval = new DelphiParser.namespaceName_return();
		retval.start = input.LT(1);
		int namespaceName_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal861=null;
		ParserRuleReturnScope ident860 =null;
		ParserRuleReturnScope ident862 =null;

		Object char_literal861_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:30: ( ident ( '.' ident )* )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:32: ident ( '.' ident )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_ident_in_namespaceName19918);
			ident860=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident860.getTree());

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:38: ( '.' ident )*
			loop281:
			while (true) {
				int alt281=2;
				alt281 = dfa281.predict(input);
				switch (alt281) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:39: '.' ident
					{
					char_literal861=(Token)match(input,DOT,FOLLOW_DOT_in_namespaceName19921); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal861_tree = (Object)adaptor.create(char_literal861);
					adaptor.addChild(root_0, char_literal861_tree);
					}

					pushFollow(FOLLOW_ident_in_namespaceName19923);
					ident862=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident862.getTree());

					}
					break;

				default :
					break loop281;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 184, namespaceName_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "namespaceName"


	public static class qualifiedIdent_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "qualifiedIdent"
	// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:1: qualifiedIdent : ( ident '.' )* ident ;
	public final DelphiParser.qualifiedIdent_return qualifiedIdent() throws RecognitionException {
		DelphiParser.qualifiedIdent_return retval = new DelphiParser.qualifiedIdent_return();
		retval.start = input.LT(1);
		int qualifiedIdent_StartIndex = input.index();

		Object root_0 = null;

		Token char_literal864=null;
		ParserRuleReturnScope ident863 =null;
		ParserRuleReturnScope ident865 =null;

		Object char_literal864_tree=null;

		try {
			if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }

			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:30: ( ( ident '.' )* ident )
			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:33: ( ident '.' )* ident
			{
			root_0 = (Object)adaptor.nil();


			// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:33: ( ident '.' )*
			loop282:
			while (true) {
				int alt282=2;
				switch ( input.LA(1) ) {
				case TkIdentifier:
					{
					int LA282_1 = input.LA(2);
					if ( (LA282_1==DOT) ) {
						alt282=1;
					}

					}
					break;
				case 199:
					{
					int LA282_2 = input.LA(2);
					if ( (LA282_2==TkIdentifier) ) {
						int LA282_6 = input.LA(3);
						if ( (LA282_6==DOT) ) {
							alt282=1;
						}

					}

					}
					break;
				case ADD:
				case ANSISTRING:
				case AT:
				case BREAK:
				case CONTAINS:
				case CONTINUE:
				case DEFAULT:
				case DEPRECATED:
				case EXIT:
				case EXPORT:
				case FINAL:
				case HELPER:
				case IMPLEMENTS:
				case INDEX:
				case LOCAL:
				case MESSAGE:
				case NAME:
				case OBJECT:
				case OPERATOR:
				case OUT:
				case PACKAGE:
				case POINTER:
				case READ:
				case READONLY:
				case REFERENCE:
				case REGISTER:
				case REMOVE:
				case STORED:
				case STRICT:
				case STRING:
				case VARIANT:
				case WRITE:
					{
					int LA282_3 = input.LA(2);
					if ( (LA282_3==DOT) ) {
						alt282=1;
					}

					}
					break;
				}
				switch (alt282) {
				case 1 :
					// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:719:34: ident '.'
					{
					pushFollow(FOLLOW_ident_in_qualifiedIdent19978);
					ident863=ident();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ident863.getTree());

					char_literal864=(Token)match(input,DOT,FOLLOW_DOT_in_qualifiedIdent19980); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal864_tree = (Object)adaptor.create(char_literal864);
					adaptor.addChild(root_0, char_literal864_tree);
					}

					}
					break;

				default :
					break loop282;
				}
			}

			pushFollow(FOLLOW_ident_in_qualifiedIdent19985);
			ident865=ident();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, ident865.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
			if ( state.backtracking>0 ) { memoize(input, 185, qualifiedIdent_StartIndex); }

		}
		return retval;
	}
	// $ANTLR end "qualifiedIdent"

	// $ANTLR start synpred23_Delphi
	public final void synpred23_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: ( declSection )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:33: declSection
		{
		pushFollow(FOLLOW_declSection_in_synpred23_Delphi1584);
		declSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred23_Delphi

	// $ANTLR start synpred24_Delphi
	public final void synpred24_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: ( blockBody )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:126:48: blockBody
		{
		pushFollow(FOLLOW_blockBody_in_synpred24_Delphi1589);
		blockBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred24_Delphi

	// $ANTLR start synpred30_Delphi
	public final void synpred30_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: ( methodDecl )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:135:32: methodDecl
		{
		pushFollow(FOLLOW_methodDecl_in_synpred30_Delphi1866);
		methodDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred30_Delphi

	// $ANTLR start synpred31_Delphi
	public final void synpred31_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: ( procDecl )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:136:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred31_Delphi1899);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred31_Delphi

	// $ANTLR start synpred32_Delphi
	public final void synpred32_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: ( exportedProcHeading )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:137:32: exportedProcHeading
		{
		pushFollow(FOLLOW_exportedProcHeading_in_synpred32_Delphi1932);
		exportedProcHeading();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred32_Delphi

	// $ANTLR start synpred36_Delphi
	public final void synpred36_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: ( exportedProcHeading )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:143:32: exportedProcHeading
		{
		pushFollow(FOLLOW_exportedProcHeading_in_synpred36_Delphi2116);
		exportedProcHeading();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred36_Delphi

	// $ANTLR start synpred38_Delphi
	public final void synpred38_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: ( procDecl )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:145:32: procDecl
		{
		pushFollow(FOLLOW_procDecl_in_synpred38_Delphi2182);
		procDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred38_Delphi

	// $ANTLR start synpred40_Delphi
	public final void synpred40_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: ( constDeclaration )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:150:42: constDeclaration
		{
		pushFollow(FOLLOW_constDeclaration_in_synpred40_Delphi2331);
		constDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred40_Delphi

	// $ANTLR start synpred42_Delphi
	public final void synpred42_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:155:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred42_Delphi2486);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred42_Delphi

	// $ANTLR start synpred45_Delphi
	public final void synpred45_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: ( typeDeclaration )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:157:56: typeDeclaration
		{
		pushFollow(FOLLOW_typeDeclaration_in_synpred45_Delphi2580);
		typeDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred45_Delphi

	// $ANTLR start synpred46_Delphi
	public final void synpred46_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:40: ( typeDeclaration )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:159:40: typeDeclaration
		{
		pushFollow(FOLLOW_typeDeclaration_in_synpred46_Delphi2647);
		typeDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred46_Delphi

	// $ANTLR start synpred47_Delphi
	public final void synpred47_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:161:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred47_Delphi2711);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred47_Delphi

	// $ANTLR start synpred49_Delphi
	public final void synpred49_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:55: ( varDeclaration )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:163:55: varDeclaration
		{
		pushFollow(FOLLOW_varDeclaration_in_synpred49_Delphi2808);
		varDeclaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred49_Delphi

	// $ANTLR start synpred51_Delphi
	public final void synpred51_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:169:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred51_Delphi2968);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred51_Delphi

	// $ANTLR start synpred54_Delphi
	public final void synpred54_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:32: ( 'absolute' ident )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:171:32: 'absolute' ident
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred54_Delphi3060); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred54_Delphi3062);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred54_Delphi

	// $ANTLR start synpred55_Delphi
	public final void synpred55_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:172:32: ( 'absolute' constExpression )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:172:32: 'absolute' constExpression
		{
		match(input,ABSOLUTE,FOLLOW_ABSOLUTE_in_synpred55_Delphi3095); if (state.failed) return;

		pushFollow(FOLLOW_constExpression_in_synpred55_Delphi3097);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred55_Delphi

	// $ANTLR start synpred62_Delphi
	public final void synpred62_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: ( strucType )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:182:32: strucType
		{
		pushFollow(FOLLOW_strucType_in_synpred62_Delphi3342);
		strucType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred62_Delphi

	// $ANTLR start synpred63_Delphi
	public final void synpred63_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: ( pointerType )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:183:32: pointerType
		{
		pushFollow(FOLLOW_pointerType_in_synpred63_Delphi3375);
		pointerType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred63_Delphi

	// $ANTLR start synpred64_Delphi
	public final void synpred64_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: ( stringType )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:184:32: stringType
		{
		pushFollow(FOLLOW_stringType_in_synpred64_Delphi3408);
		stringType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred64_Delphi

	// $ANTLR start synpred65_Delphi
	public final void synpred65_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: ( procedureType )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:185:32: procedureType
		{
		pushFollow(FOLLOW_procedureType_in_synpred65_Delphi3441);
		procedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred65_Delphi

	// $ANTLR start synpred66_Delphi
	public final void synpred66_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:32: ( variantType )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:186:32: variantType
		{
		pushFollow(FOLLOW_variantType_in_synpred66_Delphi3474);
		variantType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred66_Delphi

	// $ANTLR start synpred67_Delphi
	public final void synpred67_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:187:32: ( subRangeType )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:187:32: subRangeType
		{
		pushFollow(FOLLOW_subRangeType_in_synpred67_Delphi3507);
		subRangeType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred67_Delphi

	// $ANTLR start synpred70_Delphi
	public final void synpred70_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( ( 'type' )? typeId ( genericPostfix )? )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'type' )? typeId ( genericPostfix )?
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:32: ( 'type' )?
		int alt285=2;
		int LA285_0 = input.LA(1);
		if ( (LA285_0==TYPE) ) {
			alt285=1;
		}
		switch (alt285) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:33: 'type'
				{
				match(input,TYPE,FOLLOW_TYPE_in_synpred70_Delphi3541); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeId_in_synpred70_Delphi3545);
		typeId();
		state._fsp--;
		if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:49: ( genericPostfix )?
		int alt286=2;
		int LA286_0 = input.LA(1);
		if ( (LA286_0==LT) ) {
			alt286=1;
		}
		switch (alt286) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:188:50: genericPostfix
				{
				pushFollow(FOLLOW_genericPostfix_in_synpred70_Delphi3548);
				genericPostfix();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred70_Delphi

	// $ANTLR start synpred81_Delphi
	public final void synpred81_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:40: ( 'of' typeDecl )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:213:40: 'of' typeDecl
		{
		match(input,OF,FOLLOW_OF_in_synpred81_Delphi4272); if (state.failed) return;

		pushFollow(FOLLOW_typeDecl_in_synpred81_Delphi4274);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred81_Delphi

	// $ANTLR start synpred83_Delphi
	public final void synpred83_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:42: ( '[' expression ']' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:218:42: '[' expression ']'
		{
		match(input,LBRACK,FOLLOW_LBRACK_in_synpred83_Delphi4423); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred83_Delphi4425);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RBRACK,FOLLOW_RBRACK_in_synpred83_Delphi4427); if (state.failed) return;

		}

	}
	// $ANTLR end synpred83_Delphi

	// $ANTLR start synpred86_Delphi
	public final void synpred86_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:54: ( codePageNumber )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:219:54: codePageNumber
		{
		pushFollow(FOLLOW_codePageNumber_in_synpred86_Delphi4474);
		codePageNumber();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred86_Delphi

	// $ANTLR start synpred87_Delphi
	public final void synpred87_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:32: ( methodType )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:223:32: methodType
		{
		pushFollow(FOLLOW_methodType_in_synpred87_Delphi4583);
		methodType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred87_Delphi

	// $ANTLR start synpred88_Delphi
	public final void synpred88_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: ( simpleProcedureType )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:224:32: simpleProcedureType
		{
		pushFollow(FOLLOW_simpleProcedureType_in_synpred88_Delphi4616);
		simpleProcedureType();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred88_Delphi

	// $ANTLR start synpred90_Delphi
	public final void synpred90_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:55: ( ( ';' )? callConvention )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:55: ( ';' )? callConvention
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:55: ( ';' )?
		int alt292=2;
		int LA292_0 = input.LA(1);
		if ( (LA292_0==SEMI) ) {
			alt292=1;
		}
		switch (alt292) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:229:56: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred90_Delphi4759); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_callConvention_in_synpred90_Delphi4763);
		callConvention();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred90_Delphi

	// $ANTLR start synpred92_Delphi
	public final void synpred92_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:74: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:233:74: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred92_Delphi4871);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred92_Delphi

	// $ANTLR start synpred94_Delphi
	public final void synpred94_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:45: ( formalParameterSection )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:234:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred94_Delphi4926);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred94_Delphi

	// $ANTLR start synpred100_Delphi
	public final void synpred100_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:32: ( simpleGenericDefinition )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:252:32: simpleGenericDefinition
		{
		pushFollow(FOLLOW_simpleGenericDefinition_in_synpred100_Delphi5383);
		simpleGenericDefinition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred100_Delphi

	// $ANTLR start synpred101_Delphi
	public final void synpred101_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:253:32: ( complexGenericDefinition )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:253:32: complexGenericDefinition
		{
		pushFollow(FOLLOW_complexGenericDefinition_in_synpred101_Delphi5416);
		complexGenericDefinition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred101_Delphi

	// $ANTLR start synpred113_Delphi
	public final void synpred113_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: ( classTypeTypeDecl )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:274:32: classTypeTypeDecl
		{
		pushFollow(FOLLOW_classTypeTypeDecl_in_synpred113_Delphi5941);
		classTypeTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred113_Delphi

	// $ANTLR start synpred114_Delphi
	public final void synpred114_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:32: ( classTypeDecl )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:275:32: classTypeDecl
		{
		pushFollow(FOLLOW_classTypeDecl_in_synpred114_Delphi5974);
		classTypeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred114_Delphi

	// $ANTLR start synpred122_Delphi
	public final void synpred122_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: ( 'class' ( classState )? ( classParent )? ( classItem )* 'end' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:32: 'class' ( classState )? ( classParent )? ( classItem )* 'end'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred122_Delphi6299); if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:40: ( classState )?
		int alt298=2;
		int LA298_0 = input.LA(1);
		if ( (LA298_0==ABSTRACT||LA298_0==SEALED) ) {
			alt298=1;
		}
		switch (alt298) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:41: classState
				{
				pushFollow(FOLLOW_classState_in_synpred122_Delphi6302);
				classState();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:54: ( classParent )?
		int alt299=2;
		int LA299_0 = input.LA(1);
		if ( (LA299_0==LPAREN) ) {
			alt299=1;
		}
		switch (alt299) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:55: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred122_Delphi6307);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:69: ( classItem )*
		loop300:
		while (true) {
			int alt300=2;
			int LA300_0 = input.LA(1);
			if ( (LA300_0==EOF||LA300_0==ADD||(LA300_0 >= ANSISTRING && LA300_0 <= ARRAY)||(LA300_0 >= AT && LA300_0 <= AUTOMATED)||LA300_0==BREAK||LA300_0==CLASS||(LA300_0 >= CONST && LA300_0 <= ControlString)||(LA300_0 >= DEFAULT && LA300_0 <= DESTRUCTOR)||LA300_0==DISPINTERFACE||LA300_0==EXIT||LA300_0==EXPORT||LA300_0==FALSE||(LA300_0 >= FILE && LA300_0 <= FINAL)||LA300_0==FUNCTION||LA300_0==HELPER||LA300_0==IMPLEMENTS||(LA300_0 >= INDEX && LA300_0 <= INHERITED)||LA300_0==INTERFACE||LA300_0==LBRACK||(LA300_0 >= LOCAL && LA300_0 <= LPAREN)||(LA300_0 >= MESSAGE && LA300_0 <= MINUS)||LA300_0==NAME||LA300_0==NIL||LA300_0==NOT||LA300_0==OBJECT||LA300_0==OPERATOR||LA300_0==OUT||(LA300_0 >= PACKAGE && LA300_0 <= PACKED)||(LA300_0 >= PLUS && LA300_0 <= PROCEDURE)||(LA300_0 >= PROPERTY && LA300_0 <= QuotedString)||(LA300_0 >= READ && LA300_0 <= REGISTER)||LA300_0==REMOVE||LA300_0==RESOURCESTRING||LA300_0==SET||(LA300_0 >= STORED && LA300_0 <= STRING)||LA300_0==THREADVAR||LA300_0==TRUE||LA300_0==TYPE||LA300_0==TkAsmHexNum||(LA300_0 >= TkHexNum && LA300_0 <= TkIntNum)||LA300_0==TkRealNum||LA300_0==VAR||LA300_0==VARIANT||LA300_0==WRITE||LA300_0==199) ) {
				alt300=1;
			}

			switch (alt300) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:284:70: classItem
				{
				pushFollow(FOLLOW_classItem_in_synpred122_Delphi6312);
				classItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop300;
			}
		}

		match(input,END,FOLLOW_END_in_synpred122_Delphi6316); if (state.failed) return;

		}

	}
	// $ANTLR end synpred122_Delphi

	// $ANTLR start synpred123_Delphi
	public final void synpred123_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:41: ( classState )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:41: classState
		{
		pushFollow(FOLLOW_classState_in_synpred123_Delphi6370);
		classState();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred123_Delphi

	// $ANTLR start synpred124_Delphi
	public final void synpred124_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:55: ( classParent )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:285:55: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred124_Delphi6375);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred124_Delphi

	// $ANTLR start synpred127_Delphi
	public final void synpred127_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: ( visibility )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:292:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred127_Delphi6611);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred127_Delphi

	// $ANTLR start synpred128_Delphi
	public final void synpred128_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: ( classMethod )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:293:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred128_Delphi6644);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred128_Delphi

	// $ANTLR start synpred129_Delphi
	public final void synpred129_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: ( classField )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:294:32: classField
		{
		pushFollow(FOLLOW_classField_in_synpred129_Delphi6677);
		classField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred129_Delphi

	// $ANTLR start synpred130_Delphi
	public final void synpred130_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: ( classProperty )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:295:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred130_Delphi6710);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred130_Delphi

	// $ANTLR start synpred137_Delphi
	public final void synpred137_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: ( classMethod )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:303:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred137_Delphi6980);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred137_Delphi

	// $ANTLR start synpred138_Delphi
	public final void synpred138_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:32: ( classProperty )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:304:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred138_Delphi7013);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred138_Delphi

	// $ANTLR start synpred143_Delphi
	public final void synpred143_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: ( interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:32: interfaceKey ( classParent )? ( interfaceGuid )? ( interfaceItem )* 'end'
		{
		pushFollow(FOLLOW_interfaceKey_in_synpred143_Delphi7099);
		interfaceKey();
		state._fsp--;
		if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:45: ( classParent )?
		int alt301=2;
		int LA301_0 = input.LA(1);
		if ( (LA301_0==LPAREN) ) {
			alt301=1;
		}
		switch (alt301) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:46: classParent
				{
				pushFollow(FOLLOW_classParent_in_synpred143_Delphi7102);
				classParent();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:60: ( interfaceGuid )?
		int alt302=2;
		int LA302_0 = input.LA(1);
		if ( (LA302_0==LBRACK) ) {
			int LA302_1 = input.LA(2);
			if ( (LA302_1==QuotedString) ) {
				alt302=1;
			}
		}
		switch (alt302) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:61: interfaceGuid
				{
				pushFollow(FOLLOW_interfaceGuid_in_synpred143_Delphi7107);
				interfaceGuid();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:77: ( interfaceItem )*
		loop303:
		while (true) {
			int alt303=2;
			int LA303_0 = input.LA(1);
			if ( (LA303_0==EOF||LA303_0==ADD||(LA303_0 >= ANSISTRING && LA303_0 <= ARRAY)||(LA303_0 >= AT && LA303_0 <= AT2)||LA303_0==BREAK||LA303_0==CLASS||(LA303_0 >= CONST && LA303_0 <= ControlString)||(LA303_0 >= DEFAULT && LA303_0 <= DESTRUCTOR)||LA303_0==DISPINTERFACE||LA303_0==EXIT||LA303_0==EXPORT||LA303_0==FALSE||(LA303_0 >= FILE && LA303_0 <= FINAL)||LA303_0==FUNCTION||LA303_0==HELPER||LA303_0==IMPLEMENTS||(LA303_0 >= INDEX && LA303_0 <= INHERITED)||LA303_0==INTERFACE||LA303_0==LBRACK||(LA303_0 >= LOCAL && LA303_0 <= LPAREN)||(LA303_0 >= MESSAGE && LA303_0 <= MINUS)||LA303_0==NAME||LA303_0==NIL||LA303_0==NOT||LA303_0==OBJECT||LA303_0==OPERATOR||LA303_0==OUT||(LA303_0 >= PACKAGE && LA303_0 <= PACKED)||(LA303_0 >= PLUS && LA303_0 <= POINTER2)||LA303_0==PROCEDURE||LA303_0==PROPERTY||LA303_0==QuotedString||(LA303_0 >= READ && LA303_0 <= REGISTER)||LA303_0==REMOVE||LA303_0==SET||(LA303_0 >= STORED && LA303_0 <= STRING)||LA303_0==TRUE||LA303_0==TYPE||LA303_0==TkAsmHexNum||(LA303_0 >= TkHexNum && LA303_0 <= TkIntNum)||LA303_0==TkRealNum||LA303_0==VAR||LA303_0==VARIANT||LA303_0==WRITE||LA303_0==199) ) {
				alt303=1;
			}

			switch (alt303) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:307:78: interfaceItem
				{
				pushFollow(FOLLOW_interfaceItem_in_synpred143_Delphi7112);
				interfaceItem();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop303;
			}
		}

		match(input,END,FOLLOW_END_in_synpred143_Delphi7116); if (state.failed) return;

		}

	}
	// $ANTLR end synpred143_Delphi

	// $ANTLR start synpred144_Delphi
	public final void synpred144_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:46: ( classParent )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:309:46: classParent
		{
		pushFollow(FOLLOW_classParent_in_synpred144_Delphi7210);
		classParent();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred144_Delphi

	// $ANTLR start synpred146_Delphi
	public final void synpred146_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: ( classMethod )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:317:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred146_Delphi7453);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred146_Delphi

	// $ANTLR start synpred147_Delphi
	public final void synpred147_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:33: ( 'class' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:318:33: 'class'
		{
		match(input,CLASS,FOLLOW_CLASS_in_synpred147_Delphi7487); if (state.failed) return;

		}

	}
	// $ANTLR end synpred147_Delphi

	// $ANTLR start synpred150_Delphi
	public final void synpred150_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: ( visibility )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:322:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred150_Delphi7627);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred150_Delphi

	// $ANTLR start synpred151_Delphi
	public final void synpred151_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:32: ( classMethod )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:323:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred151_Delphi7660);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred151_Delphi

	// $ANTLR start synpred152_Delphi
	public final void synpred152_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:32: ( simpleRecord )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:326:32: simpleRecord
		{
		pushFollow(FOLLOW_simpleRecord_in_synpred152_Delphi7748);
		simpleRecord();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred152_Delphi

	// $ANTLR start synpred153_Delphi
	public final void synpred153_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:42: ( recordField )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:329:42: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred153_Delphi7837);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred153_Delphi

	// $ANTLR start synpred156_Delphi
	public final void synpred156_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: ( visibility )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:333:32: visibility
		{
		pushFollow(FOLLOW_visibility_in_synpred156_Delphi7987);
		visibility();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred156_Delphi

	// $ANTLR start synpred157_Delphi
	public final void synpred157_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:32: ( classMethod )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:334:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred157_Delphi8025);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred157_Delphi

	// $ANTLR start synpred158_Delphi
	public final void synpred158_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:32: ( classProperty )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:335:32: classProperty
		{
		pushFollow(FOLLOW_classProperty_in_synpred158_Delphi8058);
		classProperty();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred158_Delphi

	// $ANTLR start synpred161_Delphi
	public final void synpred161_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:32: ( recordField )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:338:32: recordField
		{
		pushFollow(FOLLOW_recordField_in_synpred161_Delphi8157);
		recordField();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred161_Delphi

	// $ANTLR start synpred172_Delphi
	public final void synpred172_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: ( classMethod )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:351:32: classMethod
		{
		pushFollow(FOLLOW_classMethod_in_synpred172_Delphi8582);
		classMethod();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred172_Delphi

	// $ANTLR start synpred173_Delphi
	public final void synpred173_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred173_Delphi8670);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred173_Delphi

	// $ANTLR start synpred177_Delphi
	public final void synpred177_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? methodDirectiveSection )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( customAttribute )? ( 'class' )? methodKey ident ( genericDefinition )? ( formalParameterSection )? methodDirectiveSection
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:32: ( customAttribute )?
		int alt304=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt304=1;
				}
				break;
			case CLASS:
				{
				int LA304_2 = input.LA(2);
				if ( (synpred173_Delphi()) ) {
					alt304=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA304_3 = input.LA(2);
				if ( (synpred173_Delphi()) ) {
					alt304=1;
				}
				}
				break;
		}
		switch (alt304) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred177_Delphi8670);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:51: ( 'class' )?
		int alt305=2;
		int LA305_0 = input.LA(1);
		if ( (LA305_0==CLASS) ) {
			alt305=1;
		}
		switch (alt305) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred177_Delphi8675); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred177_Delphi8679);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred177_Delphi8681);
		ident();
		state._fsp--;
		if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:78: ( genericDefinition )?
		int alt306=2;
		int LA306_0 = input.LA(1);
		if ( (LA306_0==LT) ) {
			alt306=1;
		}
		switch (alt306) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:79: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred177_Delphi8684);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:99: ( formalParameterSection )?
		int alt307=2;
		int LA307_0 = input.LA(1);
		if ( (LA307_0==LPAREN) ) {
			alt307=1;
		}
		switch (alt307) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:354:100: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred177_Delphi8689);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodDirectiveSection_in_synpred177_Delphi8693);
		methodDirectiveSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred177_Delphi

	// $ANTLR start synpred178_Delphi
	public final void synpred178_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred178_Delphi8795);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred178_Delphi

	// $ANTLR start synpred182_Delphi
	public final void synpred182_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:131: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred182_Delphi8821);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred182_Delphi

	// $ANTLR start synpred183_Delphi
	public final void synpred183_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: ( ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl methodDirectiveSection )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: ( customAttribute )? ( 'class' )? 'function' ident ( genericDefinition )? ( formalParameterSection )? ':' ( customAttribute )? typeDecl methodDirectiveSection
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:32: ( customAttribute )?
		int alt308=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt308=1;
				}
				break;
			case CLASS:
				{
				int LA308_2 = input.LA(2);
				if ( (synpred178_Delphi()) ) {
					alt308=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA308_3 = input.LA(2);
				if ( (synpred178_Delphi()) ) {
					alt308=1;
				}
				}
				break;
		}
		switch (alt308) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred183_Delphi8795);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:51: ( 'class' )?
		int alt309=2;
		int LA309_0 = input.LA(1);
		if ( (LA309_0==CLASS) ) {
			alt309=1;
		}
		switch (alt309) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred183_Delphi8800); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred183_Delphi8804); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred183_Delphi8806);
		ident();
		state._fsp--;
		if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:79: ( genericDefinition )?
		int alt310=2;
		int LA310_0 = input.LA(1);
		if ( (LA310_0==LT) ) {
			alt310=1;
		}
		switch (alt310) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:80: genericDefinition
				{
				pushFollow(FOLLOW_genericDefinition_in_synpred183_Delphi8809);
				genericDefinition();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:100: ( formalParameterSection )?
		int alt311=2;
		int LA311_0 = input.LA(1);
		if ( (LA311_0==LPAREN) ) {
			alt311=1;
		}
		switch (alt311) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:101: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred183_Delphi8814);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,COLON,FOLLOW_COLON_in_synpred183_Delphi8818); if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:130: ( customAttribute )?
		int alt312=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				int LA312_1 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case PACKED:
				{
				int LA312_2 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case ARRAY:
				{
				int LA312_3 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case SET:
				{
				int LA312_4 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case FILE:
				{
				int LA312_5 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case CLASS:
				{
				int LA312_6 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case DISPINTERFACE:
			case INTERFACE:
				{
				int LA312_7 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case OBJECT:
				{
				int LA312_8 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case RECORD:
				{
				int LA312_9 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case POINTER2:
				{
				int LA312_10 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case POINTER:
				{
				int LA312_11 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case STRING:
				{
				int LA312_12 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case TYPE:
				{
				int LA312_13 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case ANSISTRING:
				{
				int LA312_14 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA312_15 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case PROCEDURE:
				{
				int LA312_16 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case REFERENCE:
				{
				int LA312_17 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case VARIANT:
				{
				int LA312_18 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case TkHexNum:
			case TkIntNum:
				{
				int LA312_19 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case TkRealNum:
				{
				int LA312_20 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case TkAsmHexNum:
				{
				int LA312_21 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case ControlString:
				{
				int LA312_22 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case QuotedString:
				{
				int LA312_23 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case TkIdentifier:
				{
				int LA312_24 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case 199:
				{
				int LA312_25 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case ADD:
			case AT:
			case BREAK:
			case CONTAINS:
			case CONTINUE:
			case DEFAULT:
			case DEPRECATED:
			case EXIT:
			case EXPORT:
			case FINAL:
			case HELPER:
			case IMPLEMENTS:
			case INDEX:
			case LOCAL:
			case MESSAGE:
			case NAME:
			case OPERATOR:
			case OUT:
			case PACKAGE:
			case READ:
			case READONLY:
			case REGISTER:
			case REMOVE:
			case STORED:
			case STRICT:
			case WRITE:
				{
				int LA312_26 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case NIL:
				{
				int LA312_27 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case TRUE:
				{
				int LA312_28 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case FALSE:
				{
				int LA312_29 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case LPAREN:
				{
				int LA312_30 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case AT2:
			case MINUS:
			case NOT:
			case PLUS:
				{
				int LA312_31 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
			case INHERITED:
				{
				int LA312_32 = input.LA(2);
				if ( (synpred182_Delphi()) ) {
					alt312=1;
				}
				}
				break;
		}
		switch (alt312) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:356:131: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred183_Delphi8821);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_typeDecl_in_synpred183_Delphi8825);
		typeDecl();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_methodDirectiveSection_in_synpred183_Delphi8827);
		methodDirectiveSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred183_Delphi

	// $ANTLR start synpred184_Delphi
	public final void synpred184_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred184_Delphi8939);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred184_Delphi

	// $ANTLR start synpred188_Delphi
	public final void synpred188_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:131: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:358:131: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred188_Delphi8965);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred188_Delphi

	// $ANTLR start synpred189_Delphi
	public final void synpred189_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:361:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred189_Delphi9100);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred189_Delphi

	// $ANTLR start synpred191_Delphi
	public final void synpred191_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:364:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred191_Delphi9220);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred191_Delphi

	// $ANTLR start synpred198_Delphi
	public final void synpred198_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:52: ( ';' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:371:52: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred198_Delphi9480); if (state.failed) return;

		}

	}
	// $ANTLR end synpred198_Delphi

	// $ANTLR start synpred202_Delphi
	public final void synpred202_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: ( 'default' expression )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:376:32: 'default' expression
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred202_Delphi9631); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred202_Delphi9633);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred202_Delphi

	// $ANTLR start synpred203_Delphi
	public final void synpred203_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:377:32: ( 'default' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:377:32: 'default'
		{
		match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred203_Delphi9666); if (state.failed) return;

		}

	}
	// $ANTLR end synpred203_Delphi

	// $ANTLR start synpred220_Delphi
	public final void synpred220_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:81: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:405:81: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred220_Delphi10453);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred220_Delphi

	// $ANTLR start synpred223_Delphi
	public final void synpred223_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:74: ( methodBody )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:408:74: methodBody
		{
		pushFollow(FOLLOW_methodBody_in_synpred223_Delphi10561);
		methodBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred223_Delphi

	// $ANTLR start synpred224_Delphi
	public final void synpred224_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred224_Delphi10621);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred224_Delphi

	// $ANTLR start synpred227_Delphi
	public final void synpred227_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )? )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( customAttribute )? ( 'class' )? methodKey methodName ( formalParameterSection )?
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:32: ( customAttribute )?
		int alt318=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt318=1;
				}
				break;
			case CLASS:
				{
				int LA318_2 = input.LA(2);
				if ( (synpred224_Delphi()) ) {
					alt318=1;
				}
				}
				break;
			case CONSTRUCTOR:
			case DESTRUCTOR:
			case PROCEDURE:
				{
				int LA318_3 = input.LA(2);
				if ( (synpred224_Delphi()) ) {
					alt318=1;
				}
				}
				break;
		}
		switch (alt318) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred227_Delphi10621);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:51: ( 'class' )?
		int alt319=2;
		int LA319_0 = input.LA(1);
		if ( (LA319_0==CLASS) ) {
			alt319=1;
		}
		switch (alt319) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred227_Delphi10626); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodKey_in_synpred227_Delphi10631);
		methodKey();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred227_Delphi10633);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:84: ( formalParameterSection )?
		int alt320=2;
		int LA320_0 = input.LA(1);
		if ( (LA320_0==LPAREN) ) {
			alt320=1;
		}
		switch (alt320) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:410:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred227_Delphi10636);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred227_Delphi

	// $ANTLR start synpred228_Delphi
	public final void synpred228_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred228_Delphi10734);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred228_Delphi

	// $ANTLR start synpred231_Delphi
	public final void synpred231_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:116: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:116: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred231_Delphi10756);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred231_Delphi

	// $ANTLR start synpred233_Delphi
	public final void synpred233_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:32: ( ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )? )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:32: ( customAttribute )? ( 'class' )? 'function' methodName ( formalParameterSection )? ( ':' ( customAttribute )? typeDecl )?
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:32: ( customAttribute )?
		int alt322=2;
		switch ( input.LA(1) ) {
			case LBRACK:
				{
				alt322=1;
				}
				break;
			case CLASS:
				{
				int LA322_2 = input.LA(2);
				if ( (synpred228_Delphi()) ) {
					alt322=1;
				}
				}
				break;
			case FUNCTION:
				{
				int LA322_3 = input.LA(2);
				if ( (synpred228_Delphi()) ) {
					alt322=1;
				}
				}
				break;
		}
		switch (alt322) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred233_Delphi10734);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:51: ( 'class' )?
		int alt323=2;
		int LA323_0 = input.LA(1);
		if ( (LA323_0==CLASS) ) {
			alt323=1;
		}
		switch (alt323) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:52: 'class'
				{
				match(input,CLASS,FOLLOW_CLASS_in_synpred233_Delphi10739); if (state.failed) return;

				}
				break;

		}

		match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred233_Delphi10743); if (state.failed) return;

		pushFollow(FOLLOW_methodName_in_synpred233_Delphi10745);
		methodName();
		state._fsp--;
		if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:84: ( formalParameterSection )?
		int alt324=2;
		int LA324_0 = input.LA(1);
		if ( (LA324_0==LPAREN) ) {
			alt324=1;
		}
		switch (alt324) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:85: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred233_Delphi10748);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:110: ( ':' ( customAttribute )? typeDecl )?
		int alt326=2;
		int LA326_0 = input.LA(1);
		if ( (LA326_0==COLON) ) {
			alt326=1;
		}
		switch (alt326) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:111: ':' ( customAttribute )? typeDecl
				{
				match(input,COLON,FOLLOW_COLON_in_synpred233_Delphi10753); if (state.failed) return;

				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:115: ( customAttribute )?
				int alt325=2;
				switch ( input.LA(1) ) {
					case LBRACK:
						{
						int LA325_1 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case PACKED:
						{
						int LA325_2 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case ARRAY:
						{
						int LA325_3 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case SET:
						{
						int LA325_4 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case FILE:
						{
						int LA325_5 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case CLASS:
						{
						int LA325_6 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case DISPINTERFACE:
					case INTERFACE:
						{
						int LA325_7 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case OBJECT:
						{
						int LA325_8 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case RECORD:
						{
						int LA325_9 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case POINTER2:
						{
						int LA325_10 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case POINTER:
						{
						int LA325_11 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case STRING:
						{
						int LA325_12 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case TYPE:
						{
						int LA325_13 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case ANSISTRING:
						{
						int LA325_14 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case FUNCTION:
						{
						int LA325_15 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case PROCEDURE:
						{
						int LA325_16 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case REFERENCE:
						{
						int LA325_17 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case VARIANT:
						{
						int LA325_18 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case TkHexNum:
					case TkIntNum:
						{
						int LA325_19 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case TkRealNum:
						{
						int LA325_20 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case TkAsmHexNum:
						{
						int LA325_21 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case ControlString:
						{
						int LA325_22 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case QuotedString:
						{
						int LA325_23 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case TkIdentifier:
						{
						int LA325_24 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case 199:
						{
						int LA325_25 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case ADD:
					case AT:
					case BREAK:
					case CONTAINS:
					case CONTINUE:
					case DEFAULT:
					case DEPRECATED:
					case EXIT:
					case EXPORT:
					case FINAL:
					case HELPER:
					case IMPLEMENTS:
					case INDEX:
					case LOCAL:
					case MESSAGE:
					case NAME:
					case OPERATOR:
					case OUT:
					case PACKAGE:
					case READ:
					case READONLY:
					case REGISTER:
					case REMOVE:
					case STORED:
					case STRICT:
					case WRITE:
						{
						int LA325_26 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case NIL:
						{
						int LA325_27 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case TRUE:
						{
						int LA325_28 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case FALSE:
						{
						int LA325_29 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case LPAREN:
						{
						int LA325_30 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case AT2:
					case MINUS:
					case NOT:
					case PLUS:
						{
						int LA325_31 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
					case INHERITED:
						{
						int LA325_32 = input.LA(2);
						if ( (synpred231_Delphi()) ) {
							alt325=1;
						}
						}
						break;
				}
				switch (alt325) {
					case 1 :
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:412:116: customAttribute
						{
						pushFollow(FOLLOW_customAttribute_in_synpred233_Delphi10756);
						customAttribute();
						state._fsp--;
						if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_typeDecl_in_synpred233_Delphi10760);
				typeDecl();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred233_Delphi

	// $ANTLR start synpred234_Delphi
	public final void synpred234_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred234_Delphi10869);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred234_Delphi

	// $ANTLR start synpred236_Delphi
	public final void synpred236_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:113: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:414:113: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred236_Delphi10888);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred236_Delphi

	// $ANTLR start synpred244_Delphi
	public final void synpred244_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:74: ( procBody )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:423:74: procBody
		{
		pushFollow(FOLLOW_procBody_in_synpred244_Delphi11229);
		procBody();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred244_Delphi

	// $ANTLR start synpred245_Delphi
	public final void synpred245_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred245_Delphi11295);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred245_Delphi

	// $ANTLR start synpred247_Delphi
	public final void synpred247_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( ( customAttribute )? 'procedure' ident ( formalParameterSection )? )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( customAttribute )? 'procedure' ident ( formalParameterSection )?
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:32: ( customAttribute )?
		int alt329=2;
		int LA329_0 = input.LA(1);
		if ( (LA329_0==LBRACK) ) {
			alt329=1;
		}
		else if ( (LA329_0==PROCEDURE) ) {
			int LA329_2 = input.LA(2);
			if ( (synpred245_Delphi()) ) {
				alt329=1;
			}
		}
		switch (alt329) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:33: customAttribute
				{
				pushFollow(FOLLOW_customAttribute_in_synpred247_Delphi11295);
				customAttribute();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,PROCEDURE,FOLLOW_PROCEDURE_in_synpred247_Delphi11299); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred247_Delphi11301);
		ident();
		state._fsp--;
		if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:69: ( formalParameterSection )?
		int alt330=2;
		int LA330_0 = input.LA(1);
		if ( (LA330_0==LPAREN) ) {
			alt330=1;
		}
		switch (alt330) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:425:70: formalParameterSection
				{
				pushFollow(FOLLOW_formalParameterSection_in_synpred247_Delphi11304);
				formalParameterSection();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred247_Delphi

	// $ANTLR start synpred248_Delphi
	public final void synpred248_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:427:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred248_Delphi11404);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred248_Delphi

	// $ANTLR start synpred253_Delphi
	public final void synpred253_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:33: ( customAttribute )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:434:33: customAttribute
		{
		pushFollow(FOLLOW_customAttribute_in_synpred253_Delphi11652);
		customAttribute();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred253_Delphi

	// $ANTLR start synpred259_Delphi
	public final void synpred259_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:33: ( customAttributeDecl )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:450:33: customAttributeDecl
		{
		pushFollow(FOLLOW_customAttributeDecl_in_synpred259_Delphi12061);
		customAttributeDecl();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred259_Delphi

	// $ANTLR start synpred263_Delphi
	public final void synpred263_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:50: ( relationalOperator simpleExpression )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:50: relationalOperator simpleExpression
		{
		pushFollow(FOLLOW_relationalOperator_in_synpred263_Delphi12253);
		relationalOperator();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_simpleExpression_in_synpred263_Delphi12255);
		simpleExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred263_Delphi

	// $ANTLR start synpred264_Delphi
	public final void synpred264_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:89: ( '=' expression )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:459:89: '=' expression
		{
		match(input,EQUAL,FOLLOW_EQUAL_in_synpred264_Delphi12260); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred264_Delphi12262);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred264_Delphi

	// $ANTLR start synpred265_Delphi
	public final void synpred265_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:45: ( formalParameterSection )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:461:45: formalParameterSection
		{
		pushFollow(FOLLOW_formalParameterSection_in_synpred265_Delphi12313);
		formalParameterSection();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred265_Delphi

	// $ANTLR start synpred268_Delphi
	public final void synpred268_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:38: ( addOperator term )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:464:38: addOperator term
		{
		pushFollow(FOLLOW_addOperator_in_synpred268_Delphi12413);
		addOperator();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_term_in_synpred268_Delphi12415);
		term();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred268_Delphi

	// $ANTLR start synpred272_Delphi
	public final void synpred272_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:45: ( factor )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:470:45: factor
		{
		pushFollow(FOLLOW_factor_in_synpred272_Delphi12615);
		factor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred272_Delphi

	// $ANTLR start synpred273_Delphi
	public final void synpred273_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:41: ( particleItem )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:472:41: particleItem
		{
		pushFollow(FOLLOW_particleItem_in_synpred273_Delphi12680);
		particleItem();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred273_Delphi

	// $ANTLR start synpred278_Delphi
	public final void synpred278_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: ( ident )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:478:32: ident
		{
		pushFollow(FOLLOW_ident_in_synpred278_Delphi12870);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred278_Delphi

	// $ANTLR start synpred284_Delphi
	public final void synpred284_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: ( 'string' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:484:32: 'string'
		{
		match(input,STRING,FOLLOW_STRING_in_synpred284_Delphi13068); if (state.failed) return;

		}

	}
	// $ANTLR end synpred284_Delphi

	// $ANTLR start synpred297_Delphi
	public final void synpred297_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:47: ( QuotedString ControlString )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:47: QuotedString ControlString
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred297_Delphi13551); if (state.failed) return;

		match(input,ControlString,FOLLOW_ControlString_in_synpred297_Delphi13553); if (state.failed) return;

		}

	}
	// $ANTLR end synpred297_Delphi

	// $ANTLR start synpred298_Delphi
	public final void synpred298_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:77: ( QuotedString )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:499:77: QuotedString
		{
		match(input,QuotedString,FOLLOW_QuotedString_in_synpred298_Delphi13558); if (state.failed) return;

		}

	}
	// $ANTLR end synpred298_Delphi

	// $ANTLR start synpred300_Delphi
	public final void synpred300_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:46: ( ControlString QuotedString )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:46: ControlString QuotedString
		{
		match(input,ControlString,FOLLOW_ControlString_in_synpred300_Delphi13596); if (state.failed) return;

		match(input,QuotedString,FOLLOW_QuotedString_in_synpred300_Delphi13598); if (state.failed) return;

		}

	}
	// $ANTLR end synpred300_Delphi

	// $ANTLR start synpred301_Delphi
	public final void synpred301_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:76: ( ControlString )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:500:76: ControlString
		{
		match(input,ControlString,FOLLOW_ControlString_in_synpred301_Delphi13603); if (state.failed) return;

		}

	}
	// $ANTLR end synpred301_Delphi

	// $ANTLR start synpred337_Delphi
	public final void synpred337_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:66: ( 'else' statement )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:557:66: 'else' statement
		{
		match(input,ELSE,FOLLOW_ELSE_in_synpred337_Delphi15231); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred337_Delphi15233);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred337_Delphi

	// $ANTLR start synpred344_Delphi
	public final void synpred344_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:42: ( statementList )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:565:42: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred344_Delphi15500);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred344_Delphi

	// $ANTLR start synpred345_Delphi
	public final void synpred345_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: ( 'for' designator ':=' expression 'to' expression 'do' statement )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:569:32: 'for' designator ':=' expression 'to' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred345_Delphi15616); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred345_Delphi15618);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred345_Delphi15620); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred345_Delphi15622);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,TO,FOLLOW_TO_in_synpred345_Delphi15624); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred345_Delphi15626);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred345_Delphi15628); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred345_Delphi15630);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred345_Delphi

	// $ANTLR start synpred346_Delphi
	public final void synpred346_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:32: ( 'for' designator ':=' expression 'downto' expression 'do' statement )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:570:32: 'for' designator ':=' expression 'downto' expression 'do' statement
		{
		match(input,FOR,FOLLOW_FOR_in_synpred346_Delphi15663); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred346_Delphi15665);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred346_Delphi15667); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred346_Delphi15669);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DOWNTO,FOLLOW_DOWNTO_in_synpred346_Delphi15671); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred346_Delphi15673);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,DO,FOLLOW_DO_in_synpred346_Delphi15675); if (state.failed) return;

		pushFollow(FOLLOW_statement_in_synpred346_Delphi15677);
		statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred346_Delphi

	// $ANTLR start synpred347_Delphi
	public final void synpred347_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:32: ( designator 'as' designator )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:575:32: designator 'as' designator
		{
		pushFollow(FOLLOW_designator_in_synpred347_Delphi15835);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,AS,FOLLOW_AS_in_synpred347_Delphi15837); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred347_Delphi15839);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred347_Delphi

	// $ANTLR start synpred349_Delphi
	public final void synpred349_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:41: ( statementList )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:578:41: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred349_Delphi15937);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred349_Delphi

	// $ANTLR start synpred352_Delphi
	public final void synpred352_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:46: ( ';' ( statement )? )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:46: ';' ( statement )?
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred352_Delphi16012); if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:50: ( statement )?
		int alt341=2;
		int LA341_0 = input.LA(1);
		if ( (LA341_0==ADD||LA341_0==ANSISTRING||LA341_0==ASM||(LA341_0 >= AT && LA341_0 <= AT2)||(LA341_0 >= BEGIN && LA341_0 <= CASE)||(LA341_0 >= CONTAINS && LA341_0 <= ControlString)||(LA341_0 >= DEFAULT && LA341_0 <= DEPRECATED)||LA341_0==EXIT||LA341_0==EXPORT||LA341_0==FALSE||(LA341_0 >= FILE && LA341_0 <= FINAL)||LA341_0==FOR||LA341_0==GOTO||LA341_0==HELPER||LA341_0==IF||LA341_0==IMPLEMENTS||(LA341_0 >= INDEX && LA341_0 <= INHERITED)||LA341_0==LBRACK||(LA341_0 >= LOCAL && LA341_0 <= LPAREN)||(LA341_0 >= MESSAGE && LA341_0 <= MINUS)||LA341_0==NAME||LA341_0==NIL||LA341_0==NOT||LA341_0==OBJECT||LA341_0==OPERATOR||LA341_0==OUT||LA341_0==PACKAGE||(LA341_0 >= PLUS && LA341_0 <= POINTER)||(LA341_0 >= QuotedString && LA341_0 <= RAISE)||(LA341_0 >= READ && LA341_0 <= READONLY)||(LA341_0 >= REFERENCE && LA341_0 <= REGISTER)||(LA341_0 >= REMOVE && LA341_0 <= REPEAT)||(LA341_0 >= STORED && LA341_0 <= STRING)||(LA341_0 >= TRUE && LA341_0 <= TRY)||LA341_0==TkAsmHexNum||(LA341_0 >= TkHexNum && LA341_0 <= TkIntNum)||LA341_0==TkRealNum||LA341_0==VARIANT||(LA341_0 >= WHILE && LA341_0 <= WRITE)||LA341_0==199) ) {
			alt341=1;
		}
		switch (alt341) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:580:51: statement
				{
				pushFollow(FOLLOW_statement_in_synpred352_Delphi16015);
				statement();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred352_Delphi

	// $ANTLR start synpred353_Delphi
	public final void synpred353_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:32: ( designator ':=' expression )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:582:32: designator ':=' expression
		{
		pushFollow(FOLLOW_designator_in_synpred353_Delphi16069);
		designator();
		state._fsp--;
		if (state.failed) return;

		match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred353_Delphi16071); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred353_Delphi16073);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred353_Delphi

	// $ANTLR start synpred354_Delphi
	public final void synpred354_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: ( designator )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:583:32: designator
		{
		pushFollow(FOLLOW_designator_in_synpred354_Delphi16106);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred354_Delphi

	// $ANTLR start synpred356_Delphi
	public final void synpred356_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:40: ( '(' expression ')' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:587:40: '(' expression ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred356_Delphi16230); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred356_Delphi16232);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred356_Delphi16234); if (state.failed) return;

		}

	}
	// $ANTLR end synpred356_Delphi

	// $ANTLR start synpred359_Delphi
	public final void synpred359_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: ( expression )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:594:32: expression
		{
		pushFollow(FOLLOW_expression_in_synpred359_Delphi16355);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred359_Delphi

	// $ANTLR start synpred361_Delphi
	public final void synpred361_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:32: ( '(' recordConstExpression ( recordConstExpression )* ')' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:32: '(' recordConstExpression ( recordConstExpression )* ')'
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred361_Delphi16388); if (state.failed) return;

		pushFollow(FOLLOW_recordConstExpression_in_synpred361_Delphi16390);
		recordConstExpression();
		state._fsp--;
		if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:58: ( recordConstExpression )*
		loop343:
		while (true) {
			int alt343=2;
			int LA343_0 = input.LA(1);
			if ( (LA343_0==ADD||LA343_0==ANSISTRING||LA343_0==AT||LA343_0==BREAK||(LA343_0 >= CONTAINS && LA343_0 <= CONTINUE)||(LA343_0 >= DEFAULT && LA343_0 <= DEPRECATED)||LA343_0==EXIT||LA343_0==EXPORT||LA343_0==FINAL||LA343_0==HELPER||LA343_0==IMPLEMENTS||LA343_0==INDEX||LA343_0==LOCAL||LA343_0==MESSAGE||LA343_0==NAME||LA343_0==OBJECT||LA343_0==OPERATOR||LA343_0==OUT||LA343_0==PACKAGE||LA343_0==POINTER||(LA343_0 >= READ && LA343_0 <= READONLY)||(LA343_0 >= REFERENCE && LA343_0 <= REGISTER)||LA343_0==REMOVE||(LA343_0 >= STORED && LA343_0 <= STRING)||LA343_0==TkIdentifier||LA343_0==VARIANT||LA343_0==WRITE||LA343_0==199) ) {
				alt343=1;
			}

			switch (alt343) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:595:59: recordConstExpression
				{
				pushFollow(FOLLOW_recordConstExpression_in_synpred361_Delphi16393);
				recordConstExpression();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop343;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred361_Delphi16397); if (state.failed) return;

		}

	}
	// $ANTLR end synpred361_Delphi

	// $ANTLR start synpred364_Delphi
	public final void synpred364_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:39: ( statementList )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred364_Delphi16553);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred364_Delphi

	// $ANTLR start synpred365_Delphi
	public final void synpred365_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:32: ( 'try' ( statementList )? 'except' handlerList 'end' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:32: 'try' ( statementList )? 'except' handlerList 'end'
		{
		match(input,TRY,FOLLOW_TRY_in_synpred365_Delphi16550); if (state.failed) return;

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:38: ( statementList )?
		int alt344=2;
		int LA344_0 = input.LA(1);
		if ( (LA344_0==ADD||LA344_0==ANSISTRING||LA344_0==ASM||(LA344_0 >= AT && LA344_0 <= AT2)||(LA344_0 >= BEGIN && LA344_0 <= CASE)||(LA344_0 >= CONTAINS && LA344_0 <= ControlString)||(LA344_0 >= DEFAULT && LA344_0 <= DEPRECATED)||LA344_0==EXIT||LA344_0==EXPORT||LA344_0==FALSE||(LA344_0 >= FILE && LA344_0 <= FINAL)||LA344_0==FOR||LA344_0==GOTO||LA344_0==HELPER||LA344_0==IF||LA344_0==IMPLEMENTS||(LA344_0 >= INDEX && LA344_0 <= INHERITED)||LA344_0==LBRACK||(LA344_0 >= LOCAL && LA344_0 <= LPAREN)||(LA344_0 >= MESSAGE && LA344_0 <= MINUS)||LA344_0==NAME||LA344_0==NIL||LA344_0==NOT||LA344_0==OBJECT||LA344_0==OPERATOR||LA344_0==OUT||LA344_0==PACKAGE||(LA344_0 >= PLUS && LA344_0 <= POINTER)||(LA344_0 >= QuotedString && LA344_0 <= RAISE)||(LA344_0 >= READ && LA344_0 <= READONLY)||(LA344_0 >= REFERENCE && LA344_0 <= REGISTER)||(LA344_0 >= REMOVE && LA344_0 <= REPEAT)||LA344_0==SEMI||(LA344_0 >= STORED && LA344_0 <= STRING)||(LA344_0 >= TRUE && LA344_0 <= TRY)||LA344_0==TkAsmHexNum||(LA344_0 >= TkHexNum && LA344_0 <= TkIntNum)||LA344_0==TkRealNum||LA344_0==VARIANT||(LA344_0 >= WHILE && LA344_0 <= WRITE)||LA344_0==199) ) {
			alt344=1;
		}
		else if ( (LA344_0==EXCEPT) ) {
			int LA344_2 = input.LA(2);
			if ( (synpred364_Delphi()) ) {
				alt344=1;
			}
		}
		switch (alt344) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:603:39: statementList
				{
				pushFollow(FOLLOW_statementList_in_synpred365_Delphi16553);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		match(input,EXCEPT,FOLLOW_EXCEPT_in_synpred365_Delphi16557); if (state.failed) return;

		pushFollow(FOLLOW_handlerList_in_synpred365_Delphi16559);
		handlerList();
		state._fsp--;
		if (state.failed) return;

		match(input,END,FOLLOW_END_in_synpred365_Delphi16561); if (state.failed) return;

		}

	}
	// $ANTLR end synpred365_Delphi

	// $ANTLR start synpred366_Delphi
	public final void synpred366_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:39: ( statementList )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:39: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred366_Delphi16597);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred366_Delphi

	// $ANTLR start synpred367_Delphi
	public final void synpred367_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:66: ( statementList )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:604:66: statementList
		{
		pushFollow(FOLLOW_statementList_in_synpred367_Delphi16604);
		statementList();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred367_Delphi

	// $ANTLR start synpred370_Delphi
	public final void synpred370_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: ( ( handler )* ( 'else' statementList )? )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: ( handler )* ( 'else' statementList )?
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:32: ( handler )*
		loop345:
		while (true) {
			int alt345=2;
			int LA345_0 = input.LA(1);
			if ( (LA345_0==ON) ) {
				alt345=1;
			}

			switch (alt345) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:33: handler
				{
				pushFollow(FOLLOW_handler_in_synpred370_Delphi16663);
				handler();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop345;
			}
		}

		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:43: ( 'else' statementList )?
		int alt346=2;
		int LA346_0 = input.LA(1);
		if ( (LA346_0==ELSE) ) {
			alt346=1;
		}
		switch (alt346) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:606:44: 'else' statementList
				{
				match(input,ELSE,FOLLOW_ELSE_in_synpred370_Delphi16668); if (state.failed) return;

				pushFollow(FOLLOW_statementList_in_synpred370_Delphi16670);
				statementList();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred370_Delphi

	// $ANTLR start synpred374_Delphi
	public final void synpred374_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:41: ( designator )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:41: designator
		{
		pushFollow(FOLLOW_designator_in_synpred374_Delphi16972);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred374_Delphi

	// $ANTLR start synpred375_Delphi
	public final void synpred375_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:55: ( AT designator )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:616:55: AT designator
		{
		match(input,AT,FOLLOW_AT_in_synpred375_Delphi16977); if (state.failed) return;

		pushFollow(FOLLOW_designator_in_synpred375_Delphi16979);
		designator();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred375_Delphi

	// $ANTLR start synpred379_Delphi
	public final void synpred379_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:33: ( ( ';' )? methodDirective )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:33: ( ';' )? methodDirective
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:33: ( ';' )?
		int alt348=2;
		int LA348_0 = input.LA(1);
		if ( (LA348_0==SEMI) ) {
			alt348=1;
		}
		switch (alt348) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:34: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred379_Delphi17108); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_methodDirective_in_synpred379_Delphi17112);
		methodDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred379_Delphi

	// $ANTLR start synpred380_Delphi
	public final void synpred380_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: ( ( ( ';' )? methodDirective )* ';' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: ( ( ';' )? methodDirective )* ';'
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:32: ( ( ';' )? methodDirective )*
		loop350:
		while (true) {
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==SEMI) ) {
				int LA350_1 = input.LA(2);
				if ( (LA350_1==ABSTRACT||LA350_1==ASSEMBLER||LA350_1==CDECL||LA350_1==DEPRECATED||LA350_1==DISPID||LA350_1==DYNAMIC||(LA350_1 >= EXPERIMENTAL && LA350_1 <= EXPORT)||LA350_1==FAR||LA350_1==FINAL||LA350_1==INLINE||(LA350_1 >= LIBRARY && LA350_1 <= LOCAL)||LA350_1==MESSAGE||LA350_1==NEAR||(LA350_1 >= OVERLOAD && LA350_1 <= OVERRIDE)||(LA350_1 >= PASCAL && LA350_1 <= PLATFORM)||(LA350_1 >= REGISTER && LA350_1 <= REINTRODUCE)||LA350_1==SAFECALL||(LA350_1 >= STATIC && LA350_1 <= STDCALL)||LA350_1==VIRTUAL) ) {
					alt350=1;
				}

			}
			else if ( (LA350_0==ABSTRACT||LA350_0==ASSEMBLER||LA350_0==CDECL||LA350_0==DEPRECATED||LA350_0==DISPID||LA350_0==DYNAMIC||(LA350_0 >= EXPERIMENTAL && LA350_0 <= EXPORT)||LA350_0==FAR||LA350_0==FINAL||LA350_0==INLINE||(LA350_0 >= LIBRARY && LA350_0 <= LOCAL)||LA350_0==MESSAGE||LA350_0==NEAR||(LA350_0 >= OVERLOAD && LA350_0 <= OVERRIDE)||(LA350_0 >= PASCAL && LA350_0 <= PLATFORM)||(LA350_0 >= REGISTER && LA350_0 <= REINTRODUCE)||LA350_0==SAFECALL||(LA350_0 >= STATIC && LA350_0 <= STDCALL)||LA350_0==VIRTUAL) ) {
				alt350=1;
			}

			switch (alt350) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:33: ( ';' )? methodDirective
				{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:33: ( ';' )?
				int alt349=2;
				int LA349_0 = input.LA(1);
				if ( (LA349_0==SEMI) ) {
					alt349=1;
				}
				switch (alt349) {
					case 1 :
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:626:34: ';'
						{
						match(input,SEMI,FOLLOW_SEMI_in_synpred380_Delphi17108); if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_methodDirective_in_synpred380_Delphi17112);
				methodDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop350;
			}
		}

		match(input,SEMI,FOLLOW_SEMI_in_synpred380_Delphi17116); if (state.failed) return;

		}

	}
	// $ANTLR end synpred380_Delphi

	// $ANTLR start synpred382_Delphi
	public final void synpred382_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:33: ( ( ';' )? functionDirective )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:33: ( ';' )? functionDirective
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:33: ( ';' )?
		int alt351=2;
		int LA351_0 = input.LA(1);
		if ( (LA351_0==SEMI) ) {
			alt351=1;
		}
		switch (alt351) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:34: ';'
				{
				match(input,SEMI,FOLLOW_SEMI_in_synpred382_Delphi17192); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_functionDirective_in_synpred382_Delphi17196);
		functionDirective();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred382_Delphi

	// $ANTLR start synpred383_Delphi
	public final void synpred383_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: ( ( ( ';' )? functionDirective )* ';' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: ( ( ';' )? functionDirective )* ';'
		{
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:32: ( ( ';' )? functionDirective )*
		loop353:
		while (true) {
			int alt353=2;
			int LA353_0 = input.LA(1);
			if ( (LA353_0==SEMI) ) {
				int LA353_1 = input.LA(2);
				if ( (LA353_1==ASSEMBLER||LA353_1==CDECL||LA353_1==DEPRECATED||(LA353_1 >= EXPERIMENTAL && LA353_1 <= EXPORT)||LA353_1==EXTERNAL||LA353_1==FAR||LA353_1==FORWARD||LA353_1==INLINE||(LA353_1 >= LIBRARY && LA353_1 <= LOCAL)||LA353_1==NEAR||LA353_1==OVERLOAD||(LA353_1 >= PASCAL && LA353_1 <= PLATFORM)||LA353_1==REGISTER||LA353_1==SAFECALL||LA353_1==STDCALL||LA353_1==UNSAFE||LA353_1==VARARGS) ) {
					alt353=1;
				}

			}
			else if ( (LA353_0==ASSEMBLER||LA353_0==CDECL||LA353_0==DEPRECATED||(LA353_0 >= EXPERIMENTAL && LA353_0 <= EXPORT)||LA353_0==EXTERNAL||LA353_0==FAR||LA353_0==FORWARD||LA353_0==INLINE||(LA353_0 >= LIBRARY && LA353_0 <= LOCAL)||LA353_0==NEAR||LA353_0==OVERLOAD||(LA353_0 >= PASCAL && LA353_0 <= PLATFORM)||LA353_0==REGISTER||LA353_0==SAFECALL||LA353_0==STDCALL||LA353_0==UNSAFE||LA353_0==VARARGS) ) {
				alt353=1;
			}

			switch (alt353) {
			case 1 :
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:33: ( ';' )? functionDirective
				{
				// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:33: ( ';' )?
				int alt352=2;
				int LA352_0 = input.LA(1);
				if ( (LA352_0==SEMI) ) {
					alt352=1;
				}
				switch (alt352) {
					case 1 :
						// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:629:34: ';'
						{
						match(input,SEMI,FOLLOW_SEMI_in_synpred383_Delphi17192); if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_functionDirective_in_synpred383_Delphi17196);
				functionDirective();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop353;
			}
		}

		match(input,SEMI,FOLLOW_SEMI_in_synpred383_Delphi17200); if (state.failed) return;

		}

	}
	// $ANTLR end synpred383_Delphi

	// $ANTLR start synpred384_Delphi
	public final void synpred384_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:48: ( ';' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:632:48: ';'
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred384_Delphi17276); if (state.failed) return;

		}

	}
	// $ANTLR end synpred384_Delphi

	// $ANTLR start synpred418_Delphi
	public final void synpred418_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:44: ( constExpression )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:682:44: constExpression
		{
		pushFollow(FOLLOW_constExpression_in_synpred418_Delphi18819);
		constExpression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred418_Delphi

	// $ANTLR start synpred460_Delphi
	public final void synpred460_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:33: ( namespaceName '.' )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:715:33: namespaceName '.'
		{
		pushFollow(FOLLOW_namespaceName_in_synpred460_Delphi19860);
		namespaceName();
		state._fsp--;
		if (state.failed) return;

		match(input,DOT,FOLLOW_DOT_in_synpred460_Delphi19862); if (state.failed) return;

		}

	}
	// $ANTLR end synpred460_Delphi

	// $ANTLR start synpred461_Delphi
	public final void synpred461_Delphi_fragment() throws RecognitionException {
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:39: ( '.' ident )
		// ***REMOVED***\\Desktop\\MonashCapstone2018\\Code\\FIT4002_SonarQube_Delphi\\src\\main\\antlr3\\org\\sonar\\plugins\\delphi\\antlr\\Delphi.g:717:39: '.' ident
		{
		match(input,DOT,FOLLOW_DOT_in_synpred461_Delphi19921); if (state.failed) return;

		pushFollow(FOLLOW_ident_in_synpred461_Delphi19923);
		ident();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred461_Delphi

	// Delegated rules

	public final boolean synpred220_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred220_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred353_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred353_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred352_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred352_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred354_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred354_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred356_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred356_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred31_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred31_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred32_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred36_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred30_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred70_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred70_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred129_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred129_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred297_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred297_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred130_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred130_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred298_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred298_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred123_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred123_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred127_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred127_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred263_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred263_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred265_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred265_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred173_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred173_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred66_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred66_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred227_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred227_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred64_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred64_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred223_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred223_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred361_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred361_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred40_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred42_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred42_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred198_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred198_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred346_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred346_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred24_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred364_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred364_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred382_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred382_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred383_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred383_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred62_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred62_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred349_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred349_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred345_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred345_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred83_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred83_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred157_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred157_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred158_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred158_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred273_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred273_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred153_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred153_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred124_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred124_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred150_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred150_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred418_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred418_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred128_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred128_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred248_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred248_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred161_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred161_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred87_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred87_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred172_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred172_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred113_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred113_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred259_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred259_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred244_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred244_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred379_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred379_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred183_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred183_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred65_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred65_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred375_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred375_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred233_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred233_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred47_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred47_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred203_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred203_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred51_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred51_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred202_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred202_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred337_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred337_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred188_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred188_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred189_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred189_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred94_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred94_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred90_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred90_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred92_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred92_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred461_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred461_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred143_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred143_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred147_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred147_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred144_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred144_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred146_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred146_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred284_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred284_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred300_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred300_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred151_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred151_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred278_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred278_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred247_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred247_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred86_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred86_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred88_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred88_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred114_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred114_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred191_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred191_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred182_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred182_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred101_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred101_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred234_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred234_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred236_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred236_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred184_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred184_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred245_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred245_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred367_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred367_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred46_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred55_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred55_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred365_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred365_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred370_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred370_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred374_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred374_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred380_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred380_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred347_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred347_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred178_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred178_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred177_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred177_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred81_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred81_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred23_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred344_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred344_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred156_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred156_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred272_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred272_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred137_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred137_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred138_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred138_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred268_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred268_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred460_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred460_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred122_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred122_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred152_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred152_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred264_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred264_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred253_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred253_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred49_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred49_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred100_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred100_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred38_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred67_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred67_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred63_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred63_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred359_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred359_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred384_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred384_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred45_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred224_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred224_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred231_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred231_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred366_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred366_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred228_Delphi() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred228_Delphi_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA26 dfa26 = new DFA26(this);
	protected DFA30 dfa30 = new DFA30(this);
	protected DFA34 dfa34 = new DFA34(this);
	protected DFA54 dfa54 = new DFA54(this);
	protected DFA56 dfa56 = new DFA56(this);
	protected DFA58 dfa58 = new DFA58(this);
	protected DFA67 dfa67 = new DFA67(this);
	protected DFA74 dfa74 = new DFA74(this);
	protected DFA84 dfa84 = new DFA84(this);
	protected DFA89 dfa89 = new DFA89(this);
	protected DFA101 dfa101 = new DFA101(this);
	protected DFA177 dfa177 = new DFA177(this);
	protected DFA195 dfa195 = new DFA195(this);
	protected DFA196 dfa196 = new DFA196(this);
	protected DFA198 dfa198 = new DFA198(this);
	protected DFA201 dfa201 = new DFA201(this);
	protected DFA203 dfa203 = new DFA203(this);
	protected DFA205 dfa205 = new DFA205(this);
	protected DFA281 dfa281 = new DFA281(this);
	static final String DFA26_eotS =
		"\142\uffff";
	static final String DFA26_eofS =
		"\1\1\141\uffff";
	static final String DFA26_minS =
		"\1\4\7\uffff\1\0\10\uffff\1\0\6\uffff\1\0\5\uffff\1\0\1\uffff\1\0\5\uffff"+
		"\1\0\1\uffff\2\0\1\uffff\1\0\4\uffff\1\0\4\uffff\1\0\2\uffff\1\0\6\uffff"+
		"\3\0\1\uffff\2\0\1\uffff\1\0\12\uffff\1\0\15\uffff\1\0\2\uffff";
	static final String DFA26_maxS =
		"\1\u00c7\7\uffff\1\0\10\uffff\1\0\6\uffff\1\0\5\uffff\1\0\1\uffff\1\0"+
		"\5\uffff\1\0\1\uffff\2\0\1\uffff\1\0\4\uffff\1\0\4\uffff\1\0\2\uffff\1"+
		"\0\6\uffff\3\0\1\uffff\2\0\1\uffff\1\0\12\uffff\1\0\15\uffff\1\0\2\uffff";
	static final String DFA26_acceptS =
		"\1\uffff\1\2\137\uffff\1\1";
	static final String DFA26_specialS =
		"\10\uffff\1\0\10\uffff\1\1\6\uffff\1\2\5\uffff\1\3\1\uffff\1\4\5\uffff"+
		"\1\5\1\uffff\1\6\1\7\1\uffff\1\10\4\uffff\1\11\4\uffff\1\12\2\uffff\1"+
		"\13\6\uffff\1\14\1\15\1\16\1\uffff\1\17\1\20\1\uffff\1\21\12\uffff\1\22"+
		"\15\uffff\1\23\2\uffff}>";
	static final String[] DFA26_transitionS = {
			"\2\1\1\137\1\uffff\1\137\2\uffff\2\1\2\uffff\1\137\2\1\1\uffff\1\1\1"+
			"\137\5\1\1\uffff\2\1\2\137\1\1\1\uffff\1\103\1\30\2\1\2\uffff\4\1\2\uffff"+
			"\1\1\2\uffff\4\1\1\137\1\1\1\36\5\1\1\60\2\1\1\uffff\2\1\2\uffff\1\1"+
			"\1\137\3\uffff\1\1\1\104\1\uffff\1\121\3\1\2\uffff\1\1\1\10\3\uffff\1"+
			"\1\1\65\1\1\1\uffff\1\53\1\1\1\uffff\1\21\4\1\1\uffff\1\137\2\1\1\46"+
			"\1\uffff\1\137\2\1\1\137\1\uffff\3\1\1\137\1\uffff\2\1\1\uffff\5\1\1"+
			"\uffff\1\1\2\uffff\1\70\1\100\1\uffff\1\137\1\36\1\1\1\137\2\uffff\4"+
			"\1\1\uffff\1\1\5\uffff\2\1\1\101\1\40\1\106\4\1\1\uffff\1\1\1\uffff\1"+
			"\1\14\uffff\1\1\1\50\1\1\3\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\137\1"+
			"\1\2\uffff\1\77\1\1\2\uffff\1\51",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
	static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
	static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
	static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
	static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
	static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
	static final short[][] DFA26_transition;

	static {
		int numStates = DFA26_transitionS.length;
		DFA26_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
		}
	}

	protected class DFA26 extends DFA {

		public DFA26(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 150:41: ( constDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA26_8 = input.LA(1);
						 
						int index26_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA26_17 = input.LA(1);
						 
						int index26_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA26_24 = input.LA(1);
						 
						int index26_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA26_30 = input.LA(1);
						 
						int index26_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_30);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA26_32 = input.LA(1);
						 
						int index26_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_32);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA26_38 = input.LA(1);
						 
						int index26_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA26_40 = input.LA(1);
						 
						int index26_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_40);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA26_41 = input.LA(1);
						 
						int index26_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_41);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA26_43 = input.LA(1);
						 
						int index26_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_43);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA26_48 = input.LA(1);
						 
						int index26_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_48);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA26_53 = input.LA(1);
						 
						int index26_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_53);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA26_56 = input.LA(1);
						 
						int index26_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_56);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA26_63 = input.LA(1);
						 
						int index26_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_63);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA26_64 = input.LA(1);
						 
						int index26_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_64);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA26_65 = input.LA(1);
						 
						int index26_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_65);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA26_67 = input.LA(1);
						 
						int index26_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_67);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA26_68 = input.LA(1);
						 
						int index26_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_68);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA26_70 = input.LA(1);
						 
						int index26_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_70);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA26_81 = input.LA(1);
						 
						int index26_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_81);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA26_95 = input.LA(1);
						 
						int index26_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred40_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index26_95);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 26, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA30_eotS =
		"\142\uffff";
	static final String DFA30_eofS =
		"\1\1\141\uffff";
	static final String DFA30_minS =
		"\1\4\7\uffff\1\0\10\uffff\1\0\6\uffff\1\0\5\uffff\1\0\1\uffff\1\0\5\uffff"+
		"\1\0\1\uffff\2\0\1\uffff\1\0\4\uffff\1\0\4\uffff\1\0\2\uffff\1\0\6\uffff"+
		"\3\0\1\uffff\2\0\1\uffff\1\0\12\uffff\1\0\15\uffff\1\0\2\uffff";
	static final String DFA30_maxS =
		"\1\u00c7\7\uffff\1\0\10\uffff\1\0\6\uffff\1\0\5\uffff\1\0\1\uffff\1\0"+
		"\5\uffff\1\0\1\uffff\2\0\1\uffff\1\0\4\uffff\1\0\4\uffff\1\0\2\uffff\1"+
		"\0\6\uffff\3\0\1\uffff\2\0\1\uffff\1\0\12\uffff\1\0\15\uffff\1\0\2\uffff";
	static final String DFA30_acceptS =
		"\1\uffff\1\2\137\uffff\1\1";
	static final String DFA30_specialS =
		"\10\uffff\1\0\10\uffff\1\1\6\uffff\1\2\5\uffff\1\3\1\uffff\1\4\5\uffff"+
		"\1\5\1\uffff\1\6\1\7\1\uffff\1\10\4\uffff\1\11\4\uffff\1\12\2\uffff\1"+
		"\13\6\uffff\1\14\1\15\1\16\1\uffff\1\17\1\20\1\uffff\1\21\12\uffff\1\22"+
		"\15\uffff\1\23\2\uffff}>";
	static final String[] DFA30_transitionS = {
			"\2\1\1\137\1\uffff\1\137\2\uffff\2\1\2\uffff\1\137\2\1\1\uffff\1\1\1"+
			"\137\5\1\1\uffff\2\1\2\137\1\1\1\uffff\1\103\1\30\2\1\2\uffff\4\1\2\uffff"+
			"\1\1\2\uffff\4\1\1\137\1\1\1\36\5\1\1\60\2\1\1\uffff\2\1\2\uffff\1\1"+
			"\1\137\3\uffff\1\1\1\104\1\uffff\1\121\3\1\2\uffff\1\1\1\10\3\uffff\1"+
			"\1\1\65\1\1\1\uffff\1\53\1\1\1\uffff\1\21\4\1\1\uffff\1\137\2\1\1\46"+
			"\1\uffff\1\137\2\1\1\137\1\uffff\3\1\1\137\1\uffff\2\1\1\uffff\5\1\1"+
			"\uffff\1\1\2\uffff\1\70\1\100\1\uffff\1\137\1\36\1\1\1\137\2\uffff\4"+
			"\1\1\uffff\1\1\5\uffff\2\1\1\101\1\40\1\106\4\1\1\uffff\1\1\1\uffff\1"+
			"\1\14\uffff\1\1\1\50\1\1\3\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\137\1"+
			"\1\2\uffff\1\77\1\1\2\uffff\1\51",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
	static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
	static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
	static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
	static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
	static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
	static final short[][] DFA30_transition;

	static {
		int numStates = DFA30_transitionS.length;
		DFA30_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
		}
	}

	protected class DFA30 extends DFA {

		public DFA30(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 157:55: ( typeDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA30_8 = input.LA(1);
						 
						int index30_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA30_17 = input.LA(1);
						 
						int index30_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA30_24 = input.LA(1);
						 
						int index30_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA30_30 = input.LA(1);
						 
						int index30_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_30);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA30_32 = input.LA(1);
						 
						int index30_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_32);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA30_38 = input.LA(1);
						 
						int index30_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA30_40 = input.LA(1);
						 
						int index30_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_40);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA30_41 = input.LA(1);
						 
						int index30_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_41);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA30_43 = input.LA(1);
						 
						int index30_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_43);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA30_48 = input.LA(1);
						 
						int index30_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_48);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA30_53 = input.LA(1);
						 
						int index30_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_53);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA30_56 = input.LA(1);
						 
						int index30_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_56);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA30_63 = input.LA(1);
						 
						int index30_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_63);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA30_64 = input.LA(1);
						 
						int index30_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_64);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA30_65 = input.LA(1);
						 
						int index30_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_65);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA30_67 = input.LA(1);
						 
						int index30_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_67);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA30_68 = input.LA(1);
						 
						int index30_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_68);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA30_70 = input.LA(1);
						 
						int index30_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_70);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA30_81 = input.LA(1);
						 
						int index30_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_81);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA30_95 = input.LA(1);
						 
						int index30_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index30_95);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 30, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA34_eotS =
		"\142\uffff";
	static final String DFA34_eofS =
		"\1\1\141\uffff";
	static final String DFA34_minS =
		"\1\4\7\uffff\1\0\10\uffff\1\0\6\uffff\1\0\5\uffff\1\0\1\uffff\1\0\5\uffff"+
		"\1\0\1\uffff\2\0\1\uffff\1\0\4\uffff\1\0\4\uffff\1\0\2\uffff\1\0\6\uffff"+
		"\3\0\1\uffff\2\0\1\uffff\1\0\12\uffff\1\0\15\uffff\1\0\2\uffff";
	static final String DFA34_maxS =
		"\1\u00c7\7\uffff\1\0\10\uffff\1\0\6\uffff\1\0\5\uffff\1\0\1\uffff\1\0"+
		"\5\uffff\1\0\1\uffff\2\0\1\uffff\1\0\4\uffff\1\0\4\uffff\1\0\2\uffff\1"+
		"\0\6\uffff\3\0\1\uffff\2\0\1\uffff\1\0\12\uffff\1\0\15\uffff\1\0\2\uffff";
	static final String DFA34_acceptS =
		"\1\uffff\1\2\137\uffff\1\1";
	static final String DFA34_specialS =
		"\10\uffff\1\0\10\uffff\1\1\6\uffff\1\2\5\uffff\1\3\1\uffff\1\4\5\uffff"+
		"\1\5\1\uffff\1\6\1\7\1\uffff\1\10\4\uffff\1\11\4\uffff\1\12\2\uffff\1"+
		"\13\6\uffff\1\14\1\15\1\16\1\uffff\1\17\1\20\1\uffff\1\21\12\uffff\1\22"+
		"\15\uffff\1\23\2\uffff}>";
	static final String[] DFA34_transitionS = {
			"\2\1\1\137\1\uffff\1\137\2\uffff\2\1\2\uffff\1\137\2\1\1\uffff\1\1\1"+
			"\137\5\1\1\uffff\2\1\2\137\1\1\1\uffff\1\103\1\30\2\1\2\uffff\4\1\2\uffff"+
			"\1\1\2\uffff\4\1\1\137\1\1\1\36\5\1\1\60\2\1\1\uffff\2\1\2\uffff\1\1"+
			"\1\137\3\uffff\1\1\1\104\1\uffff\1\121\3\1\2\uffff\1\1\1\10\3\uffff\1"+
			"\1\1\65\1\1\1\uffff\1\53\1\1\1\uffff\1\21\4\1\1\uffff\1\137\2\1\1\46"+
			"\1\uffff\1\137\2\1\1\137\1\uffff\3\1\1\137\1\uffff\2\1\1\uffff\5\1\1"+
			"\uffff\1\1\2\uffff\1\70\1\100\1\uffff\1\137\1\36\1\1\1\137\2\uffff\4"+
			"\1\1\uffff\1\1\5\uffff\2\1\1\101\1\40\1\106\4\1\1\uffff\1\1\1\uffff\1"+
			"\1\14\uffff\1\1\1\50\1\1\3\uffff\1\1\6\uffff\2\1\2\uffff\2\1\1\137\1"+
			"\1\2\uffff\1\77\1\1\2\uffff\1\51",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
	static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
	static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
	static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
	static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
	static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
	static final short[][] DFA34_transition;

	static {
		int numStates = DFA34_transitionS.length;
		DFA34_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
		}
	}

	protected class DFA34 extends DFA {

		public DFA34(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 163:54: ( varDeclaration )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA34_8 = input.LA(1);
						 
						int index34_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA34_17 = input.LA(1);
						 
						int index34_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA34_24 = input.LA(1);
						 
						int index34_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA34_30 = input.LA(1);
						 
						int index34_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_30);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA34_32 = input.LA(1);
						 
						int index34_32 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_32);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA34_38 = input.LA(1);
						 
						int index34_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_38);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA34_40 = input.LA(1);
						 
						int index34_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_40);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA34_41 = input.LA(1);
						 
						int index34_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_41);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA34_43 = input.LA(1);
						 
						int index34_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_43);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA34_48 = input.LA(1);
						 
						int index34_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_48);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA34_53 = input.LA(1);
						 
						int index34_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_53);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA34_56 = input.LA(1);
						 
						int index34_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_56);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA34_63 = input.LA(1);
						 
						int index34_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_63);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA34_64 = input.LA(1);
						 
						int index34_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_64);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA34_65 = input.LA(1);
						 
						int index34_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_65);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA34_67 = input.LA(1);
						 
						int index34_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_67);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA34_68 = input.LA(1);
						 
						int index34_68 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_68);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA34_70 = input.LA(1);
						 
						int index34_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_70);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA34_81 = input.LA(1);
						 
						int index34_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_81);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA34_95 = input.LA(1);
						 
						int index34_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred49_Delphi()) ) {s = 97;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index34_95);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 34, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA54_eotS =
		"\15\uffff";
	static final String DFA54_eofS =
		"\1\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\2\7\1\uffff\2\7";
	static final String DFA54_minS =
		"\1\6\1\7\1\u00ad\1\7\1\uffff\1\7\1\6\1\uffff\2\7\1\u00ad\2\7";
	static final String DFA54_maxS =
		"\1\u00c7\1\u00c6\1\u00ad\1\u00c6\1\uffff\1\u00c6\1\u00c7\1\uffff\2\u00c6"+
		"\1\u00ad\2\u00c6";
	static final String DFA54_acceptS =
		"\4\uffff\1\2\2\uffff\1\1\5\uffff";
	static final String DFA54_specialS =
		"\15\uffff}>";
	static final String[] DFA54_transitionS = {
			"\1\5\1\uffff\1\5\6\uffff\1\5\1\4\3\uffff\1\5\10\uffff\2\5\1\4\1\uffff"+
			"\2\5\21\uffff\1\5\1\uffff\1\5\2\uffff\1\4\1\uffff\1\4\1\5\4\uffff\1\4"+
			"\3\uffff\1\5\4\uffff\1\5\1\uffff\1\5\1\4\5\uffff\1\4\4\uffff\1\5\1\4"+
			"\1\uffff\1\5\1\4\1\uffff\1\5\1\uffff\1\4\1\uffff\1\4\1\uffff\1\5\2\uffff"+
			"\1\5\1\uffff\1\5\2\uffff\1\5\3\uffff\1\4\1\5\2\uffff\1\4\5\uffff\1\4"+
			"\4\uffff\2\5\1\uffff\2\5\1\uffff\1\5\17\uffff\2\5\1\3\3\uffff\1\4\3\uffff"+
			"\1\4\14\uffff\1\4\1\1\1\4\3\uffff\1\4\14\uffff\1\5\3\uffff\1\5\3\uffff"+
			"\1\2",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\7\14\uffff\1\4\1\uffff\1\6\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\7\22\uffff\4\4\63\uffff\1\4",
			"\1\10",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\7\14\uffff\1\4\1\uffff\1\6\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\7\22\uffff\4\4\63\uffff\1\4",
			"",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\7\14\uffff\1\4\1\uffff\1\6\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\7\22\uffff\4\4\63\uffff\1\4",
			"\1\13\1\uffff\1\13\6\uffff\1\13\4\uffff\1\13\10\uffff\2\13\2\uffff\2"+
			"\13\21\uffff\1\13\1\uffff\1\13\5\uffff\1\13\10\uffff\1\13\4\uffff\1\13"+
			"\1\uffff\1\13\13\uffff\1\13\2\uffff\1\13\2\uffff\1\13\5\uffff\1\13\2"+
			"\uffff\1\13\1\uffff\1\13\2\uffff\1\13\4\uffff\1\13\15\uffff\2\13\1\uffff"+
			"\2\13\1\uffff\1\13\17\uffff\3\13\25\uffff\1\11\21\uffff\1\13\3\uffff"+
			"\1\13\3\uffff\1\12",
			"",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\7\14\uffff\1\4\1\uffff\1\6\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\7\22\uffff\4\4\63\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\7\14\uffff\1\4\1\uffff\1\6\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\7\22\uffff\4\4\63\uffff\1\4",
			"\1\14",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\7\14\uffff\1\4\1\uffff\1\6\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\7\22\uffff\4\4\63\uffff\1\4",
			"\1\4\2\uffff\1\4\5\uffff\1\4\10\uffff\1\7\14\uffff\1\4\1\uffff\1\6\1"+
			"\4\10\uffff\1\4\17\uffff\1\4\1\uffff\1\4\6\uffff\1\4\5\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\2\uffff\2\4\1\uffff\2\4\5\uffff\1\4\4\uffff\1\4\7\uffff"+
			"\1\4\1\uffff\1\4\11\uffff\1\7\22\uffff\4\4\63\uffff\1\4"
	};

	static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
	static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
	static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
	static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
	static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
	static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
	static final short[][] DFA54_transition;

	static {
		int numStates = DFA54_transitionS.length;
		DFA54_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
		}
	}

	protected class DFA54 extends DFA {

		public DFA54(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 54;
			this.eot = DFA54_eot;
			this.eof = DFA54_eof;
			this.min = DFA54_min;
			this.max = DFA54_max;
			this.accept = DFA54_accept;
			this.special = DFA54_special;
			this.transition = DFA54_transition;
		}
		@Override
		public String getDescription() {
			return "203:1: arrayIndex : ( typeId | expression '..' expression );";
		}
	}

	static final String DFA56_eotS =
		"\137\uffff";
	static final String DFA56_eofS =
		"\1\2\136\uffff";
	static final String DFA56_minS =
		"\1\4\1\0\135\uffff";
	static final String DFA56_maxS =
		"\1\u00c7\1\0\135\uffff";
	static final String DFA56_acceptS =
		"\2\uffff\1\2\133\uffff\1\1";
	static final String DFA56_specialS =
		"\1\uffff\1\0\135\uffff}>";
	static final String[] DFA56_transitionS = {
			"\3\2\1\uffff\1\2\2\uffff\2\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\17\2\1\uffff\2\2\2\uffff"+
			"\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\2\2\3\uffff\3\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\1\2\1\1\2\2\1\uffff\4\2\1\uffff\4\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff"+
			"\1\2\5\uffff\11\2\1\uffff\1\2\1\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\4\2\2\uffff\2\2\2\uffff\1\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
	static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
	static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
	static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
	static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
	static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
	static final short[][] DFA56_transition;

	static {
		int numStates = DFA56_transitionS.length;
		DFA56_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
		}
	}

	protected class DFA56 extends DFA {

		public DFA56(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 56;
			this.eot = DFA56_eot;
			this.eof = DFA56_eof;
			this.min = DFA56_min;
			this.max = DFA56_max;
			this.accept = DFA56_accept;
			this.special = DFA56_special;
			this.transition = DFA56_transition;
		}
		@Override
		public String getDescription() {
			return "213:39: ( 'of' typeDecl )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA56_1 = input.LA(1);
						 
						int index56_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred81_Delphi()) ) {s = 94;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index56_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 56, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA58_eotS =
		"\137\uffff";
	static final String DFA58_eofS =
		"\1\2\136\uffff";
	static final String DFA58_minS =
		"\1\4\1\0\135\uffff";
	static final String DFA58_maxS =
		"\1\u00c7\1\0\135\uffff";
	static final String DFA58_acceptS =
		"\2\uffff\1\2\133\uffff\1\1";
	static final String DFA58_specialS =
		"\1\uffff\1\0\135\uffff}>";
	static final String[] DFA58_transitionS = {
			"\3\2\1\uffff\1\2\2\uffff\2\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\17\2\1\uffff\2\2\2\uffff"+
			"\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\1\1\3\uffff\3\2"+
			"\1\uffff\2\2\1\uffff\5\2\1\uffff\4\2\1\uffff\4\2\1\uffff\4\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff"+
			"\1\2\5\uffff\11\2\1\uffff\1\2\1\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\4\2\2\uffff\2\2\2\uffff\1\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
	static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
	static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
	static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
	static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
	static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
	static final short[][] DFA58_transition;

	static {
		int numStates = DFA58_transitionS.length;
		DFA58_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
		}
	}

	protected class DFA58 extends DFA {

		public DFA58(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}
		@Override
		public String getDescription() {
			return "218:41: ( '[' expression ']' )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA58_1 = input.LA(1);
						 
						int index58_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred83_Delphi()) ) {s = 94;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index58_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 58, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA67_eotS =
		"\137\uffff";
	static final String DFA67_eofS =
		"\1\2\136\uffff";
	static final String DFA67_minS =
		"\1\4\1\0\135\uffff";
	static final String DFA67_maxS =
		"\1\u00c7\1\0\135\uffff";
	static final String DFA67_acceptS =
		"\2\uffff\1\2\133\uffff\1\1";
	static final String DFA67_specialS =
		"\1\uffff\1\0\135\uffff}>";
	static final String[] DFA67_transitionS = {
			"\3\2\1\uffff\1\2\2\uffff\2\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\17\2\1\uffff\2\2\2\uffff"+
			"\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\2\2\3\uffff\2\2\1\1"+
			"\1\uffff\2\2\1\uffff\5\2\1\uffff\4\2\1\uffff\4\2\1\uffff\4\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff"+
			"\1\2\5\uffff\11\2\1\uffff\1\2\1\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\4\2\2\uffff\2\2\2\uffff\1\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
	static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
	static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
	static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
	static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
	static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
	static final short[][] DFA67_transition;

	static {
		int numStates = DFA67_transitionS.length;
		DFA67_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
		}
	}

	protected class DFA67 extends DFA {

		public DFA67(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 67;
			this.eot = DFA67_eot;
			this.eof = DFA67_eof;
			this.min = DFA67_min;
			this.max = DFA67_max;
			this.accept = DFA67_accept;
			this.special = DFA67_special;
			this.transition = DFA67_transition;
		}
		@Override
		public String getDescription() {
			return "234:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA67_1 = input.LA(1);
						 
						int index67_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred94_Delphi()) ) {s = 94;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index67_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 67, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA74_eotS =
		"\22\uffff";
	static final String DFA74_eofS =
		"\22\uffff";
	static final String DFA74_minS =
		"\1\132\1\6\1\30\1\u00ad\1\30\1\6\1\0\2\uffff\1\30\1\0\1\31\1\u00ad\1\31"+
		"\1\uffff\2\0\1\31";
	static final String DFA74_maxS =
		"\1\132\1\u00c7\1\u008d\1\u00ad\1\u008d\1\u00c7\1\0\2\uffff\1\u008d\1\0"+
		"\1\132\1\u00ad\1\132\1\uffff\2\0\1\132";
	static final String DFA74_acceptS =
		"\7\uffff\1\2\1\3\5\uffff\1\1\3\uffff";
	static final String DFA74_specialS =
		"\6\uffff\1\1\3\uffff\1\2\4\uffff\1\3\1\0\1\uffff}>";
	static final String[] DFA74_transitionS = {
			"\1\1",
			"\1\4\1\uffff\1\4\6\uffff\1\4\4\uffff\1\4\10\uffff\2\4\2\uffff\2\4\21"+
			"\uffff\1\4\1\uffff\1\4\5\uffff\1\4\10\uffff\1\4\4\uffff\1\4\1\uffff\1"+
			"\4\13\uffff\1\4\2\uffff\1\4\2\uffff\1\4\5\uffff\1\4\2\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\4\uffff\1\4\15\uffff\2\4\1\uffff\2\4\1\uffff\1\4\17"+
			"\uffff\3\4\25\uffff\1\2\21\uffff\1\4\3\uffff\1\4\3\uffff\1\3",
			"\1\10\1\5\16\uffff\1\7\33\uffff\1\6\25\uffff\1\7\62\uffff\1\10",
			"\1\11",
			"\1\10\1\5\16\uffff\1\7\33\uffff\1\12\25\uffff\1\7\62\uffff\1\10",
			"\1\15\1\uffff\1\15\6\uffff\1\15\4\uffff\1\15\10\uffff\2\15\2\uffff\2"+
			"\15\21\uffff\1\15\1\uffff\1\15\5\uffff\1\15\10\uffff\1\15\4\uffff\1\15"+
			"\1\uffff\1\15\13\uffff\1\15\2\uffff\1\15\2\uffff\1\15\5\uffff\1\15\2"+
			"\uffff\1\15\1\uffff\1\15\2\uffff\1\15\4\uffff\1\15\15\uffff\2\15\1\uffff"+
			"\2\15\1\uffff\1\15\17\uffff\3\15\25\uffff\1\13\21\uffff\1\15\3\uffff"+
			"\1\15\3\uffff\1\14",
			"\1\uffff",
			"",
			"",
			"\1\10\1\5\16\uffff\1\7\33\uffff\1\17\25\uffff\1\7\62\uffff\1\10",
			"\1\uffff",
			"\1\5\16\uffff\1\7\33\uffff\1\20\25\uffff\1\7",
			"\1\21",
			"\1\5\16\uffff\1\7\33\uffff\1\20\25\uffff\1\7",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\5\16\uffff\1\7\33\uffff\1\20\25\uffff\1\7"
	};

	static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
	static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
	static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
	static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
	static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
	static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
	static final short[][] DFA74_transition;

	static {
		int numStates = DFA74_transitionS.length;
		DFA74_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
		}
	}

	protected class DFA74 extends DFA {

		public DFA74(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 74;
			this.eot = DFA74_eot;
			this.eof = DFA74_eof;
			this.min = DFA74_min;
			this.max = DFA74_max;
			this.accept = DFA74_accept;
			this.special = DFA74_special;
			this.transition = DFA74_transition;
		}
		@Override
		public String getDescription() {
			return "252:1: genericDefinition : ( simpleGenericDefinition | complexGenericDefinition | constrainedGenericDefinition );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA74_16 = input.LA(1);
						 
						int index74_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred100_Delphi()) ) {s = 14;}
						else if ( (synpred101_Delphi()) ) {s = 7;}
						 
						input.seek(index74_16);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA74_6 = input.LA(1);
						 
						int index74_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred100_Delphi()) ) {s = 14;}
						else if ( (synpred101_Delphi()) ) {s = 7;}
						else if ( (true) ) {s = 8;}
						 
						input.seek(index74_6);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA74_10 = input.LA(1);
						 
						int index74_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred100_Delphi()) ) {s = 14;}
						else if ( (synpred101_Delphi()) ) {s = 7;}
						else if ( (true) ) {s = 8;}
						 
						input.seek(index74_10);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA74_15 = input.LA(1);
						 
						int index74_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred100_Delphi()) ) {s = 14;}
						else if ( (synpred101_Delphi()) ) {s = 7;}
						else if ( (true) ) {s = 8;}
						 
						input.seek(index74_15);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 74, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA84_eotS =
		"\u00be\uffff";
	static final String DFA84_eofS =
		"\1\uffff\1\7\4\uffff\1\7\24\uffff\1\7\25\uffff\1\7\u008c\uffff";
	static final String DFA84_minS =
		"\1\27\1\4\2\uffff\3\6\1\uffff\1\30\1\uffff\2\0\1\u00ad\2\0\1\6\3\uffff"+
		"\1\0\1\6\1\u00ad\10\6\1\u00ad\2\6\1\u00ad\3\6\1\u00ad\16\6\1\u00ad\3\6"+
		"\1\u00ad\2\6\1\u00ad\3\6\1\u00ad\3\6\1\u00ad\2\6\1\u00ad\27\6\1\u00ad"+
		"\2\6\1\u00ad\3\6\1\u00ad\3\6\1\u00ad\3\6\1\u00ad\3\6\1\u00ad\3\6\1\u00ad"+
		"\2\6\1\u00ad\3\6\1\u00ad\32\6\1\u00ad\3\6\1\u00ad\2\6\1\u00ad\3\6\1\u00ad"+
		"\3\6\1\u00ad\3\6\1\u00ad\16\6\1\u00ad\4\6";
	static final String DFA84_maxS =
		"\1\u0081\1\u00c7\2\uffff\3\u00c7\1\uffff\1\77\1\uffff\2\0\1\u00ad\2\0"+
		"\1\u00c7\3\uffff\1\0\1\u00c7\1\u00ad\10\u00c7\1\u00ad\2\u00c7\1\u00ad"+
		"\3\u00c7\1\u00ad\16\u00c7\1\u00ad\3\u00c7\1\u00ad\2\u00c7\1\u00ad\3\u00c7"+
		"\1\u00ad\3\u00c7\1\u00ad\2\u00c7\1\u00ad\27\u00c7\1\u00ad\2\u00c7\1\u00ad"+
		"\3\u00c7\1\u00ad\3\u00c7\1\u00ad\3\u00c7\1\u00ad\3\u00c7\1\u00ad\3\u00c7"+
		"\1\u00ad\2\u00c7\1\u00ad\3\u00c7\1\u00ad\32\u00c7\1\u00ad\3\u00c7\1\u00ad"+
		"\2\u00c7\1\u00ad\3\u00c7\1\u00ad\3\u00c7\1\u00ad\3\u00c7\1\u00ad\16\u00c7"+
		"\1\u00ad\4\u00c7";
	static final String DFA84_acceptS =
		"\2\uffff\1\4\1\5\3\uffff\1\2\1\uffff\1\6\6\uffff\1\3\1\7\1\1\u00ab\uffff";
	static final String DFA84_specialS =
		"\12\uffff\1\1\1\2\1\uffff\1\4\1\3\4\uffff\1\0\u00aa\uffff}>";
	static final String[] DFA84_transitionS = {
			"\1\1\15\uffff\1\2\52\uffff\1\2\23\uffff\1\3\34\uffff\1\4",
			"\3\7\1\uffff\1\7\2\uffff\2\7\2\uffff\3\7\1\uffff\7\7\1\uffff\5\7\1\uffff"+
			"\4\7\2\uffff\1\7\1\uffff\2\7\2\uffff\1\7\2\uffff\17\7\1\uffff\2\7\2\uffff"+
			"\1\7\1\6\4\uffff\1\7\1\uffff\2\7\1\uffff\1\7\2\uffff\2\7\3\uffff\3\7"+
			"\1\uffff\2\7\1\uffff\5\7\1\uffff\1\7\1\5\2\7\1\uffff\4\7\1\uffff\4\7"+
			"\1\uffff\2\7\1\uffff\5\7\1\uffff\1\7\2\uffff\2\7\1\uffff\4\7\2\uffff"+
			"\6\7\5\uffff\11\7\1\uffff\1\7\1\uffff\1\7\14\uffff\3\7\3\uffff\1\7\6"+
			"\uffff\2\7\2\uffff\4\7\2\uffff\2\7\2\uffff\1\7",
			"",
			"",
			"\1\11\1\uffff\1\11\6\uffff\1\11\1\uffff\1\11\2\uffff\2\11\1\uffff\1"+
			"\11\3\uffff\4\11\2\uffff\3\11\15\uffff\1\11\2\uffff\1\11\1\uffff\1\11"+
			"\5\uffff\1\11\4\uffff\1\11\3\uffff\1\10\4\uffff\1\11\1\uffff\1\11\6\uffff"+
			"\1\11\4\uffff\1\11\2\uffff\1\11\2\uffff\1\11\5\uffff\1\11\2\uffff\1\11"+
			"\1\uffff\1\11\2\uffff\1\11\4\uffff\1\11\1\uffff\2\11\1\uffff\4\11\5\uffff"+
			"\2\11\1\uffff\2\11\1\uffff\1\11\3\uffff\1\11\13\uffff\3\11\1\uffff\1"+
			"\11\3\uffff\1\11\17\uffff\1\11\17\uffff\1\11\1\uffff\1\11\3\uffff\1\11"+
			"\3\uffff\1\11",
			"\1\16\1\uffff\1\16\6\uffff\1\16\1\7\3\uffff\1\16\10\uffff\2\16\1\7\1"+
			"\uffff\2\16\15\uffff\2\7\2\uffff\1\16\1\uffff\1\16\2\uffff\1\7\1\uffff"+
			"\1\7\1\16\4\uffff\1\7\3\uffff\1\16\4\uffff\1\16\1\uffff\1\16\1\7\5\uffff"+
			"\1\7\4\uffff\1\16\1\7\1\uffff\1\16\1\7\1\uffff\1\16\1\uffff\1\7\1\uffff"+
			"\1\7\1\uffff\1\12\2\uffff\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\1\7"+
			"\1\16\2\uffff\1\7\5\uffff\1\7\4\uffff\2\16\1\uffff\2\16\1\uffff\1\16"+
			"\17\uffff\2\16\1\15\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1\13\1\7\3\uffff"+
			"\1\7\14\uffff\1\16\3\uffff\1\16\3\uffff\1\14",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\2\7\3\uffff\3\7\1\uffff"+
			"\2\7\3\uffff\1\7\1\uffff\2\7\10\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\1\7\1\uffff\2\7\2\uffff\1\20\1\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\1\17\5\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"",
			"\2\11\45\uffff\1\21",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\23",
			"\1\uffff",
			"\1\uffff",
			"\1\27\1\uffff\1\27\6\uffff\1\27\1\7\3\uffff\1\27\10\uffff\2\27\1\7\1"+
			"\uffff\2\27\21\uffff\1\27\1\uffff\1\27\2\uffff\1\7\1\uffff\1\7\1\27\4"+
			"\uffff\1\7\3\uffff\1\27\4\uffff\1\27\1\uffff\1\27\1\7\5\uffff\1\7\4\uffff"+
			"\1\27\1\7\1\uffff\1\27\1\7\1\uffff\1\27\1\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\27\2\uffff\1\27\1\uffff\1\27\2\uffff\1\27\3\uffff\1\7\1\27\2\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\27\1\uffff\2\27\1\uffff\1\27\4\uffff\1\7\12"+
			"\uffff\2\27\1\26\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1\24\1\7\3\uffff"+
			"\1\7\14\uffff\1\27\3\uffff\1\27\3\uffff\1\25",
			"",
			"",
			"",
			"\1\uffff",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\30\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\31\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\34",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\30\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\31\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\30\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\31\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\37\1\uffff\1\37\6\uffff\1\37\4\uffff\1\37\10\uffff\2\37\2\uffff\2"+
			"\37\21\uffff\1\37\1\uffff\1\37\5\uffff\1\37\10\uffff\1\37\4\uffff\1\37"+
			"\1\uffff\1\37\13\uffff\1\37\2\uffff\1\37\2\uffff\1\37\5\uffff\1\37\2"+
			"\uffff\1\37\1\uffff\1\37\2\uffff\1\37\4\uffff\1\37\15\uffff\2\37\1\uffff"+
			"\2\37\1\uffff\1\37\17\uffff\3\37\25\uffff\1\35\21\uffff\1\37\3\uffff"+
			"\1\37\3\uffff\1\36",
			"\1\43\1\uffff\1\43\6\uffff\1\43\1\7\3\uffff\1\43\10\uffff\2\43\1\7\1"+
			"\uffff\2\43\21\uffff\1\43\1\uffff\1\43\2\uffff\1\7\1\uffff\1\7\1\43\10"+
			"\uffff\1\43\4\uffff\1\43\1\uffff\1\43\1\7\5\uffff\1\7\4\uffff\1\43\1"+
			"\7\1\uffff\1\43\1\7\1\uffff\1\43\1\uffff\1\7\1\uffff\1\7\1\uffff\1\43"+
			"\2\uffff\1\43\1\uffff\1\43\2\uffff\1\43\3\uffff\1\7\1\43\10\uffff\1\7"+
			"\4\uffff\2\43\1\uffff\2\43\1\uffff\1\43\17\uffff\2\43\1\42\3\uffff\1"+
			"\7\3\uffff\1\7\14\uffff\1\7\1\40\1\7\3\uffff\1\7\14\uffff\1\43\3\uffff"+
			"\1\43\3\uffff\1\41",
			"\1\47\1\uffff\1\47\6\uffff\1\47\1\7\3\uffff\1\47\10\uffff\2\47\1\7\1"+
			"\uffff\2\47\21\uffff\1\47\1\uffff\1\47\2\uffff\1\7\1\uffff\1\7\1\47\4"+
			"\uffff\1\7\3\uffff\1\47\4\uffff\1\47\1\uffff\1\47\1\7\5\uffff\1\7\4\uffff"+
			"\1\47\1\7\1\uffff\1\47\1\7\1\uffff\1\47\1\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\47\2\uffff\1\47\1\uffff\1\47\2\uffff\1\47\3\uffff\1\7\1\47\2\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\47\1\uffff\2\47\1\uffff\1\47\4\uffff\1\7\12"+
			"\uffff\2\47\1\46\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1\44\1\7\3\uffff"+
			"\1\7\14\uffff\1\47\3\uffff\1\47\3\uffff\1\45",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\2\7\3\uffff\3\7\1\uffff"+
			"\2\7\3\uffff\1\7\1\uffff\2\7\10\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\1\7\1\uffff\2\7\2\uffff\1\20\1\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\30\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\31\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\30\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\31\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\50",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\30\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\31\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\55\1\51\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\53\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\52\1\7\4\uffff\4\7"+
			"\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\54\4\7\1\uffff\1\7"+
			"\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\56",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\55\1\51\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\53\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\52\1\7\4\uffff\4\7"+
			"\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\54\4\7\1\uffff\1\7"+
			"\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\55\1\51\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\53\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\52\1\7\4\uffff\4\7"+
			"\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\54\4\7\1\uffff\1\7"+
			"\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\57\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\60\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\62",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\57\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\60\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\57\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\60\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\30\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\31\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\66\1\uffff\1\66\6\uffff\1\66\1\7\3\uffff\1\66\10\uffff\2\66\1\7\1"+
			"\uffff\2\66\21\uffff\1\66\1\uffff\1\66\2\uffff\1\7\1\uffff\1\7\1\66\4"+
			"\uffff\1\7\3\uffff\1\66\4\uffff\1\66\1\uffff\1\66\1\7\5\uffff\1\7\4\uffff"+
			"\1\66\1\7\1\uffff\1\66\1\7\1\uffff\1\66\1\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\66\2\uffff\1\66\1\uffff\1\66\2\uffff\1\66\3\uffff\1\7\1\66\2\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\66\1\uffff\2\66\1\uffff\1\66\4\uffff\1\7\12"+
			"\uffff\2\66\1\65\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1\63\1\7\3\uffff"+
			"\1\7\14\uffff\1\66\3\uffff\1\66\3\uffff\1\64",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff"+
			"\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\71\1\uffff\1\71\6\uffff\1\71\4\uffff\1\71\10\uffff\2\71\2\uffff\2"+
			"\71\21\uffff\1\71\1\uffff\1\71\5\uffff\1\71\10\uffff\1\71\4\uffff\1\71"+
			"\1\uffff\1\71\13\uffff\1\71\2\uffff\1\71\2\uffff\1\71\5\uffff\1\71\2"+
			"\uffff\1\71\1\uffff\1\71\2\uffff\1\71\4\uffff\1\71\15\uffff\2\71\1\uffff"+
			"\2\71\1\uffff\1\71\17\uffff\3\71\25\uffff\1\67\21\uffff\1\71\3\uffff"+
			"\1\71\3\uffff\1\70",
			"\1\75\1\uffff\1\75\6\uffff\1\75\1\7\3\uffff\1\75\10\uffff\2\75\1\7\1"+
			"\uffff\2\75\21\uffff\1\75\1\uffff\1\75\2\uffff\1\7\1\uffff\1\7\1\75\10"+
			"\uffff\1\75\4\uffff\1\75\1\uffff\1\75\1\7\5\uffff\1\7\4\uffff\1\75\1"+
			"\7\1\uffff\1\75\1\7\1\uffff\1\75\1\uffff\1\7\1\uffff\1\7\1\uffff\1\75"+
			"\2\uffff\1\75\1\uffff\1\75\2\uffff\1\75\3\uffff\1\7\1\75\10\uffff\1\7"+
			"\4\uffff\2\75\1\uffff\2\75\1\uffff\1\75\17\uffff\2\75\1\74\3\uffff\1"+
			"\7\3\uffff\1\7\14\uffff\1\7\1\72\1\7\3\uffff\1\7\14\uffff\1\75\3\uffff"+
			"\1\75\3\uffff\1\73",
			"\1\101\1\uffff\1\101\6\uffff\1\101\1\7\3\uffff\1\101\2\uffff\1\20\4"+
			"\uffff\1\20\2\101\1\7\1\uffff\2\101\21\uffff\1\101\1\uffff\1\101\2\uffff"+
			"\1\7\1\uffff\1\7\1\101\4\uffff\1\7\3\uffff\1\101\4\uffff\1\101\1\uffff"+
			"\1\101\1\7\5\uffff\1\7\4\uffff\1\101\1\7\1\uffff\1\101\1\7\1\uffff\1"+
			"\101\1\uffff\1\7\1\uffff\1\7\1\uffff\1\101\2\uffff\1\101\1\uffff\1\101"+
			"\2\uffff\1\101\3\uffff\1\7\1\101\2\uffff\1\7\5\uffff\1\7\4\uffff\2\101"+
			"\1\20\2\101\1\uffff\1\101\17\uffff\2\101\1\100\3\uffff\1\7\3\uffff\1"+
			"\7\14\uffff\1\7\1\76\1\7\3\uffff\1\7\14\uffff\1\101\3\uffff\1\101\3\uffff"+
			"\1\77",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\55\1\51\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\53\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\52\1\7\4\uffff\4\7"+
			"\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\54\4\7\1\uffff\1\7"+
			"\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\104\1\uffff\1\104\6\uffff\1\104\4\uffff\1\104\10\uffff\2\104\2\uffff"+
			"\2\104\21\uffff\1\104\1\uffff\1\104\5\uffff\1\104\10\uffff\1\104\4\uffff"+
			"\1\104\1\uffff\1\104\13\uffff\1\104\2\uffff\1\104\2\uffff\1\104\5\uffff"+
			"\1\104\2\uffff\1\104\1\uffff\1\104\2\uffff\1\104\4\uffff\1\104\15\uffff"+
			"\2\104\1\uffff\2\104\1\uffff\1\104\17\uffff\3\104\25\uffff\1\102\21\uffff"+
			"\1\104\3\uffff\1\104\3\uffff\1\103",
			"\1\110\1\uffff\1\110\6\uffff\1\110\1\7\3\uffff\1\110\10\uffff\2\110"+
			"\1\7\1\uffff\2\110\21\uffff\1\110\1\uffff\1\110\2\uffff\1\7\1\uffff\1"+
			"\7\1\110\10\uffff\1\110\4\uffff\1\110\1\uffff\1\110\1\7\5\uffff\1\7\4"+
			"\uffff\1\110\1\7\1\uffff\1\110\1\7\1\uffff\1\110\1\uffff\1\7\1\uffff"+
			"\1\7\1\uffff\1\110\2\uffff\1\110\1\uffff\1\110\2\uffff\1\110\3\uffff"+
			"\1\7\1\110\10\uffff\1\7\4\uffff\2\110\1\uffff\2\110\1\uffff\1\110\17"+
			"\uffff\2\110\1\107\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1\105\1\7\3\uffff"+
			"\1\7\14\uffff\1\110\3\uffff\1\110\3\uffff\1\106",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\2\7\3\uffff\3\7\1\uffff"+
			"\2\7\3\uffff\1\7\1\uffff\2\7\10\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\1\7\1\uffff\2\7\2\uffff\1\20\1\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\57\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\60\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\51\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\111\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\114",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\51\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\111\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\51\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\111\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\53\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\116\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\54\4\7\1\uffff\1"+
			"\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\117",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\53\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\116\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\54\4\7\1\uffff\1"+
			"\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\120\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\121\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\122",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\120\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\121\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\120\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\121\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\123\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\124\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\125",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\123\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\124\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\123\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\124\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\57\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\60\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\126",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\57\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\60\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\133\1\127\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\131\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\130\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\132\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\134",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\133\1\127\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\131\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\130\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\132\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\133\1\127\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\131\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\130\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\132\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff"+
			"\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\137\1\uffff\1\137\6\uffff\1\137\4\uffff\1\137\10\uffff\2\137\2\uffff"+
			"\2\137\21\uffff\1\137\1\uffff\1\137\5\uffff\1\137\10\uffff\1\137\4\uffff"+
			"\1\137\1\uffff\1\137\13\uffff\1\137\2\uffff\1\137\2\uffff\1\137\5\uffff"+
			"\1\137\2\uffff\1\137\1\uffff\1\137\2\uffff\1\137\4\uffff\1\137\15\uffff"+
			"\2\137\1\uffff\2\137\1\uffff\1\137\17\uffff\3\137\25\uffff\1\135\21\uffff"+
			"\1\137\3\uffff\1\137\3\uffff\1\136",
			"\1\143\1\uffff\1\143\6\uffff\1\143\1\7\3\uffff\1\143\10\uffff\2\143"+
			"\1\7\1\uffff\2\143\21\uffff\1\143\1\uffff\1\143\2\uffff\1\7\1\uffff\1"+
			"\7\1\143\10\uffff\1\143\4\uffff\1\143\1\uffff\1\143\1\7\5\uffff\1\7\4"+
			"\uffff\1\143\1\7\1\uffff\1\143\1\7\1\uffff\1\143\1\uffff\1\7\1\uffff"+
			"\1\7\1\uffff\1\143\2\uffff\1\143\1\uffff\1\143\2\uffff\1\143\3\uffff"+
			"\1\7\1\143\10\uffff\1\7\4\uffff\2\143\1\uffff\2\143\1\uffff\1\143\17"+
			"\uffff\2\143\1\142\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1\140\1\7\3\uffff"+
			"\1\7\14\uffff\1\143\3\uffff\1\143\3\uffff\1\141",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\51\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\111\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\147\1\uffff\1\147\6\uffff\1\147\1\7\3\uffff\1\147\10\uffff\2\147"+
			"\1\7\1\uffff\2\147\21\uffff\1\147\1\uffff\1\147\2\uffff\1\7\1\uffff\1"+
			"\7\1\147\4\uffff\1\7\3\uffff\1\147\4\uffff\1\147\1\uffff\1\147\1\7\5"+
			"\uffff\1\7\4\uffff\1\147\1\7\1\uffff\1\147\1\7\1\uffff\1\147\1\uffff"+
			"\1\7\1\uffff\1\7\1\uffff\1\147\2\uffff\1\147\1\uffff\1\147\2\uffff\1"+
			"\147\3\uffff\1\7\1\147\2\uffff\1\7\5\uffff\1\7\4\uffff\2\147\1\uffff"+
			"\2\147\1\uffff\1\147\4\uffff\1\7\12\uffff\2\147\1\146\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\1\7\1\144\1\7\3\uffff\1\7\14\uffff\1\147\3\uffff\1\147"+
			"\3\uffff\1\145",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff"+
			"\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\53\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\116\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\54\4\7\1\uffff\1"+
			"\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\153\1\uffff\1\153\6\uffff\1\153\1\7\3\uffff\1\153\10\uffff\2\153"+
			"\1\7\1\uffff\2\153\21\uffff\1\153\1\uffff\1\153\2\uffff\1\7\1\uffff\1"+
			"\7\1\153\4\uffff\1\7\3\uffff\1\153\4\uffff\1\153\1\uffff\1\153\1\7\5"+
			"\uffff\1\7\4\uffff\1\153\1\7\1\uffff\1\153\1\7\1\uffff\1\153\1\uffff"+
			"\1\7\1\uffff\1\7\1\uffff\1\153\2\uffff\1\153\1\uffff\1\153\2\uffff\1"+
			"\153\3\uffff\1\7\1\153\2\uffff\1\7\5\uffff\1\7\4\uffff\2\153\1\uffff"+
			"\2\153\1\uffff\1\153\4\uffff\1\7\12\uffff\2\153\1\152\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\1\7\1\150\1\7\3\uffff\1\7\14\uffff\1\153\3\uffff\1\153"+
			"\3\uffff\1\151",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\116\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\120\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\121\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\157\1\uffff\1\157\6\uffff\1\157\1\7\3\uffff\1\157\2\uffff\1\20\4"+
			"\uffff\1\20\2\157\1\7\1\uffff\2\157\21\uffff\1\157\1\uffff\1\157\2\uffff"+
			"\1\7\1\uffff\1\7\1\157\4\uffff\1\7\3\uffff\1\157\4\uffff\1\157\1\uffff"+
			"\1\157\1\7\5\uffff\1\7\4\uffff\1\157\1\7\1\uffff\1\157\1\7\1\uffff\1"+
			"\157\1\uffff\1\7\1\uffff\1\7\1\uffff\1\157\2\uffff\1\157\1\uffff\1\157"+
			"\2\uffff\1\157\3\uffff\1\7\1\157\2\uffff\1\7\5\uffff\1\7\4\uffff\2\157"+
			"\1\20\2\157\1\uffff\1\157\4\uffff\1\7\12\uffff\2\157\1\156\3\uffff\1"+
			"\7\3\uffff\1\7\14\uffff\1\7\1\154\1\7\3\uffff\1\7\14\uffff\1\157\3\uffff"+
			"\1\157\3\uffff\1\155",
			"\1\7\1\uffff\1\7\6\uffff\2\7\3\uffff\1\7\4\uffff\1\20\3\uffff\3\7\1"+
			"\uffff\2\7\21\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\10\uffff"+
			"\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff"+
			"\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\1\7\3\uffff\2\7\10\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff"+
			"\1\20\12\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\3\uffff\1\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\123\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\124\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\57\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\60\4\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\163\1\uffff\1\163\6\uffff\1\163\1\7\3\uffff\1\163\10\uffff\2\163"+
			"\1\7\1\uffff\2\163\21\uffff\1\163\1\uffff\1\163\2\uffff\1\7\1\uffff\1"+
			"\7\1\163\4\uffff\1\7\3\uffff\1\163\4\uffff\1\163\1\uffff\1\163\1\7\5"+
			"\uffff\1\7\4\uffff\1\163\1\7\1\uffff\1\163\1\7\1\uffff\1\163\1\uffff"+
			"\1\7\1\uffff\1\7\1\uffff\1\163\2\uffff\1\163\1\uffff\1\163\2\uffff\1"+
			"\163\3\uffff\1\7\1\163\2\uffff\1\7\5\uffff\1\7\4\uffff\2\163\1\uffff"+
			"\2\163\1\uffff\1\163\4\uffff\1\7\12\uffff\2\163\1\162\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\1\7\1\160\1\7\3\uffff\1\7\14\uffff\1\163\3\uffff\1\163"+
			"\3\uffff\1\161",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff"+
			"\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\166\1\uffff\1\166\6\uffff\1\166\4\uffff\1\166\10\uffff\2\166\2\uffff"+
			"\2\166\21\uffff\1\166\1\uffff\1\166\5\uffff\1\166\10\uffff\1\166\4\uffff"+
			"\1\166\1\uffff\1\166\13\uffff\1\166\2\uffff\1\166\2\uffff\1\166\5\uffff"+
			"\1\166\2\uffff\1\166\1\uffff\1\166\2\uffff\1\166\4\uffff\1\166\15\uffff"+
			"\2\166\1\uffff\2\166\1\uffff\1\166\17\uffff\3\166\25\uffff\1\164\21\uffff"+
			"\1\166\3\uffff\1\166\3\uffff\1\165",
			"\1\172\1\uffff\1\172\6\uffff\1\172\1\7\3\uffff\1\172\10\uffff\2\172"+
			"\1\7\1\uffff\2\172\21\uffff\1\172\1\uffff\1\172\2\uffff\1\7\1\uffff\1"+
			"\7\1\172\10\uffff\1\172\4\uffff\1\172\1\uffff\1\172\1\7\5\uffff\1\7\4"+
			"\uffff\1\172\1\7\1\uffff\1\172\1\7\1\uffff\1\172\1\uffff\1\7\1\uffff"+
			"\1\7\1\uffff\1\172\2\uffff\1\172\1\uffff\1\172\2\uffff\1\172\3\uffff"+
			"\1\7\1\172\10\uffff\1\7\4\uffff\2\172\1\uffff\2\172\1\uffff\1\172\17"+
			"\uffff\2\172\1\171\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1\167\1\7\3\uffff"+
			"\1\7\14\uffff\1\172\3\uffff\1\172\3\uffff\1\170",
			"\1\176\1\uffff\1\176\6\uffff\1\176\1\7\3\uffff\1\176\2\uffff\1\20\4"+
			"\uffff\1\20\2\176\1\7\1\uffff\2\176\21\uffff\1\176\1\uffff\1\176\2\uffff"+
			"\1\7\1\uffff\1\7\1\176\4\uffff\1\7\3\uffff\1\176\4\uffff\1\176\1\uffff"+
			"\1\176\1\7\5\uffff\1\7\4\uffff\1\176\1\7\1\uffff\1\176\1\7\1\uffff\1"+
			"\176\1\uffff\1\7\1\uffff\1\7\1\uffff\1\176\2\uffff\1\176\1\uffff\1\176"+
			"\2\uffff\1\176\3\uffff\1\7\1\176\2\uffff\1\7\5\uffff\1\7\4\uffff\2\176"+
			"\1\20\2\176\1\uffff\1\176\17\uffff\2\176\1\175\3\uffff\1\7\3\uffff\1"+
			"\7\14\uffff\1\7\1\173\1\7\3\uffff\1\7\14\uffff\1\176\3\uffff\1\176\3"+
			"\uffff\1\174",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\133\1\127\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\131\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\130\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\132\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u0080",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0081\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0082\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u0083",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0081\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0082\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0081\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0082\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u0084",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\120\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0085\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\u0086",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\120\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0085\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\120\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0085\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\123\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0087\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u0088",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\123\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0087\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\123\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0087\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\127\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0089\1\7\4"+
			"\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b\4"+
			"\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\u008c",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\127\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0089\1\7\4"+
			"\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b\4"+
			"\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\127\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0089\1\7\4"+
			"\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b\4"+
			"\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\131\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7\4"+
			"\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\132\4\7"+
			"\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\u008f",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\131\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7\4"+
			"\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\132\4\7"+
			"\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0090\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0091\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u0092",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0090\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0091\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0090\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0091\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0093\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0094\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u0095",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0093\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0094\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0093\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0094\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff"+
			"\2\7\1\uffff\1\7\4\uffff\1\33\4\uffff\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u0099\1\uffff\1\u0099\6\uffff\1\u0099\1\7\3\uffff\1\u0099\10\uffff"+
			"\2\u0099\1\7\1\uffff\2\u0099\21\uffff\1\u0099\1\uffff\1\u0099\2\uffff"+
			"\1\7\1\uffff\1\7\1\u0099\4\uffff\1\7\3\uffff\1\u0099\4\uffff\1\u0099"+
			"\1\uffff\1\u0099\1\7\5\uffff\1\7\4\uffff\1\u0099\1\7\1\uffff\1\u0099"+
			"\1\7\1\uffff\1\u0099\1\uffff\1\7\1\uffff\1\7\1\uffff\1\u0099\2\uffff"+
			"\1\u0099\1\uffff\1\u0099\2\uffff\1\u0099\3\uffff\1\7\1\u0099\2\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\u0099\1\uffff\2\u0099\1\uffff\1\u0099\4\uffff"+
			"\1\7\12\uffff\2\u0099\1\u0098\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1"+
			"\u0096\1\7\3\uffff\1\7\14\uffff\1\u0099\3\uffff\1\u0099\3\uffff\1\u0097",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0081\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0082\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\112\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\113\4\7\1\uffff"+
			"\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff"+
			"\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\116\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\120\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0085\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\7\1\uffff\1\7\6\uffff\2\7\3\uffff\1\7\4\uffff\1\20\3\uffff\3\7\1"+
			"\uffff\2\7\21\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\10\uffff"+
			"\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff"+
			"\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\1\7\3\uffff\2\7\10\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff"+
			"\1\20\12\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\3\uffff\1\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\123\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0087\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff"+
			"\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\u009c\1\uffff\1\u009c\6\uffff\1\u009c\4\uffff\1\u009c\10\uffff\2"+
			"\u009c\2\uffff\2\u009c\21\uffff\1\u009c\1\uffff\1\u009c\5\uffff\1\u009c"+
			"\10\uffff\1\u009c\4\uffff\1\u009c\1\uffff\1\u009c\13\uffff\1\u009c\2"+
			"\uffff\1\u009c\2\uffff\1\u009c\5\uffff\1\u009c\2\uffff\1\u009c\1\uffff"+
			"\1\u009c\2\uffff\1\u009c\4\uffff\1\u009c\15\uffff\2\u009c\1\uffff\2\u009c"+
			"\1\uffff\1\u009c\17\uffff\3\u009c\25\uffff\1\u009a\21\uffff\1\u009c\3"+
			"\uffff\1\u009c\3\uffff\1\u009b",
			"\1\u00a0\1\uffff\1\u00a0\6\uffff\1\u00a0\1\7\3\uffff\1\u00a0\10\uffff"+
			"\2\u00a0\1\7\1\uffff\2\u00a0\21\uffff\1\u00a0\1\uffff\1\u00a0\2\uffff"+
			"\1\7\1\uffff\1\7\1\u00a0\10\uffff\1\u00a0\4\uffff\1\u00a0\1\uffff\1\u00a0"+
			"\1\7\5\uffff\1\7\4\uffff\1\u00a0\1\7\1\uffff\1\u00a0\1\7\1\uffff\1\u00a0"+
			"\1\uffff\1\7\1\uffff\1\7\1\uffff\1\u00a0\2\uffff\1\u00a0\1\uffff\1\u00a0"+
			"\2\uffff\1\u00a0\3\uffff\1\7\1\u00a0\10\uffff\1\7\4\uffff\2\u00a0\1\uffff"+
			"\2\u00a0\1\uffff\1\u00a0\17\uffff\2\u00a0\1\u009f\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\1\7\1\u009d\1\7\3\uffff\1\7\14\uffff\1\u00a0\3\uffff\1"+
			"\u00a0\3\uffff\1\u009e",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\127\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0089\1\7\4"+
			"\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b\4"+
			"\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\u00a4\1\uffff\1\u00a4\6\uffff\1\u00a4\1\7\3\uffff\1\u00a4\10\uffff"+
			"\2\u00a4\1\7\1\uffff\2\u00a4\21\uffff\1\u00a4\1\uffff\1\u00a4\2\uffff"+
			"\1\7\1\uffff\1\7\1\u00a4\4\uffff\1\7\3\uffff\1\u00a4\4\uffff\1\u00a4"+
			"\1\uffff\1\u00a4\1\7\5\uffff\1\7\4\uffff\1\u00a4\1\7\1\uffff\1\u00a4"+
			"\1\7\1\uffff\1\u00a4\1\uffff\1\7\1\uffff\1\7\1\uffff\1\u00a4\2\uffff"+
			"\1\u00a4\1\uffff\1\u00a4\2\uffff\1\u00a4\3\uffff\1\7\1\u00a4\2\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\u00a4\1\uffff\2\u00a4\1\uffff\1\u00a4\4\uffff"+
			"\1\7\12\uffff\2\u00a4\1\u00a3\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1"+
			"\u00a1\1\7\3\uffff\1\7\14\uffff\1\u00a4\3\uffff\1\u00a4\3\uffff\1\u00a2",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\32\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\2\7\4\uffff\4\7\3\uffff"+
			"\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff\3\7\2\uffff"+
			"\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff"+
			"\2\7\1\uffff\1\7\4\uffff\1\61\4\uffff\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff"+
			"\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\131\11\uffff\1\7\1\uffff\1\7\1"+
			"\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7\4"+
			"\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\132\4\7"+
			"\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\u00a8\1\uffff\1\u00a8\6\uffff\1\u00a8\1\7\3\uffff\1\u00a8\10\uffff"+
			"\2\u00a8\1\7\1\uffff\2\u00a8\21\uffff\1\u00a8\1\uffff\1\u00a8\2\uffff"+
			"\1\7\1\uffff\1\7\1\u00a8\4\uffff\1\7\3\uffff\1\u00a8\4\uffff\1\u00a8"+
			"\1\uffff\1\u00a8\1\7\5\uffff\1\7\4\uffff\1\u00a8\1\7\1\uffff\1\u00a8"+
			"\1\7\1\uffff\1\u00a8\1\uffff\1\7\1\uffff\1\7\1\uffff\1\u00a8\2\uffff"+
			"\1\u00a8\1\uffff\1\u00a8\2\uffff\1\u00a8\3\uffff\1\7\1\u00a8\2\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\u00a8\1\uffff\2\u00a8\1\uffff\1\u00a8\4\uffff"+
			"\1\7\12\uffff\2\u00a8\1\u00a7\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1"+
			"\u00a5\1\7\3\uffff\1\7\14\uffff\1\u00a8\3\uffff\1\u00a8\3\uffff\1\u00a6",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0090\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0091\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u00ac\1\uffff\1\u00ac\6\uffff\1\u00ac\1\7\3\uffff\1\u00ac\2\uffff"+
			"\1\20\4\uffff\1\20\2\u00ac\1\7\1\uffff\2\u00ac\21\uffff\1\u00ac\1\uffff"+
			"\1\u00ac\2\uffff\1\7\1\uffff\1\7\1\u00ac\4\uffff\1\7\3\uffff\1\u00ac"+
			"\4\uffff\1\u00ac\1\uffff\1\u00ac\1\7\5\uffff\1\7\4\uffff\1\u00ac\1\7"+
			"\1\uffff\1\u00ac\1\7\1\uffff\1\u00ac\1\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\u00ac\2\uffff\1\u00ac\1\uffff\1\u00ac\2\uffff\1\u00ac\3\uffff\1\7"+
			"\1\u00ac\2\uffff\1\7\5\uffff\1\7\4\uffff\2\u00ac\1\20\2\u00ac\1\uffff"+
			"\1\u00ac\4\uffff\1\7\12\uffff\2\u00ac\1\u00ab\3\uffff\1\7\3\uffff\1\7"+
			"\14\uffff\1\7\1\u00a9\1\7\3\uffff\1\7\14\uffff\1\u00ac\3\uffff\1\u00ac"+
			"\3\uffff\1\u00aa",
			"\1\7\1\uffff\1\7\6\uffff\2\7\3\uffff\1\7\4\uffff\1\20\3\uffff\3\7\1"+
			"\uffff\2\7\21\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\10\uffff"+
			"\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff"+
			"\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\1\7\3\uffff\2\7\10\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff"+
			"\1\20\12\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\3\uffff\1\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0093\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u0094\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0081\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00ad\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\u00ae",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0081\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00ad\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0081\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00ad\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7"+
			"\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7"+
			"\4\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b"+
			"\4\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\u00af",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7"+
			"\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7"+
			"\4\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b"+
			"\4\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u00b0\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b1\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u00b2",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u00b0\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b1\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u00b0\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b1\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7"+
			"\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7"+
			"\4\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b"+
			"\4\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\u00b3",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7"+
			"\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7"+
			"\4\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b"+
			"\4\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7"+
			"\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7"+
			"\4\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b"+
			"\4\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0090\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b4\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\u00b5",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0090\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b4\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0090\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b4\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0093\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b6\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\1\u00b7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0093\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b6\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0093\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b6\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\115\3\uffff\3"+
			"\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\177\1\7\4\uffff\4"+
			"\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0081\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00ad\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7"+
			"\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7"+
			"\4\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b"+
			"\4\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\1\u00bb\1\uffff\1\u00bb\6\uffff\1\u00bb\1\7\3\uffff\1\u00bb\10\uffff"+
			"\2\u00bb\1\7\1\uffff\2\u00bb\21\uffff\1\u00bb\1\uffff\1\u00bb\2\uffff"+
			"\1\7\1\uffff\1\7\1\u00bb\4\uffff\1\7\3\uffff\1\u00bb\4\uffff\1\u00bb"+
			"\1\uffff\1\u00bb\1\7\5\uffff\1\7\4\uffff\1\u00bb\1\7\1\uffff\1\u00bb"+
			"\1\7\1\uffff\1\u00bb\1\uffff\1\7\1\uffff\1\7\1\uffff\1\u00bb\2\uffff"+
			"\1\u00bb\1\uffff\1\u00bb\2\uffff\1\u00bb\3\uffff\1\7\1\u00bb\2\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\u00bb\1\uffff\2\u00bb\1\uffff\1\u00bb\4\uffff"+
			"\1\7\12\uffff\2\u00bb\1\u00ba\3\uffff\1\7\3\uffff\1\7\14\uffff\1\7\1"+
			"\u00b8\1\7\3\uffff\1\7\14\uffff\1\u00bb\3\uffff\1\u00bb\3\uffff\1\u00b9",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u00b0\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b1\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\7\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\u008a\11\uffff\1\7\1\uffff\1\7"+
			"\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7"+
			"\4\uffff\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\1\u008b"+
			"\4\7\1\uffff\1\7\1\uffff\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff"+
			"\1\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff"+
			"\4\7\2\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0090\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b4\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\7\1\uffff\1\7\6\uffff\2\7\3\uffff\1\7\4\uffff\1\20\3\uffff\3\7\1"+
			"\uffff\2\7\21\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\2\7\10\uffff"+
			"\1\7\4\uffff\1\7\1\uffff\2\7\5\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff"+
			"\1\7\1\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff"+
			"\1\7\3\uffff\2\7\10\uffff\1\7\4\uffff\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff"+
			"\1\20\12\uffff\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14"+
			"\uffff\1\7\3\uffff\1\7\3\uffff\1\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u0093\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00b6\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\2\uffff\1\20\1\uffff\4\7\2\uffff"+
			"\3\7\3\uffff\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3"+
			"\uffff\1\7\2\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u00b0\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00bc\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\1\u00bd",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u00b0\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00bc\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u00b0\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00bc\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u008d\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u008e\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7",
			"\3\7\1\uffff\1\7\4\uffff\2\7\3\uffff\1\7\3\uffff\1\7\1\u00b0\3\uffff"+
			"\3\7\1\uffff\2\7\3\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff"+
			"\1\7\2\uffff\1\7\1\uffff\2\7\4\uffff\2\7\1\uffff\1\u00bc\1\7\4\uffff"+
			"\4\7\3\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\7\7\1\uffff\1\7\1\uffff"+
			"\3\7\2\uffff\3\7\2\uffff\1\7\3\uffff\3\7\1\uffff\1\7\5\uffff\1\7\4\uffff"+
			"\2\7\1\uffff\2\7\1\uffff\1\7\4\uffff\1\7\4\uffff\4\7\2\uffff\3\7\3\uffff"+
			"\1\7\3\uffff\1\7\14\uffff\3\7\3\uffff\1\7\14\uffff\1\7\3\uffff\1\7\2"+
			"\uffff\2\7"
	};

	static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
	static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
	static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
	static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
	static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
	static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
	static final short[][] DFA84_transition;

	static {
		int numStates = DFA84_transitionS.length;
		DFA84_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
		}
	}

	protected class DFA84 extends DFA {

		public DFA84(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 84;
			this.eot = DFA84_eot;
			this.eof = DFA84_eof;
			this.min = DFA84_min;
			this.max = DFA84_max;
			this.accept = DFA84_accept;
			this.special = DFA84_special;
			this.transition = DFA84_transition;
		}
		@Override
		public String getDescription() {
			return "274:1: classDecl : ( classTypeTypeDecl | classTypeDecl -> ^( TkClass classTypeDecl ) | classHelperDecl -> ^( TkClass classHelperDecl ) | interfaceTypeDecl -> ^( TkInterface interfaceTypeDecl ) | objectDecl -> ^( TkObject objectDecl ) | recordDecl -> ^( TkRecord recordDecl ) | recordHelperDecl -> ^( TkRecordHelper recordHelperDecl ) );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA84_19 = input.LA(1);
						 
						int index84_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred113_Delphi()) ) {s = 18;}
						else if ( (synpred114_Delphi()) ) {s = 7;}
						 
						input.seek(index84_19);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA84_10 = input.LA(1);
						 
						int index84_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred113_Delphi()) ) {s = 18;}
						else if ( (synpred114_Delphi()) ) {s = 7;}
						 
						input.seek(index84_10);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA84_11 = input.LA(1);
						 
						int index84_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred113_Delphi()) ) {s = 18;}
						else if ( (synpred114_Delphi()) ) {s = 7;}
						 
						input.seek(index84_11);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA84_14 = input.LA(1);
						 
						int index84_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred113_Delphi()) ) {s = 18;}
						else if ( (synpred114_Delphi()) ) {s = 7;}
						 
						input.seek(index84_14);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA84_13 = input.LA(1);
						 
						int index84_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred113_Delphi()) ) {s = 18;}
						else if ( (synpred114_Delphi()) ) {s = 7;}
						 
						input.seek(index84_13);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 84, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA89_eotS =
		"\114\uffff";
	static final String DFA89_eofS =
		"\1\2\113\uffff";
	static final String DFA89_minS =
		"\1\4\1\6\1\uffff\1\7\1\u00ad\2\7\2\6\1\uffff\1\0\1\7\2\0\1\7\1\u00ad\2"+
		"\7\1\u00ad\2\7\2\0\1\7\1\0\4\6\1\7\1\0\1\31\1\u00ad\1\31\1\0\1\7\1\u00ad"+
		"\2\7\1\u00ad\3\7\2\6\1\31\2\6\1\7\2\6\1\7\1\0\1\31\1\u00ad\1\31\1\30\1"+
		"\u00ad\1\30\1\0\1\31\1\u00ad\1\31\1\7\1\31\1\6\1\31\1\30\1\7\1\31\1\0"+
		"\1\31\1\u00ad\3\31";
	static final String DFA89_maxS =
		"\2\u00c7\1\uffff\1\u00c6\1\u00ad\2\u00c6\2\u00c7\1\uffff\1\0\1\u00c6\2"+
		"\0\1\u00c6\1\u00ad\2\u00c6\1\u00ad\2\u00c6\2\0\1\u00c6\1\0\4\u00c7\1\u00c6"+
		"\1\0\1\132\1\u00ad\1\132\1\0\1\u00c6\1\u00ad\2\u00c6\1\u00ad\3\u00c6\2"+
		"\u00c7\1\132\2\u00c7\1\u00c6\2\u00c7\1\u00c6\1\0\1\132\1\u00ad\1\132\1"+
		"\u008d\1\u00ad\1\u008d\1\0\1\132\1\u00ad\1\132\1\u00c6\1\132\1\u00c7\1"+
		"\104\1\u008d\1\u00c6\1\132\1\0\1\132\1\u00ad\1\132\1\104\1\132";
	static final String DFA89_acceptS =
		"\2\uffff\1\2\6\uffff\1\1\102\uffff";
	static final String DFA89_specialS =
		"\12\uffff\1\1\1\uffff\1\2\1\3\7\uffff\1\0\1\6\1\uffff\1\7\5\uffff\1\10"+
		"\3\uffff\1\12\21\uffff\1\11\6\uffff\1\4\12\uffff\1\5\5\uffff}>";
	static final String[] DFA89_transitionS = {
			"\3\2\1\uffff\1\2\2\uffff\2\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\17\2\1\uffff\2\2\2\uffff"+
			"\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\2\2\3\uffff\2\2\1\1"+
			"\1\uffff\2\2\1\uffff\5\2\1\uffff\4\2\1\uffff\4\2\1\uffff\4\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff"+
			"\1\2\5\uffff\11\2\1\uffff\1\2\1\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\4\2\2\uffff\2\2\2\uffff\1\2",
			"\1\6\1\uffff\1\6\6\uffff\1\6\1\2\3\uffff\1\6\10\uffff\2\6\1\2\1\uffff"+
			"\2\6\21\uffff\1\6\1\uffff\1\6\2\uffff\1\2\1\uffff\1\2\1\6\4\uffff\1\2"+
			"\3\uffff\1\6\4\uffff\1\6\1\uffff\1\6\1\2\5\uffff\1\2\4\uffff\1\6\1\2"+
			"\1\uffff\1\6\1\2\1\uffff\1\6\1\uffff\1\2\1\uffff\1\2\1\uffff\1\6\2\uffff"+
			"\1\6\1\uffff\1\6\2\uffff\1\6\3\uffff\1\2\1\6\2\uffff\1\2\5\uffff\1\2"+
			"\4\uffff\2\6\1\uffff\2\6\1\uffff\1\6\17\uffff\2\6\1\5\3\uffff\1\2\3\uffff"+
			"\1\2\14\uffff\1\2\1\3\1\2\3\uffff\1\2\14\uffff\1\6\3\uffff\1\6\3\uffff"+
			"\1\4",
			"",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\12\4\uffff\4\2\63\uffff\1\2",
			"\1\13",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\14\4\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\15\4\uffff\4\2\63\uffff\1\2",
			"\1\20\1\uffff\1\20\6\uffff\1\20\4\uffff\1\20\10\uffff\2\20\2\uffff\2"+
			"\20\21\uffff\1\20\1\uffff\1\20\5\uffff\1\20\10\uffff\1\20\4\uffff\1\20"+
			"\1\uffff\1\20\13\uffff\1\20\2\uffff\1\20\2\uffff\1\20\5\uffff\1\20\2"+
			"\uffff\1\20\1\uffff\1\20\2\uffff\1\20\4\uffff\1\20\15\uffff\2\20\1\uffff"+
			"\2\20\1\uffff\1\20\17\uffff\3\20\25\uffff\1\16\21\uffff\1\20\3\uffff"+
			"\1\20\3\uffff\1\17",
			"\1\24\1\uffff\1\24\6\uffff\1\24\1\2\3\uffff\1\24\10\uffff\2\24\1\2\1"+
			"\uffff\2\24\21\uffff\1\24\1\uffff\1\24\2\uffff\1\2\1\uffff\1\2\1\24\10"+
			"\uffff\1\24\4\uffff\1\24\1\uffff\1\24\1\2\5\uffff\1\2\4\uffff\1\24\1"+
			"\2\1\uffff\1\24\1\2\1\uffff\1\24\1\uffff\1\2\1\uffff\1\2\1\uffff\1\24"+
			"\2\uffff\1\24\1\uffff\1\24\2\uffff\1\24\3\uffff\1\2\1\24\10\uffff\1\2"+
			"\4\uffff\2\24\1\uffff\2\24\1\uffff\1\24\17\uffff\2\24\1\23\3\uffff\1"+
			"\2\3\uffff\1\2\14\uffff\1\2\1\21\1\2\3\uffff\1\2\14\uffff\1\24\3\uffff"+
			"\1\24\3\uffff\1\22",
			"",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\25\4\uffff\4\2\63\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\26\4\uffff\4\2\63\uffff\1\2",
			"\1\27",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\30\4\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\11\1\31\14\uffff\1\2\1\uffff"+
			"\1\33\11\uffff\1\2\17\uffff\1\2\1\uffff\1\32\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\11\1\uffff\4\2\63"+
			"\uffff\1\2",
			"\1\35",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\11\1\31\14\uffff\1\2\1\uffff"+
			"\1\33\11\uffff\1\2\17\uffff\1\2\1\uffff\1\32\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\11\1\uffff\4\2\63"+
			"\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\11\1\31\14\uffff\1\2\1\uffff"+
			"\1\33\11\uffff\1\2\17\uffff\1\2\1\uffff\1\32\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\11\1\uffff\4\2\63"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\36\4\uffff\4\2\63\uffff\1\2",
			"\1\uffff",
			"\1\41\1\uffff\1\41\6\uffff\1\41\4\uffff\1\41\10\uffff\2\41\2\uffff\2"+
			"\41\21\uffff\1\41\1\uffff\1\41\5\uffff\1\41\10\uffff\1\41\4\uffff\1\41"+
			"\1\uffff\1\41\13\uffff\1\41\2\uffff\1\41\2\uffff\1\41\5\uffff\1\41\2"+
			"\uffff\1\41\1\uffff\1\41\2\uffff\1\41\4\uffff\1\41\15\uffff\2\41\1\uffff"+
			"\2\41\1\uffff\1\41\17\uffff\3\41\25\uffff\1\37\21\uffff\1\41\3\uffff"+
			"\1\41\3\uffff\1\40",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\4\uffff\1\11\3\uffff\3\2\1"+
			"\uffff\2\2\3\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff\1"+
			"\2\2\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\2\2\4\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\2\uffff\1\2\3\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff"+
			"\1\2\4\uffff\1\42\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\3\uffff\1\2\14"+
			"\uffff\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\2\2",
			"\1\45\1\uffff\1\45\6\uffff\1\45\4\uffff\1\45\10\uffff\2\45\2\uffff\2"+
			"\45\21\uffff\1\45\1\uffff\1\45\5\uffff\1\45\10\uffff\1\45\4\uffff\1\45"+
			"\1\uffff\1\45\13\uffff\1\45\2\uffff\1\45\2\uffff\1\45\5\uffff\1\45\2"+
			"\uffff\1\45\1\uffff\1\45\2\uffff\1\45\4\uffff\1\45\15\uffff\2\45\1\uffff"+
			"\2\45\1\uffff\1\45\17\uffff\3\45\25\uffff\1\43\21\uffff\1\45\3\uffff"+
			"\1\45\3\uffff\1\44",
			"\1\51\1\uffff\1\51\6\uffff\1\51\1\2\3\uffff\1\51\10\uffff\2\51\1\2\1"+
			"\uffff\2\51\21\uffff\1\51\1\uffff\1\51\2\uffff\1\2\1\uffff\1\2\1\51\10"+
			"\uffff\1\51\4\uffff\1\51\1\uffff\1\51\1\2\5\uffff\1\2\4\uffff\1\51\1"+
			"\2\1\uffff\1\51\1\2\1\uffff\1\51\1\uffff\1\2\1\uffff\1\2\1\uffff\1\51"+
			"\2\uffff\1\51\1\uffff\1\51\2\uffff\1\51\3\uffff\1\2\1\51\10\uffff\1\2"+
			"\4\uffff\2\51\1\uffff\2\51\1\uffff\1\51\17\uffff\2\51\1\50\3\uffff\1"+
			"\2\3\uffff\1\2\14\uffff\1\2\1\46\1\2\3\uffff\1\2\14\uffff\1\51\3\uffff"+
			"\1\51\3\uffff\1\47",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\11\1\31\14\uffff\1\2\1\uffff"+
			"\1\33\11\uffff\1\2\17\uffff\1\2\1\uffff\1\32\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\11\1\uffff\4\2\63"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\31\16\uffff\1\53\33\uffff\1\52\25\uffff\1\54",
			"\1\55",
			"\1\31\16\uffff\1\53\33\uffff\1\52\25\uffff\1\54",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\56\14\uffff\1\2\1\uffff\1\33"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\57\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\63\uffff\1\2",
			"\1\60",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\56\14\uffff\1\2\1\uffff\1\33"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\57\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\61\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff\4\2\63\uffff\1\2",
			"\1\63",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\61\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\61\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\2"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\64\4\uffff\4\2\63\uffff\1\2",
			"\1\67\1\uffff\1\67\6\uffff\1\67\4\uffff\1\67\10\uffff\2\67\2\uffff\2"+
			"\67\21\uffff\1\67\1\uffff\1\67\5\uffff\1\67\10\uffff\1\67\4\uffff\1\67"+
			"\1\uffff\1\67\13\uffff\1\67\2\uffff\1\67\2\uffff\1\67\5\uffff\1\67\2"+
			"\uffff\1\67\1\uffff\1\67\2\uffff\1\67\4\uffff\1\67\15\uffff\2\67\1\uffff"+
			"\2\67\1\uffff\1\67\17\uffff\3\67\25\uffff\1\65\21\uffff\1\67\3\uffff"+
			"\1\67\3\uffff\1\66",
			"\1\72\1\uffff\1\72\6\uffff\1\72\4\uffff\1\72\10\uffff\2\72\2\uffff\2"+
			"\72\21\uffff\1\72\1\uffff\1\72\5\uffff\1\72\10\uffff\1\72\4\uffff\1\72"+
			"\1\uffff\1\72\13\uffff\1\72\2\uffff\1\72\2\uffff\1\72\5\uffff\1\72\2"+
			"\uffff\1\72\1\uffff\1\72\2\uffff\1\72\4\uffff\1\72\15\uffff\2\72\1\uffff"+
			"\2\72\1\uffff\1\72\17\uffff\3\72\25\uffff\1\70\21\uffff\1\72\3\uffff"+
			"\1\72\3\uffff\1\71",
			"\1\31\16\uffff\1\53\33\uffff\1\52\25\uffff\1\54",
			"\1\67\1\uffff\1\67\6\uffff\1\67\4\uffff\1\67\10\uffff\2\67\2\uffff\2"+
			"\67\21\uffff\1\67\1\uffff\1\67\5\uffff\1\67\10\uffff\1\67\4\uffff\1\67"+
			"\1\uffff\1\67\13\uffff\1\67\2\uffff\1\67\2\uffff\1\67\5\uffff\1\67\2"+
			"\uffff\1\67\1\uffff\1\67\2\uffff\1\67\4\uffff\1\67\15\uffff\2\67\1\uffff"+
			"\2\67\1\uffff\1\67\17\uffff\3\67\25\uffff\1\65\21\uffff\1\67\3\uffff"+
			"\1\67\3\uffff\1\66",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\4\uffff\1\11\3\uffff\3\2\1"+
			"\uffff\2\2\3\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff\1"+
			"\2\2\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\2\2\4\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\2\uffff\1\2\3\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff"+
			"\1\2\4\uffff\1\73\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\3\uffff\1\2\14"+
			"\uffff\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\2\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\56\14\uffff\1\2\1\uffff\1\33"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\57\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\63\uffff\1\2",
			"\1\76\1\uffff\1\76\6\uffff\1\76\4\uffff\1\76\10\uffff\2\76\2\uffff\2"+
			"\76\21\uffff\1\76\1\uffff\1\76\5\uffff\1\76\10\uffff\1\76\4\uffff\1\76"+
			"\1\uffff\1\76\13\uffff\1\76\2\uffff\1\76\2\uffff\1\76\5\uffff\1\76\2"+
			"\uffff\1\76\1\uffff\1\76\2\uffff\1\76\4\uffff\1\76\15\uffff\2\76\1\uffff"+
			"\2\76\1\uffff\1\76\17\uffff\3\76\25\uffff\1\74\21\uffff\1\76\3\uffff"+
			"\1\76\3\uffff\1\75",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\4\uffff\1\56\3\uffff\3\2\1"+
			"\uffff\2\2\3\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff\1"+
			"\2\2\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\1\57\1\2\4\uffff\4\2\3"+
			"\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3"+
			"\2\2\uffff\3\2\2\uffff\1\2\3\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff"+
			"\2\2\1\uffff\1\2\4\uffff\1\2\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\3\uffff"+
			"\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\2\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\61\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff\4\2\63\uffff\1\2",
			"\1\uffff",
			"\1\56\16\uffff\1\53\33\uffff\1\77\25\uffff\1\54",
			"\1\100",
			"\1\56\16\uffff\1\53\33\uffff\1\77\25\uffff\1\54",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\103",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\uffff",
			"\1\61\16\uffff\1\2\33\uffff\1\104\25\uffff\1\2",
			"\1\105",
			"\1\61\16\uffff\1\2\33\uffff\1\104\25\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\2"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\106\4\uffff\4\2\63\uffff\1\2",
			"\1\56\16\uffff\1\53\33\uffff\1\77\25\uffff\1\54",
			"\1\111\1\uffff\1\111\6\uffff\1\111\4\uffff\1\111\10\uffff\2\111\2\uffff"+
			"\2\111\21\uffff\1\111\1\uffff\1\111\5\uffff\1\111\10\uffff\1\111\4\uffff"+
			"\1\111\1\uffff\1\111\13\uffff\1\111\2\uffff\1\111\2\uffff\1\111\5\uffff"+
			"\1\111\2\uffff\1\111\1\uffff\1\111\2\uffff\1\111\4\uffff\1\111\15\uffff"+
			"\2\111\1\uffff\2\111\1\uffff\1\111\17\uffff\3\111\25\uffff\1\107\21\uffff"+
			"\1\111\3\uffff\1\111\3\uffff\1\110",
			"\1\56\52\uffff\1\77",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\56\14\uffff\1\2\1\uffff\1\2"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\57\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\63\uffff\1\2",
			"\1\61\16\uffff\1\2\33\uffff\1\104\25\uffff\1\2",
			"\1\uffff",
			"\1\101\16\uffff\1\2\33\uffff\1\112\25\uffff\1\2",
			"\1\113",
			"\1\101\16\uffff\1\2\33\uffff\1\112\25\uffff\1\2",
			"\1\56\52\uffff\1\77",
			"\1\101\16\uffff\1\2\33\uffff\1\112\25\uffff\1\2"
	};

	static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
	static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
	static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
	static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
	static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
	static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
	static final short[][] DFA89_transition;

	static {
		int numStates = DFA89_transitionS.length;
		DFA89_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
		}
	}

	protected class DFA89 extends DFA {

		public DFA89(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 89;
			this.eot = DFA89_eot;
			this.eof = DFA89_eof;
			this.min = DFA89_min;
			this.max = DFA89_max;
			this.accept = DFA89_accept;
			this.special = DFA89_special;
			this.transition = DFA89_transition;
		}
		@Override
		public String getDescription() {
			return "285:54: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA89_21 = input.LA(1);
						 
						int index89_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_21);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA89_10 = input.LA(1);
						 
						int index89_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_10);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA89_12 = input.LA(1);
						 
						int index89_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_12);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA89_13 = input.LA(1);
						 
						int index89_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_13);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA89_59 = input.LA(1);
						 
						int index89_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_59);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA89_70 = input.LA(1);
						 
						int index89_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_70);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA89_22 = input.LA(1);
						 
						int index89_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_22);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA89_24 = input.LA(1);
						 
						int index89_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_24);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA89_30 = input.LA(1);
						 
						int index89_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_30);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA89_52 = input.LA(1);
						 
						int index89_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_52);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA89_34 = input.LA(1);
						 
						int index89_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred124_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index89_34);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 89, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA101_eotS =
		"\114\uffff";
	static final String DFA101_eofS =
		"\1\2\113\uffff";
	static final String DFA101_minS =
		"\1\4\1\6\1\uffff\1\7\1\u00ad\2\7\2\6\1\uffff\1\0\1\7\2\0\1\7\1\u00ad\2"+
		"\7\1\u00ad\2\7\2\0\1\7\1\0\4\6\1\7\1\0\1\31\1\u00ad\1\31\1\0\1\7\1\u00ad"+
		"\2\7\1\u00ad\3\7\2\6\1\31\2\6\1\7\2\6\1\7\1\0\1\31\1\u00ad\1\31\1\30\1"+
		"\u00ad\1\30\1\0\1\31\1\u00ad\1\31\1\7\1\31\1\6\1\31\1\30\1\7\1\31\1\0"+
		"\1\31\1\u00ad\3\31";
	static final String DFA101_maxS =
		"\2\u00c7\1\uffff\1\u00c6\1\u00ad\2\u00c6\2\u00c7\1\uffff\1\0\1\u00c6\2"+
		"\0\1\u00c6\1\u00ad\2\u00c6\1\u00ad\2\u00c6\2\0\1\u00c6\1\0\4\u00c7\1\u00c6"+
		"\1\0\1\132\1\u00ad\1\132\1\0\1\u00c6\1\u00ad\2\u00c6\1\u00ad\3\u00c6\2"+
		"\u00c7\1\132\2\u00c7\1\u00c6\2\u00c7\1\u00c6\1\0\1\132\1\u00ad\1\132\1"+
		"\u008d\1\u00ad\1\u008d\1\0\1\132\1\u00ad\1\132\1\u00c6\1\132\1\u00c7\1"+
		"\104\1\u008d\1\u00c6\1\132\1\0\1\132\1\u00ad\1\132\1\104\1\132";
	static final String DFA101_acceptS =
		"\2\uffff\1\2\6\uffff\1\1\102\uffff";
	static final String DFA101_specialS =
		"\12\uffff\1\2\1\uffff\1\1\1\5\7\uffff\1\6\1\7\1\uffff\1\10\5\uffff\1\11"+
		"\3\uffff\1\12\21\uffff\1\0\6\uffff\1\4\12\uffff\1\3\5\uffff}>";
	static final String[] DFA101_transitionS = {
			"\3\2\1\uffff\1\2\2\uffff\2\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\17\2\1\uffff\2\2\2\uffff"+
			"\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\2\2\3\uffff\2\2\1\1"+
			"\1\uffff\2\2\1\uffff\5\2\1\uffff\4\2\1\uffff\4\2\1\uffff\4\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff"+
			"\1\2\5\uffff\11\2\1\uffff\1\2\1\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\4\2\2\uffff\2\2\2\uffff\1\2",
			"\1\6\1\uffff\1\6\6\uffff\1\6\1\2\3\uffff\1\6\10\uffff\2\6\1\2\1\uffff"+
			"\2\6\21\uffff\1\6\1\uffff\1\6\2\uffff\1\2\1\uffff\1\2\1\6\4\uffff\1\2"+
			"\3\uffff\1\6\4\uffff\1\6\1\uffff\1\6\1\2\5\uffff\1\2\4\uffff\1\6\1\2"+
			"\1\uffff\1\6\1\2\1\uffff\1\6\1\uffff\1\2\1\uffff\1\2\1\uffff\1\6\2\uffff"+
			"\1\6\1\uffff\1\6\2\uffff\1\6\3\uffff\1\2\1\6\2\uffff\1\2\5\uffff\1\2"+
			"\4\uffff\2\6\1\uffff\2\6\1\uffff\1\6\17\uffff\2\6\1\5\3\uffff\1\2\3\uffff"+
			"\1\2\14\uffff\1\2\1\3\1\2\3\uffff\1\2\14\uffff\1\6\3\uffff\1\6\3\uffff"+
			"\1\4",
			"",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\12\4\uffff\4\2\63\uffff\1\2",
			"\1\13",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\14\4\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\15\4\uffff\4\2\63\uffff\1\2",
			"\1\20\1\uffff\1\20\6\uffff\1\20\4\uffff\1\20\10\uffff\2\20\2\uffff\2"+
			"\20\21\uffff\1\20\1\uffff\1\20\5\uffff\1\20\10\uffff\1\20\4\uffff\1\20"+
			"\1\uffff\1\20\13\uffff\1\20\2\uffff\1\20\2\uffff\1\20\5\uffff\1\20\2"+
			"\uffff\1\20\1\uffff\1\20\2\uffff\1\20\4\uffff\1\20\15\uffff\2\20\1\uffff"+
			"\2\20\1\uffff\1\20\17\uffff\3\20\25\uffff\1\16\21\uffff\1\20\3\uffff"+
			"\1\20\3\uffff\1\17",
			"\1\24\1\uffff\1\24\6\uffff\1\24\1\2\3\uffff\1\24\10\uffff\2\24\1\2\1"+
			"\uffff\2\24\21\uffff\1\24\1\uffff\1\24\2\uffff\1\2\1\uffff\1\2\1\24\10"+
			"\uffff\1\24\4\uffff\1\24\1\uffff\1\24\1\2\5\uffff\1\2\4\uffff\1\24\1"+
			"\2\1\uffff\1\24\1\2\1\uffff\1\24\1\uffff\1\2\1\uffff\1\2\1\uffff\1\24"+
			"\2\uffff\1\24\1\uffff\1\24\2\uffff\1\24\3\uffff\1\2\1\24\10\uffff\1\2"+
			"\4\uffff\2\24\1\uffff\2\24\1\uffff\1\24\17\uffff\2\24\1\23\3\uffff\1"+
			"\2\3\uffff\1\2\14\uffff\1\2\1\21\1\2\3\uffff\1\2\14\uffff\1\24\3\uffff"+
			"\1\24\3\uffff\1\22",
			"",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\25\4\uffff\4\2\63\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\26\4\uffff\4\2\63\uffff\1\2",
			"\1\27",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\30\4\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\11\1\31\14\uffff\1\2\1\uffff"+
			"\1\33\11\uffff\1\2\17\uffff\1\2\1\uffff\1\32\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\11\1\uffff\4\2\63"+
			"\uffff\1\2",
			"\1\35",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\11\1\31\14\uffff\1\2\1\uffff"+
			"\1\33\11\uffff\1\2\17\uffff\1\2\1\uffff\1\32\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\11\1\uffff\4\2\63"+
			"\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\11\1\31\14\uffff\1\2\1\uffff"+
			"\1\33\11\uffff\1\2\17\uffff\1\2\1\uffff\1\32\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\11\1\uffff\4\2\63"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\7"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\10\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\36\4\uffff\4\2\63\uffff\1\2",
			"\1\uffff",
			"\1\41\1\uffff\1\41\6\uffff\1\41\4\uffff\1\41\10\uffff\2\41\2\uffff\2"+
			"\41\21\uffff\1\41\1\uffff\1\41\5\uffff\1\41\10\uffff\1\41\4\uffff\1\41"+
			"\1\uffff\1\41\13\uffff\1\41\2\uffff\1\41\2\uffff\1\41\5\uffff\1\41\2"+
			"\uffff\1\41\1\uffff\1\41\2\uffff\1\41\4\uffff\1\41\15\uffff\2\41\1\uffff"+
			"\2\41\1\uffff\1\41\17\uffff\3\41\25\uffff\1\37\21\uffff\1\41\3\uffff"+
			"\1\41\3\uffff\1\40",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\4\uffff\1\11\3\uffff\3\2\1"+
			"\uffff\2\2\3\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff\1"+
			"\2\2\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\2\2\4\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\2\uffff\1\2\3\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff"+
			"\1\2\4\uffff\1\42\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\3\uffff\1\2\14"+
			"\uffff\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\2\2",
			"\1\45\1\uffff\1\45\6\uffff\1\45\4\uffff\1\45\10\uffff\2\45\2\uffff\2"+
			"\45\21\uffff\1\45\1\uffff\1\45\5\uffff\1\45\10\uffff\1\45\4\uffff\1\45"+
			"\1\uffff\1\45\13\uffff\1\45\2\uffff\1\45\2\uffff\1\45\5\uffff\1\45\2"+
			"\uffff\1\45\1\uffff\1\45\2\uffff\1\45\4\uffff\1\45\15\uffff\2\45\1\uffff"+
			"\2\45\1\uffff\1\45\17\uffff\3\45\25\uffff\1\43\21\uffff\1\45\3\uffff"+
			"\1\45\3\uffff\1\44",
			"\1\51\1\uffff\1\51\6\uffff\1\51\1\2\3\uffff\1\51\10\uffff\2\51\1\2\1"+
			"\uffff\2\51\21\uffff\1\51\1\uffff\1\51\2\uffff\1\2\1\uffff\1\2\1\51\10"+
			"\uffff\1\51\4\uffff\1\51\1\uffff\1\51\1\2\5\uffff\1\2\4\uffff\1\51\1"+
			"\2\1\uffff\1\51\1\2\1\uffff\1\51\1\uffff\1\2\1\uffff\1\2\1\uffff\1\51"+
			"\2\uffff\1\51\1\uffff\1\51\2\uffff\1\51\3\uffff\1\2\1\51\10\uffff\1\2"+
			"\4\uffff\2\51\1\uffff\2\51\1\uffff\1\51\17\uffff\2\51\1\50\3\uffff\1"+
			"\2\3\uffff\1\2\14\uffff\1\2\1\46\1\2\3\uffff\1\2\14\uffff\1\51\3\uffff"+
			"\1\51\3\uffff\1\47",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\11\1\31\14\uffff\1\2\1\uffff"+
			"\1\33\11\uffff\1\2\17\uffff\1\2\1\uffff\1\32\6\uffff\1\2\5\uffff\1\2"+
			"\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff"+
			"\1\2\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\11\1\uffff\4\2\63"+
			"\uffff\1\2",
			"\1\uffff",
			"\1\31\16\uffff\1\53\33\uffff\1\52\25\uffff\1\54",
			"\1\55",
			"\1\31\16\uffff\1\53\33\uffff\1\52\25\uffff\1\54",
			"\1\uffff",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\56\14\uffff\1\2\1\uffff\1\33"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\57\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\63\uffff\1\2",
			"\1\60",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\56\14\uffff\1\2\1\uffff\1\33"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\57\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\61\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff\4\2\63\uffff\1\2",
			"\1\63",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\61\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\61\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff\4\2\63\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\2"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\64\4\uffff\4\2\63\uffff\1\2",
			"\1\67\1\uffff\1\67\6\uffff\1\67\4\uffff\1\67\10\uffff\2\67\2\uffff\2"+
			"\67\21\uffff\1\67\1\uffff\1\67\5\uffff\1\67\10\uffff\1\67\4\uffff\1\67"+
			"\1\uffff\1\67\13\uffff\1\67\2\uffff\1\67\2\uffff\1\67\5\uffff\1\67\2"+
			"\uffff\1\67\1\uffff\1\67\2\uffff\1\67\4\uffff\1\67\15\uffff\2\67\1\uffff"+
			"\2\67\1\uffff\1\67\17\uffff\3\67\25\uffff\1\65\21\uffff\1\67\3\uffff"+
			"\1\67\3\uffff\1\66",
			"\1\72\1\uffff\1\72\6\uffff\1\72\4\uffff\1\72\10\uffff\2\72\2\uffff\2"+
			"\72\21\uffff\1\72\1\uffff\1\72\5\uffff\1\72\10\uffff\1\72\4\uffff\1\72"+
			"\1\uffff\1\72\13\uffff\1\72\2\uffff\1\72\2\uffff\1\72\5\uffff\1\72\2"+
			"\uffff\1\72\1\uffff\1\72\2\uffff\1\72\4\uffff\1\72\15\uffff\2\72\1\uffff"+
			"\2\72\1\uffff\1\72\17\uffff\3\72\25\uffff\1\70\21\uffff\1\72\3\uffff"+
			"\1\72\3\uffff\1\71",
			"\1\31\16\uffff\1\53\33\uffff\1\52\25\uffff\1\54",
			"\1\67\1\uffff\1\67\6\uffff\1\67\4\uffff\1\67\10\uffff\2\67\2\uffff\2"+
			"\67\21\uffff\1\67\1\uffff\1\67\5\uffff\1\67\10\uffff\1\67\4\uffff\1\67"+
			"\1\uffff\1\67\13\uffff\1\67\2\uffff\1\67\2\uffff\1\67\5\uffff\1\67\2"+
			"\uffff\1\67\1\uffff\1\67\2\uffff\1\67\4\uffff\1\67\15\uffff\2\67\1\uffff"+
			"\2\67\1\uffff\1\67\17\uffff\3\67\25\uffff\1\65\21\uffff\1\67\3\uffff"+
			"\1\67\3\uffff\1\66",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\4\uffff\1\11\3\uffff\3\2\1"+
			"\uffff\2\2\3\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff\1"+
			"\2\2\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\2\2\4\uffff\4\2\3\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\2\uffff"+
			"\3\2\2\uffff\1\2\3\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1\uffff"+
			"\1\2\4\uffff\1\73\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\3\uffff\1\2\14"+
			"\uffff\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\2\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\56\14\uffff\1\2\1\uffff\1\33"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\57\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\1\2\1\34\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2"+
			"\7\uffff\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\63\uffff\1\2",
			"\1\76\1\uffff\1\76\6\uffff\1\76\4\uffff\1\76\10\uffff\2\76\2\uffff\2"+
			"\76\21\uffff\1\76\1\uffff\1\76\5\uffff\1\76\10\uffff\1\76\4\uffff\1\76"+
			"\1\uffff\1\76\13\uffff\1\76\2\uffff\1\76\2\uffff\1\76\5\uffff\1\76\2"+
			"\uffff\1\76\1\uffff\1\76\2\uffff\1\76\4\uffff\1\76\15\uffff\2\76\1\uffff"+
			"\2\76\1\uffff\1\76\17\uffff\3\76\25\uffff\1\74\21\uffff\1\76\3\uffff"+
			"\1\76\3\uffff\1\75",
			"\3\2\1\uffff\1\2\4\uffff\2\2\3\uffff\1\2\4\uffff\1\56\3\uffff\3\2\1"+
			"\uffff\2\2\3\uffff\1\2\1\uffff\1\2\11\uffff\1\2\1\uffff\1\2\1\uffff\1"+
			"\2\2\uffff\1\2\1\uffff\2\2\5\uffff\1\2\1\uffff\1\57\1\2\4\uffff\4\2\3"+
			"\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3"+
			"\2\2\uffff\3\2\2\uffff\1\2\3\uffff\3\2\7\uffff\1\2\4\uffff\2\2\1\uffff"+
			"\2\2\1\uffff\1\2\4\uffff\1\2\4\uffff\4\2\2\uffff\3\2\3\uffff\1\2\3\uffff"+
			"\1\2\14\uffff\3\2\3\uffff\1\2\14\uffff\1\2\3\uffff\1\2\2\uffff\2\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\7\uffff\1\2\1\61\14\uffff\1\2\1\uffff\1"+
			"\2\11\uffff\1\2\17\uffff\1\2\1\uffff\1\62\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\2\uffff\1\2\1\uffff\4\2\63\uffff\1\2",
			"\1\uffff",
			"\1\56\16\uffff\1\53\33\uffff\1\77\25\uffff\1\54",
			"\1\100",
			"\1\56\16\uffff\1\53\33\uffff\1\77\25\uffff\1\54",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\103",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\uffff",
			"\1\61\16\uffff\1\2\33\uffff\1\104\25\uffff\1\2",
			"\1\105",
			"\1\61\16\uffff\1\2\33\uffff\1\104\25\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\11\14\uffff\1\2\1\uffff\1\2"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\2\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\106\4\uffff\4\2\63\uffff\1\2",
			"\1\56\16\uffff\1\53\33\uffff\1\77\25\uffff\1\54",
			"\1\111\1\uffff\1\111\6\uffff\1\111\4\uffff\1\111\10\uffff\2\111\2\uffff"+
			"\2\111\21\uffff\1\111\1\uffff\1\111\5\uffff\1\111\10\uffff\1\111\4\uffff"+
			"\1\111\1\uffff\1\111\13\uffff\1\111\2\uffff\1\111\2\uffff\1\111\5\uffff"+
			"\1\111\2\uffff\1\111\1\uffff\1\111\2\uffff\1\111\4\uffff\1\111\15\uffff"+
			"\2\111\1\uffff\2\111\1\uffff\1\111\17\uffff\3\111\25\uffff\1\107\21\uffff"+
			"\1\111\3\uffff\1\111\3\uffff\1\110",
			"\1\56\52\uffff\1\77",
			"\1\2\1\101\16\uffff\1\2\33\uffff\1\102\25\uffff\1\2\62\uffff\1\2",
			"\1\2\2\uffff\1\2\5\uffff\1\2\10\uffff\1\56\14\uffff\1\2\1\uffff\1\2"+
			"\11\uffff\1\2\17\uffff\1\2\1\uffff\1\57\6\uffff\1\2\5\uffff\1\2\1\uffff"+
			"\1\2\2\uffff\1\2\2\uffff\2\2\1\uffff\2\2\5\uffff\1\2\4\uffff\1\2\7\uffff"+
			"\1\2\1\uffff\1\2\27\uffff\1\2\4\uffff\4\2\63\uffff\1\2",
			"\1\61\16\uffff\1\2\33\uffff\1\104\25\uffff\1\2",
			"\1\uffff",
			"\1\101\16\uffff\1\2\33\uffff\1\112\25\uffff\1\2",
			"\1\113",
			"\1\101\16\uffff\1\2\33\uffff\1\112\25\uffff\1\2",
			"\1\56\52\uffff\1\77",
			"\1\101\16\uffff\1\2\33\uffff\1\112\25\uffff\1\2"
	};

	static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
	static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
	static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
	static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
	static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
	static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
	static final short[][] DFA101_transition;

	static {
		int numStates = DFA101_transitionS.length;
		DFA101_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
		}
	}

	protected class DFA101 extends DFA {

		public DFA101(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 101;
			this.eot = DFA101_eot;
			this.eof = DFA101_eof;
			this.min = DFA101_min;
			this.max = DFA101_max;
			this.accept = DFA101_accept;
			this.special = DFA101_special;
			this.transition = DFA101_transition;
		}
		@Override
		public String getDescription() {
			return "309:45: ( classParent )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA101_52 = input.LA(1);
						 
						int index101_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_52);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA101_12 = input.LA(1);
						 
						int index101_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_12);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA101_10 = input.LA(1);
						 
						int index101_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_10);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA101_70 = input.LA(1);
						 
						int index101_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_70);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA101_59 = input.LA(1);
						 
						int index101_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_59);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA101_13 = input.LA(1);
						 
						int index101_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_13);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA101_21 = input.LA(1);
						 
						int index101_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_21);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA101_22 = input.LA(1);
						 
						int index101_22 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_22);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA101_24 = input.LA(1);
						 
						int index101_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_24);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA101_30 = input.LA(1);
						 
						int index101_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_30);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA101_34 = input.LA(1);
						 
						int index101_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred144_Delphi()) ) {s = 9;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index101_34);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 101, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA177_eotS =
		"\134\uffff";
	static final String DFA177_eofS =
		"\2\uffff\1\7\1\uffff\1\7\3\uffff\1\7\4\uffff\1\7\27\uffff\1\7\4\uffff"+
		"\1\7\5\uffff\1\7\53\uffff";
	static final String DFA177_minS =
		"\1\50\1\6\1\5\1\u00ad\1\5\1\6\2\uffff\1\5\1\30\1\u00ad\1\30\1\6\1\5\4"+
		"\6\1\30\1\31\1\u00ad\2\31\1\u00ad\2\31\1\u00ad\2\31\1\u00ad\4\31\1\30"+
		"\1\u00ad\1\30\1\5\2\6\1\31\1\6\1\5\1\31\1\6\2\31\1\6\1\5\1\31\1\6\1\30"+
		"\1\31\1\u00ad\2\31\1\u00ad\2\31\1\u00ad\2\31\1\u00ad\5\31\1\u00ad\5\31"+
		"\1\6\4\31\1\6\2\31\1\u00ad\2\31\1\u00ad\6\31";
	static final String DFA177_maxS =
		"\1\50\1\u00c7\1\u00c0\1\u00ad\1\u00c0\1\u00c7\2\uffff\1\u00c0\1\u008d"+
		"\1\u00ad\1\u008d\1\u00c7\1\u00c0\4\u00c7\1\u008d\1\132\1\u00ad\2\132\1"+
		"\u00ad\1\132\1\104\1\u00ad\1\104\1\u008d\1\u00ad\5\u008d\1\u00ad\1\u008d"+
		"\1\u00c0\2\u00c7\1\132\1\u00c7\1\u00c0\1\132\1\u00c7\2\104\1\u00c7\1\u00c0"+
		"\1\u008d\1\u00c7\1\u008d\1\132\1\u00ad\1\132\1\104\1\u00ad\2\104\1\u00ad"+
		"\1\104\1\u008d\1\u00ad\5\u008d\1\u00ad\4\u008d\1\132\1\u00c7\3\104\1\u008d"+
		"\1\u00c7\1\u008d\1\104\1\u00ad\1\104\1\u008d\1\u00ad\4\u008d\1\104\1\u008d";
	static final String DFA177_acceptS =
		"\6\uffff\1\1\1\2\124\uffff";
	static final String DFA177_specialS =
		"\134\uffff}>";
	static final String[] DFA177_transitionS = {
			"\1\1",
			"\1\4\1\uffff\1\4\6\uffff\1\4\4\uffff\1\4\10\uffff\2\4\2\uffff\2\4\21"+
			"\uffff\1\4\1\uffff\1\4\5\uffff\1\4\10\uffff\1\4\4\uffff\1\4\1\uffff\1"+
			"\4\13\uffff\1\4\2\uffff\1\4\2\uffff\1\4\5\uffff\1\4\2\uffff\1\4\1\uffff"+
			"\1\4\2\uffff\1\4\4\uffff\1\4\15\uffff\2\4\1\uffff\2\4\1\uffff\1\4\17"+
			"\uffff\3\4\25\uffff\1\2\21\uffff\1\4\3\uffff\1\4\3\uffff\1\3",
			"\1\7\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\3"+
			"\uffff\1\6\4\uffff\1\7\7\uffff\2\7\3\uffff\1\7\1\uffff\1\7\22\uffff\1"+
			"\7\7\uffff\3\7\1\5\1\7\3\uffff\1\7\12\uffff\2\7\2\uffff\2\7\23\uffff"+
			"\2\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\53\uffff\1\7",
			"\1\10",
			"\1\7\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\3"+
			"\uffff\1\6\4\uffff\1\7\7\uffff\2\7\3\uffff\1\7\1\uffff\1\7\22\uffff\1"+
			"\7\7\uffff\3\7\1\5\1\7\3\uffff\1\7\12\uffff\2\7\2\uffff\2\7\23\uffff"+
			"\2\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\53\uffff\1\7",
			"\1\13\1\uffff\1\13\6\uffff\1\13\4\uffff\1\13\10\uffff\2\13\2\uffff\2"+
			"\13\21\uffff\1\13\1\uffff\1\13\5\uffff\1\13\10\uffff\1\13\4\uffff\1\13"+
			"\1\uffff\1\13\13\uffff\1\13\2\uffff\1\13\2\uffff\1\13\5\uffff\1\13\2"+
			"\uffff\1\13\1\uffff\1\13\2\uffff\1\13\4\uffff\1\13\15\uffff\2\13\1\uffff"+
			"\2\13\1\uffff\1\13\17\uffff\3\13\25\uffff\1\11\21\uffff\1\13\3\uffff"+
			"\1\13\3\uffff\1\12",
			"",
			"",
			"\1\7\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\3"+
			"\uffff\1\6\4\uffff\1\7\7\uffff\2\7\3\uffff\1\7\1\uffff\1\7\22\uffff\1"+
			"\7\7\uffff\3\7\1\5\1\7\3\uffff\1\7\12\uffff\2\7\2\uffff\2\7\23\uffff"+
			"\2\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\53\uffff\1\7",
			"\1\20\1\14\16\uffff\1\16\33\uffff\1\15\25\uffff\1\17\62\uffff\1\21",
			"\1\22",
			"\1\20\1\14\16\uffff\1\16\33\uffff\1\15\25\uffff\1\17\62\uffff\1\21",
			"\1\25\1\uffff\1\25\6\uffff\1\25\4\uffff\1\25\10\uffff\2\25\2\uffff\2"+
			"\25\21\uffff\1\25\1\uffff\1\25\5\uffff\1\25\10\uffff\1\25\4\uffff\1\25"+
			"\1\uffff\1\25\13\uffff\1\25\2\uffff\1\25\2\uffff\1\25\5\uffff\1\25\2"+
			"\uffff\1\25\1\uffff\1\25\2\uffff\1\25\4\uffff\1\25\15\uffff\2\25\1\uffff"+
			"\2\25\1\uffff\1\25\17\uffff\3\25\25\uffff\1\23\21\uffff\1\25\3\uffff"+
			"\1\25\3\uffff\1\24",
			"\1\7\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\3"+
			"\uffff\1\6\4\uffff\1\7\7\uffff\2\7\3\uffff\1\7\1\uffff\1\7\22\uffff\1"+
			"\7\7\uffff\3\7\1\uffff\1\7\3\uffff\1\7\12\uffff\2\7\2\uffff\2\7\23\uffff"+
			"\2\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\53\uffff\1\7",
			"\1\30\1\uffff\1\30\6\uffff\1\30\4\uffff\1\30\10\uffff\2\30\2\uffff\2"+
			"\30\21\uffff\1\30\1\uffff\1\30\5\uffff\1\30\10\uffff\1\30\4\uffff\1\30"+
			"\1\uffff\1\30\13\uffff\1\30\2\uffff\1\30\2\uffff\1\30\5\uffff\1\30\2"+
			"\uffff\1\30\1\uffff\1\30\2\uffff\1\30\4\uffff\1\30\15\uffff\2\30\1\uffff"+
			"\2\30\1\uffff\1\30\17\uffff\3\30\25\uffff\1\26\21\uffff\1\30\3\uffff"+
			"\1\30\3\uffff\1\27",
			"\1\33\1\uffff\1\33\6\uffff\1\33\4\uffff\1\33\10\uffff\2\33\2\uffff\2"+
			"\33\21\uffff\1\33\1\uffff\1\33\5\uffff\1\33\10\uffff\1\33\4\uffff\1\33"+
			"\1\uffff\1\33\13\uffff\1\33\2\uffff\1\33\2\uffff\1\33\5\uffff\1\33\2"+
			"\uffff\1\33\1\uffff\1\33\2\uffff\1\33\4\uffff\1\33\15\uffff\2\33\1\uffff"+
			"\2\33\1\uffff\1\33\17\uffff\3\33\25\uffff\1\31\21\uffff\1\33\3\uffff"+
			"\1\33\3\uffff\1\32",
			"\1\36\1\uffff\1\36\6\uffff\1\36\4\uffff\1\36\2\uffff\1\40\4\uffff\1"+
			"\41\2\36\2\uffff\2\36\21\uffff\1\36\1\uffff\1\36\5\uffff\1\36\10\uffff"+
			"\1\36\4\uffff\1\36\1\uffff\1\36\13\uffff\1\36\2\uffff\1\36\2\uffff\1"+
			"\36\5\uffff\1\36\2\uffff\1\36\1\uffff\1\36\2\uffff\1\36\4\uffff\1\36"+
			"\15\uffff\2\36\1\37\2\36\1\uffff\1\36\17\uffff\3\36\25\uffff\1\34\21"+
			"\uffff\1\36\3\uffff\1\36\3\uffff\1\35",
			"\1\44\1\uffff\1\44\6\uffff\1\44\4\uffff\1\44\10\uffff\2\44\2\uffff\2"+
			"\44\21\uffff\1\44\1\uffff\1\44\5\uffff\1\44\10\uffff\1\44\4\uffff\1\44"+
			"\1\uffff\1\44\13\uffff\1\44\2\uffff\1\44\2\uffff\1\44\5\uffff\1\44\2"+
			"\uffff\1\44\1\uffff\1\44\2\uffff\1\44\4\uffff\1\44\15\uffff\2\44\1\uffff"+
			"\2\44\1\uffff\1\44\17\uffff\3\44\25\uffff\1\42\21\uffff\1\44\3\uffff"+
			"\1\44\3\uffff\1\43",
			"\1\20\1\14\16\uffff\1\16\33\uffff\1\15\25\uffff\1\17\62\uffff\1\21",
			"\1\14\16\uffff\1\46\33\uffff\1\45\25\uffff\1\47",
			"\1\50",
			"\1\14\16\uffff\1\46\33\uffff\1\45\25\uffff\1\47",
			"\1\51\16\uffff\1\16\33\uffff\1\52\25\uffff\1\17",
			"\1\53",
			"\1\51\16\uffff\1\16\33\uffff\1\52\25\uffff\1\17",
			"\1\54\52\uffff\1\55",
			"\1\56",
			"\1\54\52\uffff\1\55",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\61",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\62\53\uffff\1\60\110\uffff\1\21",
			"\1\63",
			"\1\62\53\uffff\1\60\110\uffff\1\21",
			"\1\7\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\3"+
			"\uffff\1\6\4\uffff\1\7\7\uffff\2\7\3\uffff\1\7\1\uffff\1\7\22\uffff\1"+
			"\7\7\uffff\3\7\1\uffff\1\7\3\uffff\1\7\12\uffff\2\7\2\uffff\2\7\23\uffff"+
			"\2\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\53\uffff\1\7",
			"\1\66\1\uffff\1\66\6\uffff\1\66\4\uffff\1\66\10\uffff\2\66\2\uffff\2"+
			"\66\21\uffff\1\66\1\uffff\1\66\5\uffff\1\66\10\uffff\1\66\4\uffff\1\66"+
			"\1\uffff\1\66\13\uffff\1\66\2\uffff\1\66\2\uffff\1\66\5\uffff\1\66\2"+
			"\uffff\1\66\1\uffff\1\66\2\uffff\1\66\4\uffff\1\66\15\uffff\2\66\1\uffff"+
			"\2\66\1\uffff\1\66\17\uffff\3\66\25\uffff\1\64\21\uffff\1\66\3\uffff"+
			"\1\66\3\uffff\1\65",
			"\1\71\1\uffff\1\71\6\uffff\1\71\4\uffff\1\71\10\uffff\2\71\2\uffff\2"+
			"\71\21\uffff\1\71\1\uffff\1\71\5\uffff\1\71\10\uffff\1\71\4\uffff\1\71"+
			"\1\uffff\1\71\13\uffff\1\71\2\uffff\1\71\2\uffff\1\71\5\uffff\1\71\2"+
			"\uffff\1\71\1\uffff\1\71\2\uffff\1\71\4\uffff\1\71\15\uffff\2\71\1\uffff"+
			"\2\71\1\uffff\1\71\17\uffff\3\71\25\uffff\1\67\21\uffff\1\71\3\uffff"+
			"\1\71\3\uffff\1\70",
			"\1\14\16\uffff\1\46\33\uffff\1\45\25\uffff\1\47",
			"\1\66\1\uffff\1\66\6\uffff\1\66\4\uffff\1\66\10\uffff\2\66\2\uffff\2"+
			"\66\21\uffff\1\66\1\uffff\1\66\5\uffff\1\66\10\uffff\1\66\4\uffff\1\66"+
			"\1\uffff\1\66\13\uffff\1\66\2\uffff\1\66\2\uffff\1\66\5\uffff\1\66\2"+
			"\uffff\1\66\1\uffff\1\66\2\uffff\1\66\4\uffff\1\66\15\uffff\2\66\1\uffff"+
			"\2\66\1\uffff\1\66\17\uffff\3\66\25\uffff\1\64\21\uffff\1\66\3\uffff"+
			"\1\66\3\uffff\1\65",
			"\1\7\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\3"+
			"\uffff\1\6\4\uffff\1\7\7\uffff\2\7\3\uffff\1\7\1\uffff\1\7\22\uffff\1"+
			"\7\7\uffff\3\7\1\uffff\1\7\3\uffff\1\7\12\uffff\2\7\2\uffff\2\7\23\uffff"+
			"\2\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\53\uffff\1\7",
			"\1\51\16\uffff\1\16\33\uffff\1\52\25\uffff\1\17",
			"\1\74\1\uffff\1\74\6\uffff\1\74\4\uffff\1\74\10\uffff\2\74\2\uffff\2"+
			"\74\21\uffff\1\74\1\uffff\1\74\5\uffff\1\74\10\uffff\1\74\4\uffff\1\74"+
			"\1\uffff\1\74\13\uffff\1\74\2\uffff\1\74\2\uffff\1\74\5\uffff\1\74\2"+
			"\uffff\1\74\1\uffff\1\74\2\uffff\1\74\4\uffff\1\74\15\uffff\2\74\1\uffff"+
			"\2\74\1\uffff\1\74\17\uffff\3\74\25\uffff\1\72\21\uffff\1\74\3\uffff"+
			"\1\74\3\uffff\1\73",
			"\1\51\52\uffff\1\52",
			"\1\54\52\uffff\1\55",
			"\1\77\1\uffff\1\77\6\uffff\1\77\4\uffff\1\77\2\uffff\1\101\4\uffff\1"+
			"\102\2\77\2\uffff\2\77\21\uffff\1\77\1\uffff\1\77\5\uffff\1\77\10\uffff"+
			"\1\77\4\uffff\1\77\1\uffff\1\77\13\uffff\1\77\2\uffff\1\77\2\uffff\1"+
			"\77\5\uffff\1\77\2\uffff\1\77\1\uffff\1\77\2\uffff\1\77\4\uffff\1\77"+
			"\15\uffff\2\77\1\100\2\77\1\uffff\1\77\17\uffff\3\77\25\uffff\1\75\21"+
			"\uffff\1\77\3\uffff\1\77\3\uffff\1\76",
			"\1\7\6\uffff\1\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\3"+
			"\uffff\1\6\4\uffff\1\7\7\uffff\2\7\3\uffff\1\7\1\uffff\1\7\22\uffff\1"+
			"\7\7\uffff\3\7\1\uffff\1\7\3\uffff\1\7\12\uffff\2\7\2\uffff\2\7\23\uffff"+
			"\2\7\6\uffff\1\7\1\uffff\1\7\5\uffff\2\7\53\uffff\1\7",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\105\1\uffff\1\105\6\uffff\1\105\4\uffff\1\105\2\uffff\1\107\4\uffff"+
			"\1\110\2\105\2\uffff\2\105\21\uffff\1\105\1\uffff\1\105\5\uffff\1\105"+
			"\10\uffff\1\105\4\uffff\1\105\1\uffff\1\105\13\uffff\1\105\2\uffff\1"+
			"\105\2\uffff\1\105\5\uffff\1\105\2\uffff\1\105\1\uffff\1\105\2\uffff"+
			"\1\105\4\uffff\1\105\15\uffff\2\105\1\106\2\105\1\uffff\1\105\17\uffff"+
			"\3\105\25\uffff\1\103\21\uffff\1\105\3\uffff\1\105\3\uffff\1\104",
			"\1\62\53\uffff\1\60\110\uffff\1\21",
			"\1\51\16\uffff\1\46\33\uffff\1\52\25\uffff\1\47",
			"\1\111",
			"\1\51\16\uffff\1\46\33\uffff\1\52\25\uffff\1\47",
			"\1\112\52\uffff\1\113",
			"\1\114",
			"\1\112\52\uffff\1\113",
			"\1\54\52\uffff\1\55",
			"\1\115",
			"\1\54\52\uffff\1\55",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\116",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\120",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\51\16\uffff\1\46\33\uffff\1\52\25\uffff\1\47",
			"\1\123\1\uffff\1\123\6\uffff\1\123\4\uffff\1\123\10\uffff\2\123\2\uffff"+
			"\2\123\21\uffff\1\123\1\uffff\1\123\5\uffff\1\123\10\uffff\1\123\4\uffff"+
			"\1\123\1\uffff\1\123\13\uffff\1\123\2\uffff\1\123\2\uffff\1\123\5\uffff"+
			"\1\123\2\uffff\1\123\1\uffff\1\123\2\uffff\1\123\4\uffff\1\123\15\uffff"+
			"\2\123\1\uffff\2\123\1\uffff\1\123\17\uffff\3\123\25\uffff\1\121\21\uffff"+
			"\1\123\3\uffff\1\123\3\uffff\1\122",
			"\1\51\52\uffff\1\52",
			"\1\112\52\uffff\1\113",
			"\1\54\52\uffff\1\55",
			"\1\57\52\uffff\1\60\110\uffff\1\21",
			"\1\126\1\uffff\1\126\6\uffff\1\126\4\uffff\1\126\2\uffff\1\130\4\uffff"+
			"\1\131\2\126\2\uffff\2\126\21\uffff\1\126\1\uffff\1\126\5\uffff\1\126"+
			"\10\uffff\1\126\4\uffff\1\126\1\uffff\1\126\13\uffff\1\126\2\uffff\1"+
			"\126\2\uffff\1\126\5\uffff\1\126\2\uffff\1\126\1\uffff\1\126\2\uffff"+
			"\1\126\4\uffff\1\126\15\uffff\2\126\1\127\2\126\1\uffff\1\126\17\uffff"+
			"\3\126\25\uffff\1\124\21\uffff\1\126\3\uffff\1\126\3\uffff\1\125",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\112\52\uffff\1\113",
			"\1\132",
			"\1\112\52\uffff\1\113",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\133",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\117\52\uffff\1\60\110\uffff\1\21",
			"\1\112\52\uffff\1\113",
			"\1\117\52\uffff\1\60\110\uffff\1\21"
	};

	static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
	static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
	static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
	static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
	static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
	static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
	static final short[][] DFA177_transition;

	static {
		int numStates = DFA177_transitionS.length;
		DFA177_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
		}
	}

	protected class DFA177 extends DFA {

		public DFA177(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 177;
			this.eot = DFA177_eot;
			this.eof = DFA177_eof;
			this.min = DFA177_min;
			this.max = DFA177_max;
			this.accept = DFA177_accept;
			this.special = DFA177_special;
			this.transition = DFA177_transition;
		}
		@Override
		public String getDescription() {
			return "421:59: ( '.' ident ( genericDefinition )? )?";
		}
	}

	static final String DFA195_eotS =
		"\137\uffff";
	static final String DFA195_eofS =
		"\1\2\136\uffff";
	static final String DFA195_minS =
		"\1\4\1\0\16\uffff\1\0\116\uffff";
	static final String DFA195_maxS =
		"\1\u00c7\1\0\16\uffff\1\0\116\uffff";
	static final String DFA195_acceptS =
		"\2\uffff\1\2\133\uffff\1\1";
	static final String DFA195_specialS =
		"\1\uffff\1\0\16\uffff\1\1\116\uffff}>";
	static final String[] DFA195_transitionS = {
			"\3\2\1\uffff\1\2\1\uffff\1\136\2\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5"+
			"\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\2\2\1\1\14"+
			"\2\1\uffff\2\2\1\136\1\uffff\1\20\1\2\4\uffff\1\2\1\136\2\2\1\uffff\1"+
			"\2\1\uffff\1\136\2\2\2\uffff\1\136\3\2\1\136\2\2\1\uffff\5\2\1\136\4"+
			"\2\1\uffff\4\2\1\uffff\4\2\1\uffff\2\2\1\uffff\5\2\1\uffff\1\2\2\uffff"+
			"\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\5\uffff\11\2\1\uffff\1\2\1\uffff"+
			"\1\2\14\uffff\3\2\3\uffff\1\2\6\uffff\2\2\2\uffff\4\2\2\uffff\2\2\2\uffff"+
			"\1\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
	static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
	static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
	static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
	static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
	static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
	static final short[][] DFA195_transition;

	static {
		int numStates = DFA195_transitionS.length;
		DFA195_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
		}
	}

	protected class DFA195 extends DFA {

		public DFA195(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 195;
			this.eot = DFA195_eot;
			this.eof = DFA195_eof;
			this.min = DFA195_min;
			this.max = DFA195_max;
			this.accept = DFA195_accept;
			this.special = DFA195_special;
			this.transition = DFA195_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 459:49: ( relationalOperator simpleExpression )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA195_1 = input.LA(1);
						 
						int index195_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred263_Delphi()) ) {s = 94;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index195_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA195_16 = input.LA(1);
						 
						int index195_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred263_Delphi()) ) {s = 94;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index195_16);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 195, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA196_eotS =
		"\137\uffff";
	static final String DFA196_eofS =
		"\1\2\136\uffff";
	static final String DFA196_minS =
		"\1\4\1\0\135\uffff";
	static final String DFA196_maxS =
		"\1\u00c7\1\0\135\uffff";
	static final String DFA196_acceptS =
		"\2\uffff\1\2\133\uffff\1\1";
	static final String DFA196_specialS =
		"\1\uffff\1\0\135\uffff}>";
	static final String[] DFA196_transitionS = {
			"\3\2\1\uffff\1\2\2\uffff\2\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\2\2\1\1\14\2\1\uffff"+
			"\2\2\2\uffff\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\2\2\3\uffff"+
			"\3\2\1\uffff\2\2\1\uffff\5\2\1\uffff\4\2\1\uffff\4\2\1\uffff\4\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff"+
			"\1\2\5\uffff\11\2\1\uffff\1\2\1\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\4\2\2\uffff\2\2\2\uffff\1\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA196_eot = DFA.unpackEncodedString(DFA196_eotS);
	static final short[] DFA196_eof = DFA.unpackEncodedString(DFA196_eofS);
	static final char[] DFA196_min = DFA.unpackEncodedStringToUnsignedChars(DFA196_minS);
	static final char[] DFA196_max = DFA.unpackEncodedStringToUnsignedChars(DFA196_maxS);
	static final short[] DFA196_accept = DFA.unpackEncodedString(DFA196_acceptS);
	static final short[] DFA196_special = DFA.unpackEncodedString(DFA196_specialS);
	static final short[][] DFA196_transition;

	static {
		int numStates = DFA196_transitionS.length;
		DFA196_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA196_transition[i] = DFA.unpackEncodedString(DFA196_transitionS[i]);
		}
	}

	protected class DFA196 extends DFA {

		public DFA196(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 196;
			this.eot = DFA196_eot;
			this.eof = DFA196_eof;
			this.min = DFA196_min;
			this.max = DFA196_max;
			this.accept = DFA196_accept;
			this.special = DFA196_special;
			this.transition = DFA196_transition;
		}
		@Override
		public String getDescription() {
			return "459:88: ( '=' expression )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA196_1 = input.LA(1);
						 
						int index196_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred264_Delphi()) ) {s = 94;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index196_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 196, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA198_eotS =
		"\137\uffff";
	static final String DFA198_eofS =
		"\1\2\136\uffff";
	static final String DFA198_minS =
		"\1\4\1\0\135\uffff";
	static final String DFA198_maxS =
		"\1\u00c7\1\0\135\uffff";
	static final String DFA198_acceptS =
		"\2\uffff\1\2\133\uffff\1\1";
	static final String DFA198_specialS =
		"\1\uffff\1\0\135\uffff}>";
	static final String[] DFA198_transitionS = {
			"\3\2\1\uffff\1\2\2\uffff\2\2\2\uffff\3\2\1\uffff\7\2\1\uffff\5\2\1\uffff"+
			"\4\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\17\2\1\uffff\2\2\2\uffff"+
			"\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\2\2\3\uffff\2\2\1\1"+
			"\1\uffff\2\2\1\uffff\5\2\1\uffff\4\2\1\uffff\4\2\1\uffff\4\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\1\2\2\uffff\2\2\1\uffff\4\2\2\uffff\4\2\1\uffff"+
			"\1\2\5\uffff\11\2\1\uffff\1\2\1\uffff\1\2\14\uffff\3\2\3\uffff\1\2\6"+
			"\uffff\2\2\2\uffff\4\2\2\uffff\2\2\2\uffff\1\2",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
	static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
	static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
	static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
	static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
	static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
	static final short[][] DFA198_transition;

	static {
		int numStates = DFA198_transitionS.length;
		DFA198_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
		}
	}

	protected class DFA198 extends DFA {

		public DFA198(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 198;
			this.eot = DFA198_eot;
			this.eof = DFA198_eof;
			this.min = DFA198_min;
			this.max = DFA198_max;
			this.accept = DFA198_accept;
			this.special = DFA198_special;
			this.transition = DFA198_transition;
		}
		@Override
		public String getDescription() {
			return "461:44: ( formalParameterSection )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA198_1 = input.LA(1);
						 
						int index198_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred265_Delphi()) ) {s = 94;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index198_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 198, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA201_eotS =
		"\141\uffff";
	static final String DFA201_eofS =
		"\1\1\140\uffff";
	static final String DFA201_minS =
		"\1\4\121\uffff\1\0\16\uffff";
	static final String DFA201_maxS =
		"\1\u00c7\121\uffff\1\0\16\uffff";
	static final String DFA201_acceptS =
		"\1\uffff\1\2\136\uffff\1\1";
	static final String DFA201_specialS =
		"\122\uffff\1\0\16\uffff}>";
	static final String[] DFA201_transitionS = {
			"\3\1\1\uffff\1\1\1\uffff\3\1\2\uffff\3\1\1\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\4\1\2\uffff\1\1\1\uffff\2\1\2\uffff\1\1\2\uffff\17\1\1\uffff\3\1\1\uffff"+
			"\2\1\4\uffff\4\1\1\uffff\1\1\1\uffff\3\1\2\uffff\6\1\1\122\1\uffff\12"+
			"\1\1\140\4\1\1\uffff\2\1\1\122\1\1\1\uffff\2\1\1\uffff\5\1\1\uffff\1"+
			"\1\2\uffff\2\1\1\uffff\4\1\2\uffff\4\1\1\uffff\1\1\5\uffff\11\1\1\uffff"+
			"\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\4\1\2\uffff"+
			"\2\1\1\uffff\1\140\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
	static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
	static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
	static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
	static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
	static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
	static final short[][] DFA201_transition;

	static {
		int numStates = DFA201_transitionS.length;
		DFA201_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
		}
	}

	protected class DFA201 extends DFA {

		public DFA201(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 464:37: ( addOperator term )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA201_82 = input.LA(1);
						 
						int index201_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred268_Delphi()) ) {s = 96;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index201_82);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 201, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA203_eotS =
		"\147\uffff";
	static final String DFA203_eofS =
		"\1\22\146\uffff";
	static final String DFA203_minS =
		"\1\4\21\0\1\uffff\1\0\3\uffff\1\0\6\uffff\1\0\5\uffff\1\0\2\uffff\1\0"+
		"\10\uffff\1\0\11\uffff\1\0\4\uffff\1\0\2\uffff\1\0\13\uffff\3\0\1\uffff"+
		"\2\0\1\uffff\1\0\13\uffff\1\0\3\uffff\1\0\1\uffff";
	static final String DFA203_maxS =
		"\1\u00c7\21\0\1\uffff\1\0\3\uffff\1\0\6\uffff\1\0\5\uffff\1\0\2\uffff"+
		"\1\0\10\uffff\1\0\11\uffff\1\0\4\uffff\1\0\2\uffff\1\0\13\uffff\3\0\1"+
		"\uffff\2\0\1\uffff\1\0\13\uffff\1\0\3\uffff\1\0\1\uffff";
	static final String DFA203_acceptS =
		"\22\uffff\1\2\123\uffff\1\1";
	static final String DFA203_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
		"\1\16\1\17\1\20\1\uffff\1\21\3\uffff\1\22\6\uffff\1\23\5\uffff\1\24\2"+
		"\uffff\1\25\10\uffff\1\26\11\uffff\1\27\4\uffff\1\30\2\uffff\1\31\13\uffff"+
		"\1\32\1\33\1\34\1\uffff\1\35\1\36\1\uffff\1\37\13\uffff\1\40\3\uffff\1"+
		"\41\1\uffff}>";
	static final String[] DFA203_transitionS = {
			"\2\22\1\145\1\22\1\145\1\uffff\3\22\1\uffff\1\22\1\141\1\23\1\22\1\uffff"+
			"\1\22\1\145\5\22\1\uffff\2\22\2\145\1\4\1\uffff\1\122\1\27\2\22\1\uffff"+
			"\2\22\1\uffff\2\22\2\uffff\1\22\2\uffff\4\22\1\145\1\22\1\36\2\22\1\13"+
			"\1\22\1\17\1\72\2\22\1\uffff\3\22\1\uffff\1\22\1\145\4\uffff\1\123\1"+
			"\22\1\125\1\21\1\uffff\1\22\1\uffff\2\22\1\15\2\uffff\2\22\1\77\1\14"+
			"\1\22\1\60\1\20\1\22\1\16\1\22\1\11\1\22\1\23\1\22\1\145\2\22\1\47\1"+
			"\22\1\145\2\22\1\145\1\uffff\2\22\1\20\1\145\1\uffff\2\22\1\uffff\4\22"+
			"\1\5\1\uffff\1\22\2\uffff\1\102\1\117\1\uffff\1\145\1\36\1\22\1\145\2"+
			"\uffff\4\22\1\uffff\1\22\1\uffff\6\22\1\120\1\44\1\10\3\22\1\12\1\uffff"+
			"\1\22\1\uffff\1\3\14\uffff\1\1\1\6\1\1\3\uffff\1\2\6\uffff\2\22\2\uffff"+
			"\2\22\1\145\1\22\2\uffff\1\116\1\22\1\uffff\1\22\1\7",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
	static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
	static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
	static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
	static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
	static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
	static final short[][] DFA203_transition;

	static {
		int numStates = DFA203_transitionS.length;
		DFA203_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
		}
	}

	protected class DFA203 extends DFA {

		public DFA203(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 203;
			this.eot = DFA203_eot;
			this.eof = DFA203_eof;
			this.min = DFA203_min;
			this.max = DFA203_max;
			this.accept = DFA203_accept;
			this.special = DFA203_special;
			this.transition = DFA203_transition;
		}
		@Override
		public String getDescription() {
			return "470:44: ( factor )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA203_1 = input.LA(1);
						 
						int index203_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA203_2 = input.LA(1);
						 
						int index203_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA203_3 = input.LA(1);
						 
						int index203_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA203_4 = input.LA(1);
						 
						int index203_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA203_5 = input.LA(1);
						 
						int index203_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA203_6 = input.LA(1);
						 
						int index203_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA203_7 = input.LA(1);
						 
						int index203_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA203_8 = input.LA(1);
						 
						int index203_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA203_9 = input.LA(1);
						 
						int index203_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_9);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA203_10 = input.LA(1);
						 
						int index203_10 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_10);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA203_11 = input.LA(1);
						 
						int index203_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_11);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA203_12 = input.LA(1);
						 
						int index203_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_12);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA203_13 = input.LA(1);
						 
						int index203_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_13);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA203_14 = input.LA(1);
						 
						int index203_14 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_14);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA203_15 = input.LA(1);
						 
						int index203_15 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_15);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA203_16 = input.LA(1);
						 
						int index203_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA203_17 = input.LA(1);
						 
						int index203_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_17);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA203_19 = input.LA(1);
						 
						int index203_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_19);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA203_23 = input.LA(1);
						 
						int index203_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_23);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA203_30 = input.LA(1);
						 
						int index203_30 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_30);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA203_36 = input.LA(1);
						 
						int index203_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_36);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA203_39 = input.LA(1);
						 
						int index203_39 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_39);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA203_48 = input.LA(1);
						 
						int index203_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_48);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA203_58 = input.LA(1);
						 
						int index203_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_58);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA203_63 = input.LA(1);
						 
						int index203_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_63);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA203_66 = input.LA(1);
						 
						int index203_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_66);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA203_78 = input.LA(1);
						 
						int index203_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_78);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA203_79 = input.LA(1);
						 
						int index203_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_79);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA203_80 = input.LA(1);
						 
						int index203_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_80);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA203_82 = input.LA(1);
						 
						int index203_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_82);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA203_83 = input.LA(1);
						 
						int index203_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_83);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA203_85 = input.LA(1);
						 
						int index203_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_85);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA203_97 = input.LA(1);
						 
						int index203_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_97);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA203_101 = input.LA(1);
						 
						int index203_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred272_Delphi()) ) {s = 102;}
						else if ( (true) ) {s = 18;}
						 
						input.seek(index203_101);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 203, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA205_eotS =
		"\152\uffff";
	static final String DFA205_eofS =
		"\1\1\151\uffff";
	static final String DFA205_minS =
		"\1\4\31\uffff\1\0\66\uffff\1\0\3\uffff\1\0\16\uffff\1\0\5\uffff";
	static final String DFA205_maxS =
		"\1\u00c7\31\uffff\1\0\66\uffff\1\0\3\uffff\1\0\16\uffff\1\0\5\uffff";
	static final String DFA205_acceptS =
		"\1\uffff\1\2\145\uffff\1\1\2\uffff";
	static final String DFA205_specialS =
		"\32\uffff\1\0\66\uffff\1\1\3\uffff\1\2\16\uffff\1\3\5\uffff}>";
	static final String[] DFA205_transitionS = {
			"\5\1\1\uffff\3\1\1\uffff\2\1\1\125\1\1\1\uffff\7\1\1\uffff\5\1\1\uffff"+
			"\4\1\1\uffff\2\1\1\147\2\1\2\uffff\1\1\2\uffff\17\1\1\uffff\3\1\1\uffff"+
			"\2\1\4\uffff\4\1\1\uffff\1\1\1\uffff\2\1\1\32\2\uffff\3\1\1\121\1\144"+
			"\22\1\1\uffff\4\1\1\147\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\4\1\2\uffff\4\1\1\uffff\1\1\1\uffff\15\1\1\uffff\1\1\1\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\4\1\2\uffff\2\1\1\uffff\2"+
			"\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_eotS);
	static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_eofS);
	static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_minS);
	static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_maxS);
	static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_acceptS);
	static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_specialS);
	static final short[][] DFA205_transition;

	static {
		int numStates = DFA205_transitionS.length;
		DFA205_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA205_transition[i] = DFA.unpackEncodedString(DFA205_transitionS[i]);
		}
	}

	protected class DFA205 extends DFA {

		public DFA205(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 205;
			this.eot = DFA205_eot;
			this.eof = DFA205_eof;
			this.min = DFA205_min;
			this.max = DFA205_max;
			this.accept = DFA205_accept;
			this.special = DFA205_special;
			this.transition = DFA205_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 472:41: ( particleItem )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA205_26 = input.LA(1);
						 
						int index205_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred273_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_26);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA205_81 = input.LA(1);
						 
						int index205_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred273_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_81);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA205_85 = input.LA(1);
						 
						int index205_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred273_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_85);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA205_100 = input.LA(1);
						 
						int index205_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred273_Delphi()) ) {s = 103;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index205_100);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 205, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA281_eotS =
		"\171\uffff";
	static final String DFA281_eofS =
		"\1\1\1\uffff\1\1\1\14\1\uffff\1\14\1\uffff\4\1\2\uffff\1\1\2\uffff\1\14"+
		"\2\uffff\2\1\1\uffff\1\1\1\uffff\1\1\2\uffff\7\1\1\uffff\1\1\7\uffff\1"+
		"\1\1\uffff\1\1\2\uffff\2\1\3\uffff\1\1\7\uffff\1\1\1\uffff\1\1\2\uffff"+
		"\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\5\uffff"+
		"\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\5\uffff\7\1\1\uffff"+
		"\2\1\1\uffff\3\1\2\uffff\2\1\1\uffff\3\1";
	static final String DFA281_minS =
		"\1\31\1\uffff\1\6\1\4\1\u00ad\1\4\1\0\4\5\1\0\1\uffff\2\6\1\uffff\1\4"+
		"\2\0\2\5\1\0\1\5\1\0\1\5\2\0\7\6\1\u00ad\2\6\1\u00ad\2\6\1\174\2\0\1\5"+
		"\1\0\1\5\2\0\2\5\1\0\3\6\7\0\1\6\1\0\3\6\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1"+
		"\0\1\6\1\u00ad\2\6\1\0\1\6\1\u00ad\2\6\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
		"\4\6\4\0\7\6\1\u00ad\2\6\1\u00ad\7\6\1\u00ad\3\6";
	static final String DFA281_maxS =
		"\1\u008d\1\uffff\2\u00c7\1\u00ad\1\u00c7\1\0\4\u00c7\1\0\1\uffff\2\u00c7"+
		"\1\uffff\1\u00c7\2\0\2\u00c7\1\0\1\u00c7\1\0\1\u00c7\2\0\7\u00c7\1\u00ad"+
		"\2\u00c7\1\u00ad\2\u00c7\1\u008d\2\0\1\u00c7\1\0\1\u00c7\2\0\2\u00c7\1"+
		"\0\3\u00c7\7\0\1\u00c7\1\0\4\u00c7\1\0\1\u00c7\1\0\1\u00c7\1\0\1\u00c7"+
		"\1\0\1\u00c7\1\u00ad\2\u00c7\1\0\1\u00c7\1\u00ad\3\u00c7\1\0\1\u00c7\1"+
		"\0\1\u00c7\1\0\1\u00c7\1\0\4\u00c7\4\0\7\u00c7\1\u00ad\2\u00c7\1\u00ad"+
		"\7\u00c7\1\u00ad\3\u00c7";
	static final String DFA281_acceptS =
		"\1\uffff\1\2\12\uffff\1\1\2\uffff\1\1\151\uffff";
	static final String DFA281_specialS =
		"\6\uffff\1\35\4\uffff\1\40\5\uffff\1\36\1\41\2\uffff\1\1\1\uffff\1\2\1"+
		"\uffff\1\6\1\7\16\uffff\1\37\1\42\1\uffff\1\12\1\uffff\1\0\1\15\2\uffff"+
		"\1\21\3\uffff\1\26\1\25\1\27\1\30\1\32\1\33\1\34\1\uffff\1\31\4\uffff"+
		"\1\13\1\uffff\1\14\1\uffff\1\3\1\uffff\1\23\4\uffff\1\24\5\uffff\1\10"+
		"\1\uffff\1\17\1\uffff\1\16\1\uffff\1\4\4\uffff\1\20\1\5\1\22\1\11\26\uffff}>";
	static final String[] DFA281_transitionS = {
			"\1\1\10\uffff\1\1\5\uffff\1\2\14\uffff\1\1\25\uffff\1\1\13\uffff\1\1"+
			"\1\uffff\1\1\25\uffff\1\1\35\uffff\1\1",
			"",
			"\1\5\1\uffff\1\5\6\uffff\1\5\4\uffff\1\5\10\uffff\2\5\2\uffff\2\5\21"+
			"\uffff\1\5\1\uffff\1\5\5\uffff\1\5\10\uffff\1\5\4\uffff\1\5\1\uffff\1"+
			"\5\13\uffff\1\5\2\uffff\1\5\2\uffff\1\5\5\uffff\1\5\2\uffff\1\5\1\uffff"+
			"\1\5\2\uffff\1\5\4\uffff\1\5\15\uffff\2\5\1\uffff\2\5\1\uffff\1\5\17"+
			"\uffff\3\5\25\uffff\1\3\21\uffff\1\5\3\uffff\1\5\3\uffff\1\4",
			"\3\1\1\uffff\1\1\2\uffff\2\1\2\uffff\3\1\1\uffff\6\1\1\15\1\uffff\5"+
			"\1\1\uffff\1\1\1\7\2\1\2\uffff\1\1\1\6\2\1\2\uffff\1\1\2\uffff\5\1\1"+
			"\10\11\1\1\uffff\2\1\2\uffff\2\1\4\uffff\1\1\1\17\2\1\1\uffff\1\1\2\uffff"+
			"\2\1\3\uffff\1\12\1\1\1\16\3\1\1\uffff\5\1\1\uffff\4\1\1\uffff\4\1\1"+
			"\uffff\1\1\1\11\2\1\1\uffff\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\4\1\2\uffff\4\1\1\uffff\1\13\5\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\4\1\2\uffff\2\1\2\uffff"+
			"\1\1",
			"\1\20",
			"\3\1\1\uffff\1\1\2\uffff\2\1\2\uffff\3\1\1\uffff\6\1\1\15\1\uffff\5"+
			"\1\1\uffff\1\1\1\7\2\1\2\uffff\1\1\1\21\2\1\2\uffff\1\1\2\uffff\5\1\1"+
			"\10\11\1\1\uffff\2\1\2\uffff\2\1\4\uffff\1\1\1\17\2\1\1\uffff\1\1\2\uffff"+
			"\2\1\3\uffff\1\12\1\1\1\16\3\1\1\uffff\5\1\1\uffff\4\1\1\uffff\4\1\1"+
			"\uffff\1\1\1\11\2\1\1\uffff\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\4\1\2\uffff\4\1\1\uffff\1\22\5\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\4\1\2\uffff\2\1\2\uffff"+
			"\1\1",
			"\1\uffff",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\4\1\1\23"+
			"\1\uffff\1\1\1\26\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\2\1"+
			"\1\uffff\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1"+
			"\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3"+
			"\1\2\uffff\6\1\1\uffff\1\1\1\11\5\1\1\uffff\4\1\1\24\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\4\1\3\uffff\3\1\1\uffff\1\25\1\uffff\11\1\1\uffff\1\1\1"+
			"\uffff\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1"+
			"\1\3\uffff\4\1\2\uffff\1\1\2\uffff\2\1",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\10\1"+
			"\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff\1\1"+
			"\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11\1\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\4\1\3\uffff\3\1\1\uffff"+
			"\1\27\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13\uffff\1\1\3"+
			"\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\10\1"+
			"\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff\1\1"+
			"\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11\1\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\4\1\3\uffff\3\1\1\uffff"+
			"\1\31\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13\uffff\1\1\3"+
			"\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\10\1"+
			"\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff\1\1"+
			"\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11\1\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\4\1\3\uffff\3\1\1\uffff"+
			"\1\32\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13\uffff\1\1\3"+
			"\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"",
			"\1\43\1\uffff\1\36\1\1\5\uffff\1\43\1\1\3\uffff\1\43\2\uffff\3\1\3\uffff"+
			"\2\43\1\1\1\uffff\2\43\2\uffff\1\1\16\uffff\1\43\1\uffff\1\43\2\uffff"+
			"\1\1\1\uffff\1\1\1\43\4\uffff\1\1\3\uffff\1\43\4\uffff\1\43\1\uffff\1"+
			"\43\1\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\43\1\1\1\uffff\1\43\1\1\1\uffff"+
			"\1\43\1\uffff\1\1\1\uffff\1\1\1\uffff\1\33\2\uffff\1\43\1\uffff\1\43"+
			"\2\uffff\1\43\1\1\2\uffff\1\1\1\34\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\2\43\1\1\1\37\1\43\1\uffff\1\43\4\uffff\1\1\3\uffff\1\1"+
			"\6\uffff\2\43\1\35\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\1\1\1"+
			"\41\1\1\3\uffff\1\1\14\uffff\1\40\3\uffff\1\43\3\uffff\1\42",
			"\1\47\1\uffff\1\47\6\uffff\1\47\1\1\3\uffff\1\47\10\uffff\2\47\1\1\1"+
			"\uffff\2\47\21\uffff\1\47\1\uffff\1\47\2\uffff\1\1\1\uffff\1\1\1\47\4"+
			"\uffff\1\1\3\uffff\1\47\4\uffff\1\47\1\uffff\1\47\1\1\5\uffff\1\1\4\uffff"+
			"\1\47\1\1\1\uffff\1\47\1\1\1\uffff\1\47\1\uffff\1\1\1\uffff\1\1\1\uffff"+
			"\1\47\2\uffff\1\47\1\uffff\1\47\2\uffff\1\47\3\uffff\1\1\1\47\2\uffff"+
			"\1\1\5\uffff\1\1\4\uffff\2\47\1\uffff\2\47\1\uffff\1\47\4\uffff\1\50"+
			"\12\uffff\2\47\1\46\3\uffff\1\1\3\uffff\1\1\14\uffff\1\1\1\44\1\1\3\uffff"+
			"\1\1\14\uffff\1\47\3\uffff\1\47\3\uffff\1\45",
			"",
			"\3\1\1\uffff\1\1\2\uffff\2\1\2\uffff\3\1\1\uffff\6\1\1\15\1\uffff\5"+
			"\1\1\uffff\1\1\1\7\2\1\2\uffff\1\1\1\51\2\1\2\uffff\1\1\2\uffff\5\1\1"+
			"\10\11\1\1\uffff\2\1\2\uffff\2\1\4\uffff\1\1\1\17\2\1\1\uffff\1\1\2\uffff"+
			"\2\1\3\uffff\1\12\1\1\1\16\3\1\1\uffff\5\1\1\uffff\4\1\1\uffff\4\1\1"+
			"\uffff\1\1\1\11\2\1\1\uffff\2\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\4\1\2\uffff\4\1\1\uffff\1\52\5\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\2\1\2\uffff\4\1\2\uffff\2\1\2\uffff"+
			"\1\1",
			"\1\uffff",
			"\1\uffff",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\5\1\1\uffff"+
			"\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1\1\uffff"+
			"\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3\1\2\uffff"+
			"\6\1\1\uffff\1\1\1\11\5\1\1\uffff\4\1\1\53\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\4\1\3\uffff\3\1\1\uffff\1\54\1\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\2\uffff\2\1",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\4\1\1\55"+
			"\1\uffff\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1"+
			"\1\uffff\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1"+
			"\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3"+
			"\1\2\uffff\6\1\1\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2"+
			"\1\1\uffff\4\1\3\uffff\3\1\1\uffff\1\56\1\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\4\1\1\23"+
			"\1\uffff\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1"+
			"\1\uffff\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1"+
			"\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3"+
			"\1\2\uffff\6\1\1\uffff\1\1\1\11\5\1\1\uffff\4\1\1\24\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\4\1\3\uffff\3\1\1\uffff\1\57\1\uffff\11\1\1\uffff\1\1\1"+
			"\uffff\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1"+
			"\1\3\uffff\4\1\2\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\6\1\1\uffff"+
			"\4\1\1\60\1\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1"+
			"\10\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1\4"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff"+
			"\1\1\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11"+
			"\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\1\61\4\uffff\2\1\1\uffff\4\1\3\uffff"+
			"\3\1\1\uffff\1\62\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13"+
			"\uffff\1\1\3\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\65\2\uffff\4"+
			"\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\63\1\1\7\uffff\2\1\1\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\1"+
			"\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1"+
			"\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\5\1\2\uffff\4\1\1\uffff"+
			"\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\66\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\65\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\67\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\65\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\70\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\65\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\71\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\65\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\72\1\uffff\4\1\2\uffff\3\1\2\uffff\2\1\3\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\65\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\73\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\65\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\74\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\75",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\65\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\76\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\4\uffff\1\100\3\uffff\3\1\1"+
			"\uffff\2\1\3\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\77\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\101",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\4\uffff\1\100\3\uffff\3\1\1"+
			"\uffff\2\1\3\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\77\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\4\uffff\1\100\3\uffff\3\1\1"+
			"\uffff\2\1\3\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\77\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\1\20\uffff\1\14",
			"\1\uffff",
			"\1\uffff",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\4\1\1\102"+
			"\1\uffff\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1"+
			"\1\uffff\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1"+
			"\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3"+
			"\1\2\uffff\6\1\1\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2"+
			"\1\1\uffff\4\1\3\uffff\3\1\1\uffff\1\103\1\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\5\1\1\uffff"+
			"\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1\1\uffff"+
			"\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3\1\2\uffff"+
			"\6\1\1\uffff\1\1\1\11\5\1\1\uffff\4\1\1\104\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\4\1\3\uffff\3\1\1\uffff\1\105\1\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\1\uffff",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\10\1"+
			"\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff\1\1"+
			"\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11\1\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\4\1\1\106\4\uffff\2\1\1\uffff\4\1\3\uffff\3"+
			"\1\1\uffff\1\107\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13"+
			"\uffff\1\1\3\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\1\110\1\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1"+
			"\1\10\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1"+
			"\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff"+
			"\1\1\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11"+
			"\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\4\1\3\uffff"+
			"\3\1\1\uffff\1\111\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13"+
			"\uffff\1\1\3\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\114\1\uffff\1\114\6\uffff\1\114\4\uffff\1\114\10\uffff\2\114\2\uffff"+
			"\2\114\21\uffff\1\114\1\uffff\1\114\5\uffff\1\114\10\uffff\1\114\4\uffff"+
			"\1\114\1\uffff\1\114\13\uffff\1\114\2\uffff\1\114\2\uffff\1\114\5\uffff"+
			"\1\114\2\uffff\1\114\1\uffff\1\114\2\uffff\1\114\4\uffff\1\114\15\uffff"+
			"\2\114\1\uffff\2\114\1\uffff\1\114\17\uffff\3\114\25\uffff\1\112\21\uffff"+
			"\1\114\3\uffff\1\114\3\uffff\1\113",
			"\1\1\1\uffff\1\1\6\uffff\2\1\3\uffff\1\1\10\uffff\3\1\1\uffff\2\1\21"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\10\uffff\1\1\4\uffff\1"+
			"\1\1\uffff\2\1\5\uffff\1\1\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff"+
			"\2\1\10\uffff\1\115\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\17\uffff\3\1"+
			"\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff"+
			"\1\1\3\uffff\1\1",
			"\1\43\1\uffff\1\36\1\1\5\uffff\1\43\1\1\3\uffff\1\43\2\uffff\3\1\3\uffff"+
			"\2\43\1\1\1\uffff\2\43\2\uffff\1\1\16\uffff\1\43\1\uffff\1\43\2\uffff"+
			"\1\1\1\uffff\1\1\1\43\4\uffff\1\1\3\uffff\1\43\4\uffff\1\43\1\uffff\1"+
			"\43\1\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\43\1\1\1\uffff\1\43\1\1\1\uffff"+
			"\1\43\1\uffff\1\1\1\uffff\1\1\1\uffff\1\33\2\uffff\1\43\1\uffff\1\43"+
			"\2\uffff\1\43\1\1\2\uffff\1\1\1\34\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\2\43\1\1\1\37\1\43\1\uffff\1\43\4\uffff\1\1\3\uffff\1\1"+
			"\6\uffff\2\43\1\35\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\1\1\1"+
			"\41\1\1\3\uffff\1\1\14\uffff\1\40\3\uffff\1\43\3\uffff\1\42",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\65\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\116\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14"+
			"\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\2\1\3\uffff\3\1\1\uffff"+
			"\2\1\3\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff"+
			"\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff"+
			"\1\1\3\uffff\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2"+
			"\uffff\2\1",
			"\1\122\1\uffff\1\122\6\uffff\1\122\1\1\3\uffff\1\122\10\uffff\2\122"+
			"\1\1\1\uffff\2\122\21\uffff\1\122\1\uffff\1\122\2\uffff\1\1\1\uffff\1"+
			"\1\1\122\4\uffff\1\1\3\uffff\1\122\4\uffff\1\122\1\uffff\1\122\1\1\5"+
			"\uffff\1\1\4\uffff\1\122\1\1\1\uffff\1\122\1\1\1\uffff\1\122\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\122\2\uffff\1\122\1\uffff\1\122\2\uffff\1"+
			"\122\3\uffff\1\1\1\122\2\uffff\1\1\5\uffff\1\1\4\uffff\2\122\1\uffff"+
			"\2\122\1\uffff\1\122\4\uffff\1\1\12\uffff\2\122\1\121\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\1\1\1\117\1\1\3\uffff\1\1\14\uffff\1\122\3\uffff\1\122"+
			"\3\uffff\1\120",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\4\uffff\1\100\3\uffff\3\1\1"+
			"\uffff\2\1\3\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\77\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\5\1\1\uffff"+
			"\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1\1\uffff"+
			"\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3\1\2\uffff"+
			"\6\1\1\uffff\1\1\1\11\5\1\1\uffff\4\1\1\123\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\4\1\3\uffff\3\1\1\uffff\1\124\1\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\4\1\1\125"+
			"\1\uffff\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1"+
			"\1\uffff\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1"+
			"\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3"+
			"\1\2\uffff\6\1\1\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2"+
			"\1\1\uffff\4\1\3\uffff\3\1\1\uffff\1\126\1\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\1\127\1\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1"+
			"\1\10\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1"+
			"\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff"+
			"\1\1\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11"+
			"\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\4\1\3\uffff"+
			"\3\1\1\uffff\1\130\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13"+
			"\uffff\1\1\3\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\10\1"+
			"\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff\1\1"+
			"\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11\1\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\4\1\1\131\4\uffff\2\1\1\uffff\4\1\3\uffff\3"+
			"\1\1\uffff\1\132\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13"+
			"\uffff\1\1\3\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\134",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\14\1\uffff\4\1\2\uffff"+
			"\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3"+
			"\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\4\uffff\1\100\3\uffff\3\1\1"+
			"\uffff\2\1\3\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\50\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\136",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\4\uffff\1\100\3\uffff\3\1\1"+
			"\uffff\2\1\3\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\50\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\4\uffff\1\100\3\uffff\3\1\1"+
			"\uffff\2\1\3\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\50\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\4\1\1\102"+
			"\1\uffff\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1"+
			"\1\uffff\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1"+
			"\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3"+
			"\1\2\uffff\6\1\1\uffff\1\1\1\11\5\1\1\uffff\5\1\1\uffff\1\1\2\uffff\2"+
			"\1\1\uffff\4\1\3\uffff\3\1\1\uffff\1\137\1\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\3\1\2\uffff\6\1\1\uffff\5\1\1\uffff"+
			"\1\1\1\26\2\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\3\uffff\2\1\1\uffff"+
			"\1\1\1\10\1\1\1\uffff\5\1\3\uffff\3\1\1\uffff\2\1\4\uffff\4\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\12\11\1\1\uffff\3\1\2\uffff"+
			"\6\1\1\uffff\1\1\1\11\5\1\1\uffff\4\1\1\104\1\uffff\1\1\2\uffff\2\1\1"+
			"\uffff\4\1\3\uffff\3\1\1\uffff\1\140\1\uffff\11\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\14\uffff\3\1\3\uffff\1\1\6\uffff\1\1\3\uffff"+
			"\4\1\2\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\2\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\10\1"+
			"\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1\4\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff\1\1"+
			"\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11\1\uffff"+
			"\1\1\1\uffff\2\1\1\uffff\4\1\1\106\4\uffff\2\1\1\uffff\4\1\3\uffff\3"+
			"\1\1\uffff\1\141\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13"+
			"\uffff\1\1\3\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\2\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\4\1\3\uffff"+
			"\4\1\1\110\1\uffff\1\1\1\30\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1"+
			"\1\10\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\3\uffff\2\1\3\uffff\1\1"+
			"\4\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\12\1\1\2\uffff"+
			"\1\1\2\uffff\2\1\4\uffff\1\1\2\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\11"+
			"\1\uffff\1\1\1\uffff\2\1\1\uffff\4\1\5\uffff\2\1\1\uffff\4\1\3\uffff"+
			"\3\1\1\uffff\1\142\5\uffff\5\1\1\uffff\1\1\3\uffff\1\1\17\uffff\1\1\13"+
			"\uffff\1\1\3\uffff\4\1\2\uffff\1\1\3\uffff\1\1",
			"\1\uffff",
			"\1\153\1\uffff\1\146\1\1\5\uffff\1\153\1\1\3\uffff\1\153\2\uffff\3\1"+
			"\3\uffff\2\153\1\1\1\uffff\2\153\2\uffff\1\1\16\uffff\1\153\1\uffff\1"+
			"\153\2\uffff\1\1\1\uffff\1\1\1\153\4\uffff\1\1\3\uffff\1\153\4\uffff"+
			"\1\153\1\uffff\1\153\1\1\2\uffff\1\1\2\uffff\1\1\4\uffff\1\153\1\1\1"+
			"\uffff\1\153\1\1\1\uffff\1\153\1\uffff\1\1\1\uffff\1\1\1\uffff\1\143"+
			"\2\uffff\1\153\1\uffff\1\153\2\uffff\1\153\1\1\2\uffff\1\1\1\144\1\1"+
			"\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2\153\1\1\1\147\1\153\1"+
			"\uffff\1\153\4\uffff\1\1\3\uffff\1\1\6\uffff\2\153\1\145\3\uffff\1\1"+
			"\1\uffff\1\1\1\uffff\1\1\14\uffff\1\1\1\151\1\1\3\uffff\1\1\14\uffff"+
			"\1\150\3\uffff\1\153\3\uffff\1\152",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\157\1\uffff\1\157\6\uffff\1\157\1\1\3\uffff\1\157\3\uffff\1\1\4\uffff"+
			"\2\157\1\1\1\uffff\2\157\21\uffff\1\157\1\uffff\1\157\2\uffff\1\1\1\uffff"+
			"\1\1\1\157\4\uffff\1\1\3\uffff\1\157\4\uffff\1\157\1\uffff\1\157\1\1"+
			"\5\uffff\1\1\4\uffff\1\157\1\1\1\uffff\1\157\1\1\1\uffff\1\157\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\157\2\uffff\1\157\1\uffff\1\157\2\uffff\1"+
			"\157\3\uffff\1\1\1\157\2\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff\2"+
			"\157\1\uffff\2\157\1\uffff\1\157\4\uffff\1\1\12\uffff\2\157\1\156\3\uffff"+
			"\1\1\3\uffff\1\1\14\uffff\1\1\1\154\1\1\3\uffff\1\1\14\uffff\1\157\3"+
			"\uffff\1\157\3\uffff\1\155",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\4\uffff\1\100\3\uffff\3\1\1"+
			"\uffff\2\1\3\uffff\1\1\1\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1"+
			"\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\4\uffff\2\1\1\uffff"+
			"\2\1\1\uffff\1\1\4\uffff\1\50\4\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff"+
			"\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\3\1\1\uffff\1\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\1\133\2\uffff\4"+
			"\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\63\1\1\7\uffff\2\1\1\uffff\1\1\1"+
			"\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\1"+
			"\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1"+
			"\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\5\1\2\uffff\4\1\1\uffff"+
			"\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\14\1\uffff"+
			"\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3\uffff\1\1\14"+
			"\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\2\uffff\2\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\160",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\161\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\162\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\163",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\161\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\162\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\161\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\162\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\133\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\63\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\64\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\166\1\uffff\1\166\6\uffff\1\166\4\uffff\1\166\10\uffff\2\166\2\uffff"+
			"\2\166\21\uffff\1\166\1\uffff\1\166\5\uffff\1\166\10\uffff\1\166\4\uffff"+
			"\1\166\1\uffff\1\166\13\uffff\1\166\2\uffff\1\166\2\uffff\1\166\5\uffff"+
			"\1\166\2\uffff\1\166\1\uffff\1\166\2\uffff\1\166\4\uffff\1\166\15\uffff"+
			"\2\166\1\uffff\2\166\1\uffff\1\166\17\uffff\3\166\25\uffff\1\164\21\uffff"+
			"\1\166\3\uffff\1\166\3\uffff\1\165",
			"\1\1\1\uffff\1\1\6\uffff\2\1\3\uffff\1\1\10\uffff\3\1\1\uffff\2\1\21"+
			"\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\10\uffff\1\1\4\uffff\1"+
			"\1\1\uffff\2\1\5\uffff\1\1\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff"+
			"\2\1\10\uffff\1\167\4\uffff\2\1\1\uffff\2\1\1\uffff\1\1\17\uffff\3\1"+
			"\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3\uffff"+
			"\1\1\3\uffff\1\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\161\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\162\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\161\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\162\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\1\170",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\161\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\162\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\2\1\10\uffff\1\1\1\uffff\1\1\1\uffff"+
			"\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff\4\1\3\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff\1\1\1\uffff\3\1\2\uffff"+
			"\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\2\uffff"+
			"\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\14\1\uffff\4\1\2\uffff"+
			"\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3\uffff\1\1\14\uffff\1\1\3"+
			"\uffff\1\1\2\uffff\2\1",
			"\3\1\1\uffff\1\1\4\uffff\2\1\3\uffff\1\1\3\uffff\1\1\1\135\3\uffff\3"+
			"\1\1\uffff\2\1\3\uffff\1\1\1\uffff\1\161\1\1\10\uffff\1\1\1\uffff\1\1"+
			"\1\uffff\1\1\2\uffff\1\1\1\uffff\2\1\4\uffff\2\1\1\uffff\2\1\4\uffff"+
			"\1\1\1\162\2\1\3\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\7\1\1\uffff"+
			"\1\1\1\uffff\3\1\2\uffff\3\1\2\uffff\1\1\3\uffff\3\1\1\uffff\1\1\5\uffff"+
			"\1\1\1\uffff\1\1\2\uffff\2\1\1\uffff\2\1\1\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\14\1\uffff\4\1\2\uffff\3\1\3\uffff\1\1\3\uffff\1\1\14\uffff\3\1\3"+
			"\uffff\1\1\14\uffff\1\1\3\uffff\1\1\2\uffff\2\1"
	};

	static final short[] DFA281_eot = DFA.unpackEncodedString(DFA281_eotS);
	static final short[] DFA281_eof = DFA.unpackEncodedString(DFA281_eofS);
	static final char[] DFA281_min = DFA.unpackEncodedStringToUnsignedChars(DFA281_minS);
	static final char[] DFA281_max = DFA.unpackEncodedStringToUnsignedChars(DFA281_maxS);
	static final short[] DFA281_accept = DFA.unpackEncodedString(DFA281_acceptS);
	static final short[] DFA281_special = DFA.unpackEncodedString(DFA281_specialS);
	static final short[][] DFA281_transition;

	static {
		int numStates = DFA281_transitionS.length;
		DFA281_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA281_transition[i] = DFA.unpackEncodedString(DFA281_transitionS[i]);
		}
	}

	protected class DFA281 extends DFA {

		public DFA281(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 281;
			this.eot = DFA281_eot;
			this.eof = DFA281_eof;
			this.min = DFA281_min;
			this.max = DFA281_max;
			this.accept = DFA281_accept;
			this.special = DFA281_special;
			this.transition = DFA281_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 717:38: ( '.' ident )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA281_46 = input.LA(1);
						 
						int index281_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_46);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA281_21 = input.LA(1);
						 
						int index281_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_21);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA281_23 = input.LA(1);
						 
						int index281_23 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_23);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA281_71 = input.LA(1);
						 
						int index281_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_71);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA281_90 = input.LA(1);
						 
						int index281_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_90);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA281_96 = input.LA(1);
						 
						int index281_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_96);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA281_25 = input.LA(1);
						 
						int index281_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_25);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA281_26 = input.LA(1);
						 
						int index281_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_26);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA281_84 = input.LA(1);
						 
						int index281_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_84);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA281_98 = input.LA(1);
						 
						int index281_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_98);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA281_44 = input.LA(1);
						 
						int index281_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_44);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA281_67 = input.LA(1);
						 
						int index281_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_67);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA281_69 = input.LA(1);
						 
						int index281_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_69);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA281_47 = input.LA(1);
						 
						int index281_47 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_47);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA281_88 = input.LA(1);
						 
						int index281_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_88);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA281_86 = input.LA(1);
						 
						int index281_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_86);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA281_95 = input.LA(1);
						 
						int index281_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_95);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA281_50 = input.LA(1);
						 
						int index281_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_50);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA281_97 = input.LA(1);
						 
						int index281_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_97);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA281_73 = input.LA(1);
						 
						int index281_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_73);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA281_78 = input.LA(1);
						 
						int index281_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_78);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA281_55 = input.LA(1);
						 
						int index281_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_55);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA281_54 = input.LA(1);
						 
						int index281_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_54);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA281_56 = input.LA(1);
						 
						int index281_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_56);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA281_57 = input.LA(1);
						 
						int index281_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_57);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA281_62 = input.LA(1);
						 
						int index281_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_62);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA281_58 = input.LA(1);
						 
						int index281_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_58);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA281_59 = input.LA(1);
						 
						int index281_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_59);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA281_60 = input.LA(1);
						 
						int index281_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_60);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA281_6 = input.LA(1);
						 
						int index281_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 15;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_6);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA281_17 = input.LA(1);
						 
						int index281_17 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_17);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA281_41 = input.LA(1);
						 
						int index281_41 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_41);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA281_11 = input.LA(1);
						 
						int index281_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 15;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_11);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA281_18 = input.LA(1);
						 
						int index281_18 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_18);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA281_42 = input.LA(1);
						 
						int index281_42 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred461_Delphi()) ) {s = 12;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index281_42);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 281, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_program_in_file84 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_library_in_file88 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unit_in_file92 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageE_in_file96 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_programHead_in_program159 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x2800000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_program164 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x2000000022000200L});
	public static final BitSet FOLLOW_block_in_program168 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_program170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROGRAM_in_programHead224 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceName_in_programHead226 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_programParmSeq_in_programHead229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_programHead233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_programParmSeq284 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_programParmSeq287 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_programParmSeq290 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_programParmSeq292 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_programParmSeq299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_libraryHead_in_library357 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x2800000022000200L});
	public static final BitSet FOLLOW_usesFileClause_in_library360 = new BitSet(new long[]{0x0080010818880800L,0x00100000000C0002L,0x2000000022000200L});
	public static final BitSet FOLLOW_block_in_library364 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_library366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_libraryHead420 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceName_in_libraryHead422 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_libraryHead425 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_libraryHead429 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_packageHead_in_packageE494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_requiresClause_in_packageE496 = new BitSet(new long[]{0x0002000020000000L});
	public static final BitSet FOLLOW_containsClause_in_packageE499 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_packageE503 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_packageE505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKAGE_in_packageHead559 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceName_in_packageHead561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_packageHead563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unitHead_in_unit624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_unitInterface_in_unit626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_unitImplementation_in_unit628 = new BitSet(new long[]{0x0002000000080000L,0x0000000000004000L});
	public static final BitSet FOLLOW_unitBlock_in_unit630 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_unit632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNIT_in_unitHead689 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceName_in_unitHead691 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_unitHead694 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_unitHead698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERFACE_in_unitInterface763 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x2800000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitInterface766 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x2000000022000200L});
	public static final BitSet FOLLOW_interfaceDecl_in_unitInterface771 = new BitSet(new long[]{0x0080000818800002L,0x0010000000080002L,0x2000000022000200L});
	public static final BitSet FOLLOW_IMPLEMENTATION_in_unitImplementation836 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x2800000022000200L});
	public static final BitSet FOLLOW_usesClause_in_unitImplementation839 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x2000000022000200L});
	public static final BitSet FOLLOW_declSection_in_unitImplementation844 = new BitSet(new long[]{0x0080000818800002L,0x00100000000C0002L,0x2000000022000200L});
	public static final BitSet FOLLOW_unitInitialization_in_unitBlock918 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_unitBlock920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_unitBlock953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_END_in_unitBlock986 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INITIALIZATION_in_unitInitialization1033 = new BitSet(new long[]{0xBA500006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_unitInitialization1035 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_unitFinalization_in_unitInitialization1038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FINALIZATION_in_unitFinalization1089 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_unitFinalization1091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTAINS_in_containsClause1145 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceFileNameList_in_containsClause1147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REQUIRES_in_requiresClause1198 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceNameList_in_requiresClause1200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesClause1255 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceNameList_in_usesClause1257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USES_in_usesFileClause1316 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceFileNameList_in_usesFileClause1318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1370 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceFileNameList1373 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceFileName_in_namespaceFileNameList1375 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceFileNameList1379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceFileName1436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_namespaceFileName1439 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_namespaceFileName1441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1502 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_namespaceNameList1505 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespaceName_in_namespaceNameList1507 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_namespaceNameList1511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_block1584 = new BitSet(new long[]{0x0080000818880802L,0x00100000000C0002L,0x2000000022000200L});
	public static final BitSet FOLLOW_blockBody_in_block1589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_blockBody1647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_blockBody1680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_labelDeclSection_in_declSection1734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_declSection1767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_declSection1800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_declSection1833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_declSection1866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_declSection1899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_declSection1932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_declSection1965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_interfaceDecl2017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSection_in_interfaceDecl2050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varSection_in_interfaceDecl2083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_interfaceDecl2116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportsSection_in_interfaceDecl2149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_interfaceDecl2182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_interfaceDecl2215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LABEL_in_labelDeclSection2264 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000700000E0002DL,0x0000000000000008L});
	public static final BitSet FOLLOW_label_in_labelDeclSection2266 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_labelDeclSection2269 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000700000E0002DL,0x0000000000000008L});
	public static final BitSet FOLLOW_label_in_labelDeclSection2271 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_labelDeclSection2275 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constKey_in_constSection2328 = new BitSet(new long[]{0x1050000660108142L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constDeclaration_in_constSection2331 = new BitSet(new long[]{0x1050000660108142L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_constDeclaration2486 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_constDeclaration2490 = new BitSet(new long[]{0x0004000001000000L});
	public static final BitSet FOLLOW_COLON_in_constDeclaration2493 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_constDeclaration2495 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_constDeclaration2499 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_constDeclaration2501 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_constDeclaration2504 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_constDeclaration2508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeSection2575 = new BitSet(new long[]{0x1050000660108140L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2577 = new BitSet(new long[]{0x1050000660108142L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDeclaration_in_typeSection2580 = new BitSet(new long[]{0x1050000660108142L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_TYPE_in_innerTypeSection2644 = new BitSet(new long[]{0x1050000660108142L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDeclaration_in_innerTypeSection2647 = new BitSet(new long[]{0x1050000660108142L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_typeDeclaration2711 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_genericTypeIdent_in_typeDeclaration2715 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_EQUAL_in_typeDeclaration2717 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_typeDeclaration2719 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_typeDeclaration2722 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_typeDeclaration2726 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varKey_in_varSection2803 = new BitSet(new long[]{0x1050000660108140L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2805 = new BitSet(new long[]{0x1050000660108142L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_varDeclaration_in_varSection2808 = new BitSet(new long[]{0x1050000660108142L,0x8002129049081420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_varDeclaration2968 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_identListFlat_in_varDeclaration2972 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_varDeclaration2974 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_varDeclaration2976 = new BitSet(new long[]{0x0024000400000010L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_varValueSpec_in_varDeclaration2979 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_varDeclaration2984 = new BitSet(new long[]{0x0020000400000000L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_varDeclaration2988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec3060 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_varValueSpec3062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_varValueSpec3095 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_varValueSpec3130 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_varValueSpec3132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPORTS_in_exportsSection3183 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_exportsSection3185 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3187 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_COMMA_in_exportsSection3190 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_exportsSection3192 = new BitSet(new long[]{0x0000000002000000L,0x0000000042001000L,0x0000000000002100L});
	public static final BitSet FOLLOW_exportItem_in_exportsSection3194 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_exportsSection3198 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_exportItem3254 = new BitSet(new long[]{0x1050000668108140L,0x8002129049081420L,0xA000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_formalParameterList_in_exportItem3257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_exportItem3261 = new BitSet(new long[]{0x0000000000000002L,0x0000000040001000L,0x0000000000000100L});
	public static final BitSet FOLLOW_INDEX_in_exportItem3266 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_exportItem3268 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_NAME_in_exportItem3273 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_exportItem3275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_RESIDENT_in_exportItem3280 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_typeDecl3342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_typeDecl3375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_typeDecl3408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_typeDecl3441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_typeDecl3474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_typeDecl3507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_typeDecl3541 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeId_in_typeDecl3545 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericPostfix_in_typeDecl3548 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleType_in_typeDecl3583 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACKED_in_strucType3640 = new BitSet(new long[]{0x0800002000800200L,0x0000001000010000L,0x0000000000004002L});
	public static final BitSet FOLLOW_strucTypePart_in_strucType3644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arrayType_in_strucTypePart3700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setType_in_strucTypePart3733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fileType_in_strucTypePart3766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classDecl_in_strucTypePart3799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ARRAY_in_arrayType3857 = new BitSet(new long[]{0x0000000000000000L,0x0000002000080000L});
	public static final BitSet FOLLOW_LBRACK_in_arrayType3860 = new BitSet(new long[]{0x1A500006E2118140L,0x941312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3863 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_arrayType3868 = new BitSet(new long[]{0x1A500006E2118140L,0x941312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_arrayIndex_in_arrayType3871 = new BitSet(new long[]{0x0000000002000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_arrayType3877 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_arrayType3881 = new BitSet(new long[]{0x1A500026E8918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_arraySubType_in_arrayType3883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeId_in_arrayIndex4009 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_arrayIndex4042 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_arrayIndex4044 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_arrayIndex4046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONST_in_arraySubType4100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDecl_in_arraySubType4133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_in_setType4191 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_setType4193 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_setType4195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FILE_in_fileType4269 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_fileType4272 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_fileType4274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_pointerType4330 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_pointerType4332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER_in_pointerType4365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_stringType4420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_stringType4423 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_stringType4425 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_stringType4427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_stringType4467 = new BitSet(new long[]{0x0000000000000100L});
	public static final BitSet FOLLOW_ANSISTRING_in_stringType4471 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_codePageNumber_in_stringType4474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_codePageNumber4527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000500000000000L});
	public static final BitSet FOLLOW_intNum_in_codePageNumber4529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_codePageNumber4531 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_procedureType4583 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_procedureType4616 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureReference_in_procedureType4649 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_methodType4704 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_methodType4706 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_OBJECT_in_methodType4708 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_simpleProcedureType4754 = new BitSet(new long[]{0x0040000000400002L,0x0000400000000000L,0x0000000000102808L});
	public static final BitSet FOLLOW_SEMI_in_simpleProcedureType4759 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConvention_in_simpleProcedureType4763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REFERENCE_in_procedureReference4812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_procedureReference4814 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000002L});
	public static final BitSet FOLLOW_procedureTypeHeading_in_procedureReference4816 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procedureTypeHeading4861 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4864 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_procedureTypeHeading4868 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_procedureTypeHeading4871 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_procedureTypeHeading4875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_procedureTypeHeading4923 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procedureTypeHeading4926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIANT_in_variantType4982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_simpleType5038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enumType_in_simpleType5071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_subRangeType5124 = new BitSet(new long[]{0x0000020000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_subRangeType5126 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_subRangeType5128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_enumType5185 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_enumType5187 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5190 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_enumType5192 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_enumType5197 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_enumType5199 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_EQUAL_in_enumType5202 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_enumType5204 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_enumType5211 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_typeId5270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_qualifiedIdent_in_genericTypeIdent5322 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_genericTypeIdent5325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleGenericDefinition_in_genericDefinition5383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_complexGenericDefinition_in_genericDefinition5416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constrainedGenericDefinition_in_genericDefinition5449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_simpleGenericDefinition5491 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_simpleGenericDefinition5493 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_simpleGenericDefinition5496 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_simpleGenericDefinition5498 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_simpleGenericDefinition5502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_complexGenericDefinition5543 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_qualifiedIdent_in_complexGenericDefinition5545 = new BitSet(new long[]{0x0000000002000000L,0x0000000004000010L});
	public static final BitSet FOLLOW_simpleGenericDefinition_in_complexGenericDefinition5548 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_complexGenericDefinition5553 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_qualifiedIdent_in_complexGenericDefinition5555 = new BitSet(new long[]{0x0000000002000000L,0x0000000004000010L});
	public static final BitSet FOLLOW_simpleGenericDefinition_in_complexGenericDefinition5558 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_complexGenericDefinition5564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_constrainedGenericDefinition5601 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_constrainedGenericDefinition5606 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constrainedGeneric_in_constrainedGenericDefinition5608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_GT_in_constrainedGenericDefinition5612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_constrainedGeneric5659 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_constrainedGeneric5662 = new BitSet(new long[]{0x1050000670908140L,0x8002129049001420L,0x8000200000E0002FL,0x0000000000000088L});
	public static final BitSet FOLLOW_genericConstraint_in_constrainedGeneric5664 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_constrainedGeneric5667 = new BitSet(new long[]{0x1050000670908140L,0x8002129049001420L,0x8000200000E0002FL,0x0000000000000088L});
	public static final BitSet FOLLOW_genericConstraint_in_constrainedGeneric5669 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_ident_in_genericConstraint5721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_genericConstraint5754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_genericConstraint5787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTRUCTOR_in_genericConstraint5820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_genericPostfix5871 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5873 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_genericPostfix5876 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_genericPostfix5878 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_genericPostfix5882 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_classDecl5941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_classDecl5974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classHelperDecl_in_classDecl6015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceTypeDecl_in_classDecl6056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_objectDecl_in_classDecl6097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordDecl_in_classDecl6138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordHelperDecl_in_classDecl6179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeTypeDecl6235 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_classTypeTypeDecl6237 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeId_in_classTypeTypeDecl6239 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6299 = new BitSet(new long[]{0x1052000E78928160L,0x83DA12904B081422L,0xA000200022E0122DL,0x0000000000000088L});
	public static final BitSet FOLLOW_classState_in_classTypeDecl6302 = new BitSet(new long[]{0x1052000E78928140L,0x83DA12904B081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6307 = new BitSet(new long[]{0x1052000E78928140L,0x83DA129049081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_classItem_in_classTypeDecl6312 = new BitSet(new long[]{0x1052000E78928140L,0x83DA129049081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_END_in_classTypeDecl6316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classTypeDecl6367 = new BitSet(new long[]{0x0000000000000022L,0x0000000002000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_classState_in_classTypeDecl6370 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classTypeDecl6375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_classParent6532 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6534 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_classParent6537 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classParent6539 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_classParent6543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classItem6611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classItem6644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_classItem6677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classItem6710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_classItem6743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_innerTypeSection_in_classItem6776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classItem6810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classItem6814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperDecl6864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_classHelperDecl6866 = new BitSet(new long[]{0x8000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_classHelperDecl6869 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_classHelperDecl6873 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeId_in_classHelperDecl6875 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x2000000002400000L});
	public static final BitSet FOLLOW_classHelperItem_in_classHelperDecl6878 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x2000000002400000L});
	public static final BitSet FOLLOW_END_in_classHelperDecl6882 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_classHelperItem6947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_classHelperItem6980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_classHelperItem7013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classHelperItem7047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000002000000L});
	public static final BitSet FOLLOW_varSection_in_classHelperItem7051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7099 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7102 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_interfaceTypeDecl7107 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_interfaceTypeDecl7112 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_interfaceTypeDecl7116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_interfaceTypeDecl7207 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_classParent_in_interfaceTypeDecl7210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_interfaceGuid7393 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_interfaceGuid7395 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_interfaceGuid7397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_interfaceItem7453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_interfaceItem7487 = new BitSet(new long[]{0x0000000000800000L,0x0040000000080000L});
	public static final BitSet FOLLOW_classProperty_in_interfaceItem7491 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OBJECT_in_objectDecl7546 = new BitSet(new long[]{0x1052000E70928140L,0x839A12904B081422L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_classParent_in_objectDecl7549 = new BitSet(new long[]{0x1052000E70928140L,0x839A129049081422L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_objectItem_in_objectDecl7554 = new BitSet(new long[]{0x1052000E70928140L,0x839A129049081422L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_END_in_objectDecl7558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_objectItem7627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_objectItem7660 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_objectItem7693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_recordDecl7748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantRecord_in_recordDecl7781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_simpleRecord7834 = new BitSet(new long[]{0x1052000E78928140L,0x83DA129049081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordField_in_simpleRecord7837 = new BitSet(new long[]{0x1052000E78928140L,0x83DA129049081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordItem_in_simpleRecord7842 = new BitSet(new long[]{0x1052000E78928140L,0x83DA129049081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_END_in_simpleRecord7846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_variantRecord7912 = new BitSet(new long[]{0x1050000660308140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordField_in_variantRecord7915 = new BitSet(new long[]{0x1050000660308140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordVariantSection_in_variantRecord7919 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_variantRecord7921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordItem7987 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordItem8025 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordItem8058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constSection_in_recordItem8091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_innerTypeSection_in_recordItem8124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_recordItem8157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_recordItem8191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000002000000L});
	public static final BitSet FOLLOW_varSection_in_recordItem8195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identList_in_recordField8249 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordField8251 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_recordField8253 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_hintingDirective_in_recordField8256 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordField8261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_recordVariantSection8349 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_recordVariantSection8352 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariantSection8354 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_qualifiedIdent_in_recordVariantSection8358 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_recordVariantSection8360 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordVariant_in_recordVariantSection8363 = new BitSet(new long[]{0x1A500006E0118142L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expressionList_in_recordVariant8417 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordVariant8419 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_recordVariant8421 = new BitSet(new long[]{0x1050000660308140L,0x8002129049001420L,0x8000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordField_in_recordVariant8424 = new BitSet(new long[]{0x1050000660308140L,0x8002129049001420L,0x8000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordVariantSection_in_recordVariant8429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_recordVariant8433 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordVariant8436 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_in_recordHelperDecl8487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_HELPER_in_recordHelperDecl8489 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_FOR_in_recordHelperDecl8491 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeId_in_recordHelperDecl8493 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x0000000000400000L});
	public static final BitSet FOLLOW_recordHelperItem_in_recordHelperDecl8496 = new BitSet(new long[]{0x0002000810820000L,0x03D8008000080002L,0x0000000000400000L});
	public static final BitSet FOLLOW_END_in_recordHelperDecl8500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_recordHelperItem8549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_recordHelperItem8582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_recordHelperItem8615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8670 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8675 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_classMethod8679 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_classMethod8681 = new BitSet(new long[]{0x1460201400401020L,0x0000CC008F808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8684 = new BitSet(new long[]{0x1460201400401020L,0x0000CC008B808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8689 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_methodDirectiveSection_in_classMethod8693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8795 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_classMethod8804 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_classMethod8806 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8809 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8814 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod8818 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8821 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_classMethod8825 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_methodDirectiveSection_in_classMethod8827 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8939 = new BitSet(new long[]{0x0000000000800000L,0x0000008000000000L});
	public static final BitSet FOLLOW_CLASS_in_classMethod8944 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_classMethod8948 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_classMethod8950 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_classMethod8953 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_classMethod8958 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classMethod8962 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_classMethod8965 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_classMethod8969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classMethod8971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_classField9100 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_identList_in_classField9104 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_classField9106 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_classField9108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classField9110 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L});
	public static final BitSet FOLLOW_hintingDirective_in_classField9113 = new BitSet(new long[]{0x0020000400000002L,0x0000800000800000L});
	public static final BitSet FOLLOW_customAttribute_in_classProperty9220 = new BitSet(new long[]{0x0000000000800000L,0x0040000000000000L});
	public static final BitSet FOLLOW_CLASS_in_classProperty9225 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_PROPERTY_in_classProperty9229 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_classProperty9231 = new BitSet(new long[]{0x0000001201000000L,0x8000000200081400L,0x0000000000202001L,0x0000000000000018L});
	public static final BitSet FOLLOW_classPropertyArray_in_classProperty9234 = new BitSet(new long[]{0x0000001201000000L,0x8000000200001400L,0x0000000000202001L,0x0000000000000018L});
	public static final BitSet FOLLOW_COLON_in_classProperty9239 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_genericTypeIdent_in_classProperty9241 = new BitSet(new long[]{0x0000001200000000L,0x8000000200001400L,0x0000000000202001L,0x0000000000000018L});
	public static final BitSet FOLLOW_classPropertyIndex_in_classProperty9246 = new BitSet(new long[]{0x0000001200000000L,0x8000000200000400L,0x0000000000202001L,0x0000000000000018L});
	public static final BitSet FOLLOW_classPropertySpecifier_in_classProperty9251 = new BitSet(new long[]{0x0000001200000000L,0x8000000200000400L,0x0000000000202001L,0x0000000000000018L});
	public static final BitSet FOLLOW_SEMI_in_classProperty9255 = new BitSet(new long[]{0x0000000200000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_classPropertyEndSpecifier_in_classProperty9258 = new BitSet(new long[]{0x0000000200000002L,0x0000000200000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyArray9424 = new BitSet(new long[]{0x1050000668108140L,0x8002129049081420L,0xA000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_formalParameterList_in_classPropertyArray9426 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyArray9428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_classPropertyIndex9475 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_classPropertyIndex9477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyIndex9480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyReadWrite_in_classPropertySpecifier9527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classPropertyDispInterface_in_classPropertySpecifier9563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertySpecifier9596 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9631 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_classPropertySpecifier9633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertySpecifier9666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertySpecifier9715 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPLEMENTS_in_classPropertySpecifier9748 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeId_in_classPropertySpecifier9750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STORED_in_classPropertyEndSpecifier9790 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9831 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_classPropertyEndSpecifier9833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9835 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_classPropertyEndSpecifier9868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NODEFAULT_in_classPropertyEndSpecifier9903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyEndSpecifier9905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_in_classPropertyReadWrite9949 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite9951 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite9954 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite9956 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite9958 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITE_in_classPropertyReadWrite10032 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_qualifiedIdent_in_classPropertyReadWrite10034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_classPropertyReadWrite10037 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_classPropertyReadWrite10039 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_classPropertyReadWrite10041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READONLY_in_classPropertyDispInterface10120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10122 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WRITEONLY_in_classPropertyDispInterface10155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_classPropertyDispInterface10157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_classPropertyDispInterface10190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10246 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_PROTECTED_in_visibility10250 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRICT_in_visibility10284 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_PRIVATE_in_visibility10288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLIC_in_visibility10321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PUBLISHED_in_visibility10354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTOMATED_in_visibility10387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_exportedProcHeading10441 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10443 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10446 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_exportedProcHeading10450 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_exportedProcHeading10453 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_exportedProcHeading10457 = new BitSet(new long[]{0x0560000400401000L,0x0000C40081808001L,0x4200000000102808L});
	public static final BitSet FOLLOW_functionDirectiveSection_in_exportedProcHeading10459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_exportedProcHeading10492 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_exportedProcHeading10494 = new BitSet(new long[]{0x0560000400401000L,0x0000C40083808001L,0x4200000000102808L});
	public static final BitSet FOLLOW_formalParameterSection_in_exportedProcHeading10497 = new BitSet(new long[]{0x0560000400401000L,0x0000C40081808001L,0x4200000000102808L});
	public static final BitSet FOLLOW_functionDirectiveSection_in_exportedProcHeading10501 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDeclHeading_in_methodDecl10556 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_methodDirectiveSection_in_methodDecl10558 = new BitSet(new long[]{0x0080000818880802L,0x00100000000C0002L,0x2000000022002200L});
	public static final BitSet FOLLOW_methodBody_in_methodDecl10561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10621 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10626 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_methodDeclHeading10631 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10633 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10734 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_methodDeclHeading10743 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10745 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10748 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading10753 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10756 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading10760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10869 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_CLASS_in_methodDeclHeading10873 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_OPERATOR_in_methodDeclHeading10875 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_methodName_in_methodDeclHeading10877 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_methodDeclHeading10880 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_methodDeclHeading10885 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_methodDeclHeading10888 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_methodDeclHeading10892 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_methodName11141 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11144 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_methodName11149 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_methodName11151 = new BitSet(new long[]{0x0000010000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11154 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_methodName11160 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_methodName11162 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericDefinition_in_methodName11165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDeclHeading_in_procDecl11224 = new BitSet(new long[]{0x0560000400401000L,0x0000C40081808001L,0x4200000000102808L});
	public static final BitSet FOLLOW_functionDirectiveSection_in_procDecl11226 = new BitSet(new long[]{0x0080000818880802L,0x00100000000C0002L,0x2000000022002200L});
	public static final BitSet FOLLOW_procBody_in_procDecl11229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11295 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_procDeclHeading11299 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11301 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_procDeclHeading11404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_procDeclHeading11408 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_procDeclHeading11410 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_procDeclHeading11413 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_procDeclHeading11418 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_procDeclHeading11420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_formalParameterSection11525 = new BitSet(new long[]{0x1050000668108140L,0x8002129049081420L,0xA000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_formalParameterList_in_formalParameterSection11528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_formalParameterSection11532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_formalParameterList11588 = new BitSet(new long[]{0x1050000668108140L,0x8002129049081420L,0xA000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_formalParameter_in_formalParameterList11590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_customAttribute_in_formalParameter11652 = new BitSet(new long[]{0x1050000668108140L,0x8002129049001420L,0xA000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_parmType_in_formalParameter11657 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_identListFlat_in_formalParameter11661 = new BitSet(new long[]{0x0004000001000002L});
	public static final BitSet FOLLOW_COLON_in_formalParameter11664 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_formalParameter11666 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_formalParameter11671 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_formalParameter11673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_methodBody11896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_methodBody11898 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_procBody11959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_procBody11961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeList_in_customAttribute12014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_customAttributeList12061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
	public static final BitSet FOLLOW_LBRACK_in_customAttributeDecl12109 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_namespacedQualifiedIdent_in_customAttributeDecl12111 = new BitSet(new long[]{0x0000000000000000L,0x1000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_customAttributeDecl12114 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expressionList_in_customAttributeDecl12117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_customAttributeDecl12121 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_customAttributeDecl12125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_anonymousExpression_in_expression12209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleExpression_in_expression12250 = new BitSet(new long[]{0x0004000000000402L,0x0000000804420814L});
	public static final BitSet FOLLOW_relationalOperator_in_expression12253 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_simpleExpression_in_expression12255 = new BitSet(new long[]{0x0004000000000402L,0x0000000804420814L});
	public static final BitSet FOLLOW_EQUAL_in_expression12260 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_expression12262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_in_anonymousExpression12310 = new BitSet(new long[]{0x0080000818880800L,0x00100000020C0002L,0x2000000022000200L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12313 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x2000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_anonymousExpression12350 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_anonymousExpression12353 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_anonymousExpression12357 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_anonymousExpression12359 = new BitSet(new long[]{0x0080000818880800L,0x00100000000C0002L,0x2000000022000200L});
	public static final BitSet FOLLOW_block_in_anonymousExpression12361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_simpleExpression12410 = new BitSet(new long[]{0x0000000000000002L,0x0001010010000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_addOperator_in_simpleExpression12413 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_term_in_simpleExpression12415 = new BitSet(new long[]{0x0000000000000002L,0x0001010010000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_factor_in_term12478 = new BitSet(new long[]{0x0000004000000082L,0x0000000020000000L,0x0000000000078000L});
	public static final BitSet FOLLOW_multOperator_in_term12481 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_factor_in_term12483 = new BitSet(new long[]{0x0000004000000082L,0x0000000020000000L,0x0000000000078000L});
	public static final BitSet FOLLOW_atom_in_factor12544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unaryOperator_in_factor12577 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_factor_in_factor12579 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INHERITED_in_factor12612 = new BitSet(new long[]{0x1A500006E0118142L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_factor_in_factor12615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_particle_in_atom12678 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L});
	public static final BitSet FOLLOW_particleItem_in_atom12680 = new BitSet(new long[]{0x0000010000010002L,0x0004000006080000L});
	public static final BitSet FOLLOW_intNum_in_particle12738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_realNum_in_particle12771 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkAsmHexNum_in_particle12804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringFactor_in_particle12837 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_particle12870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NIL_in_particle12903 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUE_in_particle12936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FALSE_in_particle12969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parenthesizedExpression_in_particle13002 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setLiteral_in_particle13035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_particle13068 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FILE_in_particle13101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_particleItem13154 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_extendedIdent_in_particleItem13162 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_particleItem13196 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_genericTypeIdent_in_particleItem13198 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_COMMA_in_particleItem13201 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_genericTypeIdent_in_particleItem13203 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_GT_in_particleItem13207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_particleItem13241 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expressionList_in_particleItem13243 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_particleItem13245 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POINTER2_in_particleItem13278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_particleItem13311 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_parameterExpression_in_particleItem13314 = new BitSet(new long[]{0x1A500006E2118140L,0x841312955B083422L,0x8004700088E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_COMMA_in_particleItem13317 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_RPAREN_in_particleItem13323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_extendedIdent13375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_expressionList13428 = new BitSet(new long[]{0x1A500006E2118142L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_COMMA_in_expressionList13431 = new BitSet(new long[]{0x1A500006E0118142L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_parameterExpression13481 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_parameterExpression13484 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_parameterExpression13486 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_parameterExpression13489 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_parameterExpression13491 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13548 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13551 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13553 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13593 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13596 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_stringFactor13598 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_ControlString_in_stringFactor13603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_parenthesizedExpression13647 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_parenthesizedExpression13649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_parenthesizedExpression13651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_setLiteral13706 = new BitSet(new long[]{0x1A500006E0118140L,0x940312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expressionOrRangeList_in_setLiteral13709 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_setLiteral13713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expressionOrRange_in_expressionOrRangeList13758 = new BitSet(new long[]{0x1A500006E2118142L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_COMMA_in_expressionOrRangeList13761 = new BitSet(new long[]{0x1A500006E0118142L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_simpleExpression_in_expressionOrRange13813 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_expressionOrRange13816 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_simpleExpression_in_expressionOrRange13818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor_in_designator13875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ifStatement_in_statement14801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseStatement_in_statement14834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_repeatStatement_in_statement14867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whileStatement_in_statement14900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forStatement_in_statement14933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withStatement_in_statement14966 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tryStatement_in_statement14999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raiseStatement_in_statement15032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assemblerStatement_in_statement15065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compoundStatement_in_statement15098 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_label_in_statement15131 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_statement15133 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_statement15135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleStatement_in_statement15168 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_ifStatement15222 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_ifStatement15224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_THEN_in_ifStatement15226 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_ifStatement15228 = new BitSet(new long[]{0x0001000000000002L});
	public static final BitSet FOLLOW_ELSE_in_ifStatement15231 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_ifStatement15233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_caseStatement15287 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_caseStatement15289 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_OF_in_caseStatement15291 = new BitSet(new long[]{0x1A530006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_caseItem_in_caseStatement15294 = new BitSet(new long[]{0x1A530006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ELSE_in_caseStatement15299 = new BitSet(new long[]{0x9A520006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_caseStatement15301 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseStatement15304 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_caseStatement15310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15367 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COMMA_in_caseItem15370 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_caseLabel_in_caseItem15372 = new BitSet(new long[]{0x0000000003000000L});
	public static final BitSet FOLLOW_COLON_in_caseItem15376 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_caseItem15378 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_caseItem15381 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_caseLabel15440 = new BitSet(new long[]{0x0000020000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_caseLabel15443 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_caseLabel15445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPEAT_in_repeatStatement15497 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8404700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_repeatStatement15500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_UNTIL_in_repeatStatement15504 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_repeatStatement15506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHILE_in_whileStatement15557 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_whileStatement15559 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_whileStatement15561 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_whileStatement15563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15616 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_forStatement15618 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement15620 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_forStatement15622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_forStatement15624 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_forStatement15626 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15628 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_forStatement15630 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15663 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_forStatement15665 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_forStatement15667 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_forStatement15669 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_forStatement15671 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_forStatement15673 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15675 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_forStatement15677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_forStatement15710 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_forStatement15712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_IN_in_forStatement15714 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_forStatement15716 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_forStatement15718 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_forStatement15720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_withStatement15772 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_withItem_in_withStatement15774 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_withStatement15776 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_withStatement15778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_withItem15835 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_AS_in_withItem15837 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_withItem15839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_withItem15879 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_withItem15882 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_withItem15884 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_BEGIN_in_compoundStatement15934 = new BitSet(new long[]{0x9A520006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_compoundStatement15937 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_compoundStatement15941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_statementList16007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_statementList16012 = new BitSet(new long[]{0x9A500006E0398942L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_statementList16015 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16069 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_simpleStatement16071 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_simpleStatement16073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_simpleStatement16106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_gotoStatement_in_simpleStatement16140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GOTO_in_gotoStatement16192 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000700000E0002DL,0x0000000000000008L});
	public static final BitSet FOLLOW_label_in_gotoStatement16194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXIT_in_gotoStatement16227 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_LPAREN_in_gotoStatement16230 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_gotoStatement16232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_gotoStatement16234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BREAK_in_gotoStatement16269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONTINUE_in_gotoStatement16302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_constExpression16355 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16388 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16390 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordConstExpression_in_constExpression16393 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_constExpression16430 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_constExpression16432 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_constExpression16435 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_constExpression16437 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_constExpression16441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_recordConstExpression16485 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_recordConstExpression16487 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_recordConstExpression16489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_recordConstExpression16492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement16550 = new BitSet(new long[]{0x9A580006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16553 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_tryStatement16557 = new BitSet(new long[]{0x9A530006E0398940L,0x8C0312D55B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_handlerList_in_tryStatement16559 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement16561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_tryStatement16594 = new BitSet(new long[]{0xDA500006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16597 = new BitSet(new long[]{0x4000000000000000L});
	public static final BitSet FOLLOW_FINALLY_in_tryStatement16601 = new BitSet(new long[]{0x9A520006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_tryStatement16604 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_tryStatement16608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_handlerList16663 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_handlerList16668 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_handlerList16670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_handlerList16705 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_handler16763 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_handlerIdent_in_handler16766 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeId_in_handler16770 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_handler16772 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_handlerStatement_in_handler16774 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_handlerIdent16829 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_handlerIdent16831 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_handlerStatement16880 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement16883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_handlerStatement16918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_in_raiseStatement16969 = new BitSet(new long[]{0x1A500006E0118142L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_raiseStatement16972 = new BitSet(new long[]{0x0000000000008002L});
	public static final BitSet FOLLOW_AT_in_raiseStatement16977 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_raiseStatement16979 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASM_in_assemblerStatement17032 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000000FFL});
	public static final BitSet FOLLOW_END_in_assemblerStatement17040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_methodDirectiveSection17108 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000001L});
	public static final BitSet FOLLOW_methodDirective_in_methodDirectiveSection17112 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_methodDirectiveSection17116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_standaloneOverloadDirective_in_methodDirectiveSection17149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_functionDirectiveSection17192 = new BitSet(new long[]{0x0560000400401000L,0x0000C40081808001L,0x4200000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_functionDirectiveSection17196 = new BitSet(new long[]{0x0560000400401000L,0x0000C40081808001L,0x4200000000102808L});
	public static final BitSet FOLLOW_SEMI_in_functionDirectiveSection17200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_standaloneOverloadDirective_in_functionDirectiveSection17233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_standaloneOverloadDirective17271 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_OVERLOAD_in_standaloneOverloadDirective17273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_SEMI_in_standaloneOverloadDirective17276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERLOAD_in_methodDirective17328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REINTRODUCE_in_methodDirective17361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bindingDirective_in_methodDirective17394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_abstractDirective_in_methodDirective17427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_methodDirective17461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_methodDirective17497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_methodDirective17530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_methodDirective17565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dispIDDirective_in_methodDirective17598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORWARD_in_functionDirective17646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERLOAD_in_functionDirective17679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inlineDirective_in_functionDirective17712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_callConvention_in_functionDirective17745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oldCallConventionDirective_in_functionDirective17778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hintingDirective_in_functionDirective17811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_externalDirective_in_functionDirective17844 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNSAFE_in_functionDirective17877 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MESSAGE_in_bindingDirective17928 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_bindingDirective17930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATIC_in_bindingDirective17963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DYNAMIC_in_bindingDirective17996 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVERRIDE_in_bindingDirective18029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VIRTUAL_in_bindingDirective18062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEPRECATED_in_hintingDirective18626 = new BitSet(new long[]{0x0000000080000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_stringFactor_in_hintingDirective18629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXPERIMENTAL_in_hintingDirective18664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLATFORM_in_hintingDirective18699 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LIBRARY_in_hintingDirective18732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARARGS_in_externalDirective18780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXTERNAL_in_externalDirective18816 = new BitSet(new long[]{0x1A500006E0118142L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_externalDirective18819 = new BitSet(new long[]{0x0000000000000002L,0x0000000040001000L});
	public static final BitSet FOLLOW_externalSpecifier_in_externalDirective18824 = new BitSet(new long[]{0x0000000000000002L,0x0000000040001000L});
	public static final BitSet FOLLOW_NAME_in_externalSpecifier18875 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier18877 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_in_externalSpecifier18910 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_externalSpecifier18912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISPID_in_dispIDDirective18965 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_dispIDDirective18967 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident19030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_199_in_ident19063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_TkIdentifier_in_ident19065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_ident19098 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_identList19420 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identList19423 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_identList19425 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_ident_in_identListFlat19490 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_COMMA_in_identListFlat19493 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_identListFlat19495 = new BitSet(new long[]{0x0000000002000002L});
	public static final BitSet FOLLOW_TkIdentifier_in_label19569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkIntNum_in_label19602 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkHexNum_in_label19635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_usedKeywordsAsNames_in_label19668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TkRealNum_in_realNum19818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_namespacedQualifiedIdent19860 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_namespacedQualifiedIdent19862 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_qualifiedIdent_in_namespacedQualifiedIdent19866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_namespaceName19918 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_DOT_in_namespaceName19921 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_namespaceName19923 = new BitSet(new long[]{0x0000010000000002L});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent19978 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_qualifiedIdent19980 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_qualifiedIdent19985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declSection_in_synpred23_Delphi1584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_blockBody_in_synpred24_Delphi1589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodDecl_in_synpred30_Delphi1866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred31_Delphi1899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_synpred32_Delphi1932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportedProcHeading_in_synpred36_Delphi2116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procDecl_in_synpred38_Delphi2182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constDeclaration_in_synpred40_Delphi2331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred42_Delphi2486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDeclaration_in_synpred45_Delphi2580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeDeclaration_in_synpred46_Delphi2647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred47_Delphi2711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varDeclaration_in_synpred49_Delphi2808 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred51_Delphi2968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred54_Delphi3060 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_synpred54_Delphi3062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ABSOLUTE_in_synpred55_Delphi3095 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_constExpression_in_synpred55_Delphi3097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_strucType_in_synpred62_Delphi3342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pointerType_in_synpred63_Delphi3375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_stringType_in_synpred64_Delphi3408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedureType_in_synpred65_Delphi3441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variantType_in_synpred66_Delphi3474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subRangeType_in_synpred67_Delphi3507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TYPE_in_synpred70_Delphi3541 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeId_in_synpred70_Delphi3545 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
	public static final BitSet FOLLOW_genericPostfix_in_synpred70_Delphi3548 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OF_in_synpred81_Delphi4272 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_synpred81_Delphi4274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACK_in_synpred83_Delphi4423 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred83_Delphi4425 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_RBRACK_in_synpred83_Delphi4427 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_codePageNumber_in_synpred86_Delphi4474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodType_in_synpred87_Delphi4583 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleProcedureType_in_synpred88_Delphi4616 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred90_Delphi4759 = new BitSet(new long[]{0x0040000000400000L,0x0000400000000000L,0x0000000000100808L});
	public static final BitSet FOLLOW_callConvention_in_synpred90_Delphi4763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred92_Delphi4871 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred94_Delphi4926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleGenericDefinition_in_synpred100_Delphi5383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_complexGenericDefinition_in_synpred101_Delphi5416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeTypeDecl_in_synpred113_Delphi5941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classTypeDecl_in_synpred114_Delphi5974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred122_Delphi6299 = new BitSet(new long[]{0x1052000E78928160L,0x83DA12904B081422L,0xA000200022E0122DL,0x0000000000000088L});
	public static final BitSet FOLLOW_classState_in_synpred122_Delphi6302 = new BitSet(new long[]{0x1052000E78928140L,0x83DA12904B081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_classParent_in_synpred122_Delphi6307 = new BitSet(new long[]{0x1052000E78928140L,0x83DA129049081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_classItem_in_synpred122_Delphi6312 = new BitSet(new long[]{0x1052000E78928140L,0x83DA129049081422L,0xA000200022E0022DL,0x0000000000000088L});
	public static final BitSet FOLLOW_END_in_synpred122_Delphi6316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classState_in_synpred123_Delphi6370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred124_Delphi6375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred127_Delphi6611 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred128_Delphi6644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classField_in_synpred129_Delphi6677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred130_Delphi6710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred137_Delphi6980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred138_Delphi7013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interfaceKey_in_synpred143_Delphi7099 = new BitSet(new long[]{0x0002000810800000L,0x0050008002080002L});
	public static final BitSet FOLLOW_classParent_in_synpred143_Delphi7102 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceGuid_in_synpred143_Delphi7107 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_interfaceItem_in_synpred143_Delphi7112 = new BitSet(new long[]{0x0002000810800000L,0x0050008000080002L});
	public static final BitSet FOLLOW_END_in_synpred143_Delphi7116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classParent_in_synpred144_Delphi7210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred146_Delphi7453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred147_Delphi7487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred150_Delphi7627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred151_Delphi7660 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simpleRecord_in_synpred152_Delphi7748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred153_Delphi7837 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_visibility_in_synpred156_Delphi7987 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred157_Delphi8025 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classProperty_in_synpred158_Delphi8058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_recordField_in_synpred161_Delphi8157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_classMethod_in_synpred172_Delphi8582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred173_Delphi8670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred177_Delphi8670 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred177_Delphi8675 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred177_Delphi8679 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_synpred177_Delphi8681 = new BitSet(new long[]{0x1460201400401020L,0x0000CC008F808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred177_Delphi8684 = new BitSet(new long[]{0x1460201400401020L,0x0000CC008B808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred177_Delphi8689 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_methodDirectiveSection_in_synpred177_Delphi8693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred178_Delphi8795 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred182_Delphi8821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred183_Delphi8795 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred183_Delphi8800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred183_Delphi8804 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_synpred183_Delphi8806 = new BitSet(new long[]{0x0000000001000000L,0x0000000006000000L});
	public static final BitSet FOLLOW_genericDefinition_in_synpred183_Delphi8809 = new BitSet(new long[]{0x0000000001000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred183_Delphi8814 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_COLON_in_synpred183_Delphi8818 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_synpred183_Delphi8821 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_synpred183_Delphi8825 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_methodDirectiveSection_in_synpred183_Delphi8827 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred184_Delphi8939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred188_Delphi8965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred189_Delphi9100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred191_Delphi9220 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred198_Delphi9480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred202_Delphi9631 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred202_Delphi9633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred203_Delphi9666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred220_Delphi10453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_methodBody_in_synpred223_Delphi10561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred224_Delphi10621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred227_Delphi10621 = new BitSet(new long[]{0x0000000810800000L,0x0010000000000000L});
	public static final BitSet FOLLOW_CLASS_in_synpred227_Delphi10626 = new BitSet(new long[]{0x0000000810000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_methodKey_in_synpred227_Delphi10631 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_methodName_in_synpred227_Delphi10633 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred227_Delphi10636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred228_Delphi10734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred231_Delphi10756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred233_Delphi10734 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CLASS_in_synpred233_Delphi10739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_synpred233_Delphi10743 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_methodName_in_synpred233_Delphi10745 = new BitSet(new long[]{0x0000000001000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred233_Delphi10748 = new BitSet(new long[]{0x0000000001000002L});
	public static final BitSet FOLLOW_COLON_in_synpred233_Delphi10753 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_customAttribute_in_synpred233_Delphi10756 = new BitSet(new long[]{0x1A500026E0918340L,0x841732955B093422L,0x80047000A8E0402FL,0x0000000000000088L});
	public static final BitSet FOLLOW_typeDecl_in_synpred233_Delphi10760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred234_Delphi10869 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred236_Delphi10888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procBody_in_synpred244_Delphi11229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred245_Delphi11295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred247_Delphi11295 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_PROCEDURE_in_synpred247_Delphi11299 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_synpred247_Delphi11301 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred247_Delphi11304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred248_Delphi11404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttribute_in_synpred253_Delphi11652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customAttributeDecl_in_synpred259_Delphi12061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_relationalOperator_in_synpred263_Delphi12253 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_simpleExpression_in_synpred263_Delphi12255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUAL_in_synpred264_Delphi12260 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred264_Delphi12262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_formalParameterSection_in_synpred265_Delphi12313 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_addOperator_in_synpred268_Delphi12413 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_term_in_synpred268_Delphi12415 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor_in_synpred272_Delphi12615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_particleItem_in_synpred273_Delphi12680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ident_in_synpred278_Delphi12870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_synpred284_Delphi13068 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred297_Delphi13551 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_ControlString_in_synpred297_Delphi13553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QuotedString_in_synpred298_Delphi13558 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_synpred300_Delphi13596 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_QuotedString_in_synpred300_Delphi13598 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ControlString_in_synpred301_Delphi13603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELSE_in_synpred337_Delphi15231 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_synpred337_Delphi15233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred344_Delphi15500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred345_Delphi15616 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_synpred345_Delphi15618 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred345_Delphi15620 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred345_Delphi15622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_TO_in_synpred345_Delphi15624 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred345_Delphi15626 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred345_Delphi15628 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_synpred345_Delphi15630 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_synpred346_Delphi15663 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_synpred346_Delphi15665 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred346_Delphi15667 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred346_Delphi15669 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_DOWNTO_in_synpred346_Delphi15671 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred346_Delphi15673 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_DO_in_synpred346_Delphi15675 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_synpred346_Delphi15677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred347_Delphi15835 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_AS_in_synpred347_Delphi15837 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_synpred347_Delphi15839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred349_Delphi15937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred352_Delphi16012 = new BitSet(new long[]{0x9A500006E0398942L,0x8C0312955B083528L,0x8004700098E0006DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statement_in_synpred352_Delphi16015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred353_Delphi16069 = new BitSet(new long[]{0x0000000000004000L});
	public static final BitSet FOLLOW_ASSIGN_in_synpred353_Delphi16071 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred353_Delphi16073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred354_Delphi16106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred356_Delphi16230 = new BitSet(new long[]{0x1A500006E0118140L,0x841312955B083422L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_expression_in_synpred356_Delphi16232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_RPAREN_in_synpred356_Delphi16234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred359_Delphi16355 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred361_Delphi16388 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred361_Delphi16390 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_recordConstExpression_in_synpred361_Delphi16393 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0042DL,0x0000000000000088L});
	public static final BitSet FOLLOW_RPAREN_in_synpred361_Delphi16397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred364_Delphi16553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRY_in_synpred365_Delphi16550 = new BitSet(new long[]{0x9A580006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_synpred365_Delphi16553 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_EXCEPT_in_synpred365_Delphi16557 = new BitSet(new long[]{0x9A530006E0398940L,0x8C0312D55B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_handlerList_in_synpred365_Delphi16559 = new BitSet(new long[]{0x0002000000000000L});
	public static final BitSet FOLLOW_END_in_synpred365_Delphi16561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred366_Delphi16597 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statementList_in_synpred367_Delphi16604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_in_synpred370_Delphi16663 = new BitSet(new long[]{0x0001000000000002L,0x0000004000000000L});
	public static final BitSet FOLLOW_ELSE_in_synpred370_Delphi16668 = new BitSet(new long[]{0x9A500006E0398940L,0x8C0312955B083528L,0x8004700098E0206DL,0x000000000000008EL});
	public static final BitSet FOLLOW_statementList_in_synpred370_Delphi16670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_designator_in_synpred374_Delphi16972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_synpred375_Delphi16977 = new BitSet(new long[]{0x1A500006E0118140L,0x840312955B083420L,0x8004700088E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_designator_in_synpred375_Delphi16979 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred379_Delphi17108 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000001L});
	public static final BitSet FOLLOW_methodDirective_in_synpred379_Delphi17112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred380_Delphi17108 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000180818L,0x0000000000000001L});
	public static final BitSet FOLLOW_methodDirective_in_synpred380_Delphi17112 = new BitSet(new long[]{0x1460201400401020L,0x0000CC0089808000L,0x0000000000182818L,0x0000000000000001L});
	public static final BitSet FOLLOW_SEMI_in_synpred380_Delphi17116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred382_Delphi17192 = new BitSet(new long[]{0x0560000400401000L,0x0000C40081808001L,0x4200000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_synpred382_Delphi17196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred383_Delphi17192 = new BitSet(new long[]{0x0560000400401000L,0x0000C40081808001L,0x4200000000100808L});
	public static final BitSet FOLLOW_functionDirective_in_synpred383_Delphi17196 = new BitSet(new long[]{0x0560000400401000L,0x0000C40081808001L,0x4200000000102808L});
	public static final BitSet FOLLOW_SEMI_in_synpred383_Delphi17200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred384_Delphi17276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constExpression_in_synpred418_Delphi18819 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespaceName_in_synpred460_Delphi19860 = new BitSet(new long[]{0x0000010000000000L});
	public static final BitSet FOLLOW_DOT_in_synpred460_Delphi19862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred461_Delphi19921 = new BitSet(new long[]{0x1050000660108140L,0x8002129049001420L,0x8000200000E0002DL,0x0000000000000088L});
	public static final BitSet FOLLOW_ident_in_synpred461_Delphi19923 = new BitSet(new long[]{0x0000000000000002L});
}
