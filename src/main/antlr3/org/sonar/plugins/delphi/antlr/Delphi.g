grammar Delphi;

options {
    backtrack=true;
    memoize=true;
    output=AST;
}

@header
{
/*
 * Sonar Delphi Plugin
 * Copyright (C) 2010 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package org.sonar.plugins.delphi.antlr.generated;

/**
* Delphi Parser class generated by Antlr. Provides tokens and tree parsing methods.
**/
}

@lexer::header
{
/*
 * Sonar Delphi Plugin
 * Copyright (C) 2010 SonarSource
 * dev@sonar.codehaus.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

package org.sonar.plugins.delphi.antlr.generated;

/**
* Delphi Lexer class generated by Antlr. Provides tokens.
**/
}

@lexer::members {
  boolean asmMode = false;
}

@parser::members {
  int savedLineNumber = 0;

  private void saveLineNumber() {
    Token token = input.LT(1);
    if (token == null) {
      throw new IllegalStateException("Failed to save line number: Previous token is null");
    }

    this.savedLineNumber = token.getLine();
  }

  private Token token(int type) {
    CommonToken t = new CommonToken(type, tokenNames[type]);
    t.setLine(savedLineNumber);
    return t;
  }
}

//****************************
//section start
//****************************
file                         : program | library | unit | packageE
                             ;
//****************************
//section fileDefinition
//****************************

program                      : (programHead)? (usesFileClause)? block '.'
                             ;
programHead                  : 'program' namespaceName (programParmSeq)? ';'
                             ;
programParmSeq               : '(' (ident (',' ident)* )? ')'
                             ;
library                      : libraryHead (usesFileClause)? block '.'
                             ;
libraryHead                  : 'library' namespaceName (hintingDirective)* ';' -> ^('library' namespaceName)
                             ;
packageE                     : packageHead requiresClause (containsClause)? 'end' '.'
                             ;
packageHead                  : 'package' namespaceName ';'
                             ;
unit                         : unitHead unitInterface unitImplementation unitBlock '.'
                             ;
unitHead                     : 'unit' namespaceName (hintingDirective)* ';' -> ^('unit' namespaceName (hintingDirective)*)
                             ;
unitInterface                : 'interface' (usesClause)? (interfaceDecl)* -> ^('interface' (usesClause)? (interfaceDecl)*)
                             ;
unitImplementation           : 'implementation' (usesClause)? (declSection)* -> ^('implementation' (usesClause)? (declSection)*)
                             ;
unitBlock                    : unitInitialization 'end'
                             | compoundStatement
                             | 'end'
                             ;
unitInitialization           : 'initialization' statementList (unitFinalization)?
                             ;
unitFinalization             : 'finalization' statementList
                             ;
//****************************
//section fileUsage
//****************************
containsClause               : 'contains' namespaceFileNameList
                             ;
requiresClause               : 'requires' namespaceNameList
                             ;
usesClause                   : 'uses' namespaceNameList -> ^('uses' namespaceNameList)
                             ;
usesFileClause               : 'uses' namespaceFileNameList -> ^('uses' namespaceFileNameList)
                             ;
namespaceFileNameList        : namespaceFileName (',' namespaceFileName)* ';' -> namespaceFileName (namespaceFileName)*
                             ;
namespaceFileName            : namespaceName ('in' QuotedString)? -> ^(namespaceName (QuotedString)?)
                             ;
namespaceNameList            : namespaceName (',' namespaceName)* ';' -> namespaceName (namespaceName)*
                             ;
//****************************
//section declaration
//****************************
block                        : blockDeclSection (blockBody)?
                             ;
blockDeclSection             : {saveLineNumber();} (declSection)* -> ^({token(TkBlockDeclSection)} (declSection)*)
                             ;
blockBody                    : compoundStatement
                             | assemblerStatement
                             ;
declSection                  : labelDeclSection
                             | constSection
                             | typeSection
                             | varSection
                             | methodDecl
                             | procDecl
                             | exportedProcHeading
                             | exportsSection
                             ;
interfaceDecl                : constSection
                             | typeSection
                             | varSection
                             | exportedProcHeading
                             | exportsSection
                             | procDecl
                             | methodDecl
                             ;
labelDeclSection             : 'label' label (',' label)* ';'
                             ;
constSection                 : constKey (constDeclaration)* -> ^(constKey (constDeclaration)*)  //CHANGED, erased one constDeclaration, for: "const {$include versioninfo.inc }"
                             ;
constKey                     : 'const'
                             | 'resourcestring'
                             ;
constDeclaration             : (customAttribute)? ident (':' typeDecl)? '=' constExpression (hintingDirective)* ';' -> ^(TkConstantName ident) (typeDecl)? '=' constExpression
                             ;
typeSection                  : 'type' typeDeclaration (typeDeclaration)* -> ^('type' typeDeclaration (typeDeclaration)*)
                             ;
innerTypeSection             : 'type' (typeDeclaration)* -> ^('type' (typeDeclaration)*)
                             ;
typeDeclaration              : (customAttribute)? genericTypeIdent '=' typeDecl (hintingDirective)* ';' -> ^(TkNewType (customAttribute)? ^(TkNewTypeName genericTypeIdent) ^(TkNewTypeDecl typeDecl (hintingDirective)*))
                             ;
varSection                   : varKey varDeclaration (varDeclaration)* -> ^(varKey varDeclaration (varDeclaration)*)
                             ;
varKey                       : 'var'
                             | 'threadvar'
                             ;
// threadvar geen initializations alleen globaal
varDeclaration               : (customAttribute)? identListFlat ':' typeDecl (varValueSpec)? (hintingDirective)* ';' -> (customAttribute)? ^(TkVariableIdents identListFlat) ^(TkVariableType typeDecl)
                             ;
varValueSpec                 : 'absolute' ident
                             | 'absolute' constExpression
                             | '=' constExpression
                             ;
exportsSection               : 'exports' ident exportItem (',' ident exportItem)* ';'
                             ;
exportItem                   : ('(' (formalParameterList)? ')')? (INDEX expression)? (NAME expression)? ('resident')?
                             ;
//****************************
//section type
//****************************
typeDecl                     : strucType
                             | pointerType
                             | stringType
                             | procedureType
                             | variantType
                             | subRangeType
                             | ('type')? typeId
                             | simpleType
                             ;
strucType                    : ('packed')? strucTypePart -> strucTypePart
                             ;
strucTypePart                : arrayType
                             | setType
                             | fileType
                             | classDecl
                             ;

arrayType                    :  'array' ('[' (arrayIndex)? (',' (arrayIndex)?)* ']')? 'of' arraySubType
                             -> ^(arraySubType 'array' ('[' (arrayIndex)? (',' (arrayIndex)?)* ']')? )          //CHANGED we only need type info
                             ;

arrayIndex                   : expression '..' expression
                             | typeId
                             ;

arraySubType                 : 'const'
                             | typeDecl
                             ;
setType                      : 'set' 'of' typeDecl -> 'set' typeDecl          //CHANGED we only need type info
                             ;
// set type alleen ordinal of subrange type
fileType                     : 'file' ('of' typeDecl)?
                             ;
pointerType                  : '^' typeDecl
                             | 'pointer'
                             ;
stringType                   : 'string' ('[' expression ']')? -> 'string'
                             | ('type')? ANSISTRING (codePageNumber)?
                             ;
codePageNumber               : '(' intNum ')'
                             ;
procedureType                : methodType
                             | simpleProcedureType
                             | procedureReference
                             ;
methodType                   : procedureTypeHeading 'of' 'object'
                             ;
simpleProcedureType          : procedureTypeHeading ( (';')? callConvention)?
                             ;
procedureReference           : 'reference' 'to' procedureTypeHeading
                             ;
procedureTypeHeading         : 'function' (formalParameterSection)? ':' (customAttribute)? typeDecl -> 'function' (formalParameterSection)? ^(TkFunctionReturn typeDecl)
                             | 'procedure' (formalParameterSection)?
                             ;
variantType                  : 'variant' // SzJ TODO TEMP
                             ;
simpleType                   : ident
                             | enumType
                             ;
subRangeType                 : expression '..' expression
                             ;
enumType                     : '(' ident ('=' expression)? (',' ident ('=' expression)? )* ')'
                             ;
typeId                       : namespacedQualifiedIdent (genericPostfix ('.' typeId)?)?
                             ;
//****************************
//section generics
//****************************
genericTypeIdent             : qualifiedIdent (genericDefinition)? -> qualifiedIdent    //CHANGED we don't need <Type> data, it produced empty nodes
                             ;
genericDefinition            : simpleGenericDefinition
                             | complexGenericDefinition
                             | constrainedGenericDefinition
                             ;
simpleGenericDefinition      : '<' ident (',' ident)* '>'
                             ;
complexGenericDefinition     : '<' qualifiedIdent (simpleGenericDefinition)? (',' qualifiedIdent (simpleGenericDefinition)?)* '>'
                             ;
constrainedGenericDefinition : '<' constrainedGeneric (';' constrainedGeneric)* '>'
                             ;
constrainedGeneric           : ident (':' genericConstraint (',' genericConstraint)*)?
                             ;
genericConstraint            : ident
                             | 'record'
                             | 'class'
                             | 'constructor'
                             ;
genericPostfix               : '<' typeDecl (',' typeDecl)* '>'
                             ;
//****************************
//section class
//****************************
classDecl                    : classHelperDecl -> ^(TkClass classHelperDecl)
			     | classTypeTypeDecl
                             | classTypeDecl -> ^(TkClass classTypeDecl)
                             | interfaceTypeDecl -> ^(TkInterface interfaceTypeDecl)
                             | objectDecl -> ^(TkObject objectDecl)
                             | recordDecl -> ^(TkRecord recordDecl)
                             | recordHelperDecl -> ^(TkRecordHelper recordHelperDecl)
                             ;
classTypeTypeDecl            : 'class' 'of' typeId -> ^(TkClassOfType typeId)
                             ;
classTypeDecl                : 'class' (classState)? (classParent)? (classItem)* 'end' -> 'class' ^(TkClassParents (classParent)?) (classItem)*
                             | 'class' (classState)? (classParent)? -> 'class' ^(TkClassParents (classParent)?)
                             ;
classState                   : 'sealed'
                             | 'abstract'
                             ;
classParent                  : '(' genericTypeIdent (',' genericTypeIdent)* ')' -> genericTypeIdent (genericTypeIdent)*   //CHANGEd from typeId to classParentId
                             ;
classItem                    : visibility
                             | classMethod
                             | classField
                             | classProperty
                             | constSection
                             | innerTypeSection
                             | ('class')? varSection
                             ;
classHelperDecl              : 'class' 'helper' (classParent)? 'for' typeId (classHelperItem)* 'end' -> ^('class' typeId ) (classHelperItem)* //CHANGED, we only need "for" class name
                             ;
classHelperItem              : visibility
                             | classMethod
                             | classProperty
                             | ('class')? varSection
                             ;
interfaceTypeDecl            : interfaceKey (classParent)? (interfaceGuid)? (interfaceItem)* 'end'
                              -> interfaceKey ^(TkClassParents (classParent)? ) ^(TkGuid (interfaceGuid)?) (interfaceItem)*
                             | interfaceKey (classParent)?
                              -> interfaceKey ^(TkClassParents (classParent)?)
                             ;
interfaceKey                 : 'interface'
                             | 'dispinterface'
                             ;
interfaceGuid                : '[' QuotedString ']' -> QuotedString
                             ;
interfaceItem                : classMethod
                             | ('class')? classProperty
                             ;
objectDecl                   : 'object' (classParent)? (objectItem)* 'end' -> 'object' (classParent)? (objectItem)*
                             ;
objectItem                   : visibility
                             | classMethod
                             | classField
                             ;
recordDecl                   : 'record' (recordItem)* (recordVariantSection)? 'end'
                             -> 'record' (recordItem)* (recordVariantSection)?
                             ;
recordItem                   : visibility
                             | classMethod
                             | classProperty
                             | constSection
                             | innerTypeSection
                             | recordField
                             | ('class')? varSection
                             ;
recordField                  : identList ':' typeDecl (hintingDirective)* (';')?  //CHANGED not needed ; at the end
                             -> identList ^(TkVariableType typeDecl)
                             ;
recordVariantSection         : 'case' (ident ':')? qualifiedIdent 'of' (recordVariant)+
                             ;
recordVariant                : expressionList ':' '(' (recordField)* (recordVariantSection)? ')' (';')?
                             ;
recordHelperDecl             : 'record' 'helper' 'for' typeId (recordHelperItem)* 'end'
                             ;
recordHelperItem             : visibility
                             | classMethod
                             | classProperty
                             | constSection
                             ;
classMethod                  : (customAttribute)? ('class')? methodKey ident (genericDefinition)? (formalParameterSection)? methodDirectiveSection
                             ->  (customAttribute)? ('class')? ^(methodKey ^(TkFunctionName ident) (genericDefinition)? ^(TkFunctionArgs (formalParameterSection)?) methodDirectiveSection)
                             | (customAttribute)? ('class')? 'function' ident (genericDefinition)? (formalParameterSection)? ':' (customAttribute)? typeDecl methodDirectiveSection
                             -> (customAttribute)? ('class')? ^('function' ^(TkFunctionName ident) (genericDefinition)? ^(TkFunctionArgs (formalParameterSection)?) (customAttribute)? ^(TkFunctionReturn typeDecl) methodDirectiveSection)
                             | (customAttribute)? ('class')? 'operator' ident (genericDefinition)? (formalParameterSection)? ':' (customAttribute)? typeDecl ';'
                             -> (customAttribute)? ('class')? ^('operator' ^(TkFunctionName ident) (genericDefinition)? ^(TkFunctionArgs (formalParameterSection)?) (customAttribute)? typeDecl )
                             ;
classField                   : (customAttribute)? identList ':' typeDecl ';' (hintingDirective)*
                             -> (customAttribute)? ^(TkClassField ^(TkVariableIdents identList) ^(TkVariableType typeDecl))
                             ;
classProperty                : (customAttribute)? ('class')? 'property' ident (classPropertyArray)? (':' genericTypeIdent)? (classPropertyDirective)* ';'
                             -> ^('property' ^(TkVariableIdents ident) ^(TkVariableType genericTypeIdent?) (classPropertyDirective)*)
                             ;
classPropertyArray           : '[' formalParameterList ']'
                             ;
classPropertyDirective       : ';' 'default'
                             | 'default' expression
                             | classPropertyReadWrite
                             | classPropertyDispInterface
                             | IMPLEMENTS typeId
                             | 'index' expression
                             | 'nodefault'
                             | STORED expression
                             ;
classPropertyReadWrite       : 'read' qualifiedIdent ('[' expression ']')?  // Waarom qualified ident???  //ADDED []
                             -> ^('read' qualifiedIdent)
                             | 'write' qualifiedIdent ('[' expression ']')? //ADDED []
                             -> ^('write' qualifiedIdent)
                             ;
classPropertyDispInterface   : 'readonly'
                             | 'writeonly'
                             | dispIDDirective
                             ;
visibility                   : (STRICT)? 'protected'
                             | (STRICT)? 'private'
                             | 'public'
                             | 'published'
                             | 'automated'     // win32 deprecated
                             ;
//****************************
//section procedure
//****************************
exportedProcHeading          : 'procedure' ident (formalParameterSection)? ':' (customAttribute)? typeDecl functionDirectiveSection
                             | 'function' ident (formalParameterSection)? functionDirectiveSection
                             ;
methodDecl                   : methodDeclHeading (methodBody)?
                             ;
methodDeclHeading            : (customAttribute)? ('class')?  methodKey methodName (formalParameterSection)? methodDirectiveSection
                             -> (customAttribute)? ('class')?  ^(methodKey ^(TkFunctionName methodName) ^(TkFunctionArgs (formalParameterSection)?) methodDirectiveSection)
                             | (customAttribute)? ('class')? 'function' methodName (formalParameterSection)? (':' (customAttribute)? typeDecl)? methodDirectiveSection
                             -> (customAttribute)? ('class')? ^('function' ^(TkFunctionName methodName) ^(TkFunctionArgs (formalParameterSection)?) ^(TkFunctionReturn (customAttribute)? typeDecl?) methodDirectiveSection)
                             | (customAttribute)? 'class' 'operator' methodName (formalParameterSection)? (':' (customAttribute)? typeDecl)? methodDirectiveSection
                             -> (customAttribute)? 'class' ^('operator' ^(TkFunctionName methodName) ^(TkFunctionArgs (formalParameterSection)?) ^(TkFunctionReturn (customAttribute)? typeDecl?) methodDirectiveSection)
                             ;
methodKey                    : 'procedure'
                             | 'constructor'
                             | 'destructor'
                             ;
methodName                   : ident (genericDefinition)? ('.' ident (genericDefinition)?)? '.' ident (genericDefinition)?
                             ;
procDecl                     : procDeclHeading (procBody)?
                             ;
procDeclHeading              : (customAttribute)? 'procedure' ident (formalParameterSection)? functionDirectiveSection
                             -> ^('procedure' ^(TkFunctionName ident) ^(TkFunctionArgs (formalParameterSection)?) functionDirectiveSection )
                             | (customAttribute)? 'function' ident (formalParameterSection)? (':' typeDecl)? functionDirectiveSection
                             -> ^('function' ^(TkFunctionName ident) ^(TkFunctionArgs (formalParameterSection)?) ^(TkFunctionReturn (typeDecl)?) functionDirectiveSection )
                             ;
formalParameterSection       : '(' (formalParameterList)? ')' -> (formalParameterList)?
                             ;
formalParameterList          : formalParameter (';' formalParameter)* -> formalParameter (formalParameter)*
                             ;
formalParameter              : (customAttribute)? (parmType)? identListFlat (':' typeDecl)? ('=' expression)?
                             -> (customAttribute)? ^(TkVariableIdents identListFlat) ^(TkVariableType typeDecl?) ^(TkVariableParam parmType)?
                             ; // Default values were cut out because they were (apparently) causing issues with DelphiCodeAnalyser
parmType                     : 'const'
                             | 'var'
                             | 'out'
                             ;
methodBody                   : block ';' -> block
                             ;
procBody                     : block ';'
                             ;
//****************************
//section customAttributes
//****************************
customAttribute              : customAttributeList
                             ;
customAttributeList          : (customAttributeDecl)*
                             ;
customAttributeDecl          : '[' namespacedQualifiedIdent ('(' (expressionList)? ')')? ']'  -> ^(TkCustomAttribute '[' namespacedQualifiedIdent ('(' (expressionList)? ')')? ']')
                             ;

//****************************
//section expression
//****************************
expression                   : anonymousExpression -> ^(TkAnonymousExpression anonymousExpression)
                             | simpleExpression (relationalOperator simpleExpression)* ('=' expression)?
                             ;
anonymousExpression          : 'procedure' (formalParameterSection)? block
                             | 'function' (formalParameterSection)? ':' typeDecl block
                             ;
simpleExpression             : term (addOperator term)*
                             ;
term                         : factor (multOperator factor)*
                             ;
factor                       : atom
                             | unaryOperator factor
                             | 'inherited' (factor)?
                             ;
atom                         : particle particleItem*
                             ;
particle                     : intNum
                             | realNum
                             | TkAsmHexNum
                             | stringFactor
                             | ident
                             | 'nil'
                             | 'true'
                             | 'false'
                             | parenthesizedExpression
                             | setLiteral
                             | 'string'
                             | 'file'
                             ;
particleItem                 : ('.' | '@') extendedIdent
                             | ('<' genericTypeIdent (',' genericTypeIdent)* '>')
                             | '[' expressionList ']'
                             | '^'
                             | '(' (parameterExpression (',')?)* ')'
                             ;
extendedIdent                : ident
                             | keywords
                             ;
expressionList               : (expression (',')?)+
                             ;
parameterExpression          : expression (':' expression (':' expression)?)?
                             ;
stringFactor                 : ControlString (QuotedString ControlString)* (QuotedString)?
                             | QuotedString (ControlString QuotedString)* (ControlString)?
                             ;
parenthesizedExpression      : '(' expression ')'
                             ;
setLiteral                   : '[' (expressionOrRangeList)? ']'
                             ;
expressionOrRangeList        : (expressionOrRange (',')?)+
                             ;
expressionOrRange            : simpleExpression ('..' simpleExpression)?
                             ;
designator                   : factor
                             ;
addOperator                  : '+'
                             | '-'
                             | 'or'
                             | 'xor'
                             ;
multOperator                 : '*'
                             | '/'
                             | 'div'
                             | 'mod'
                             | 'and'
                             | 'shl'
                             | 'shr'
                             ;
unaryOperator                : 'not'
                             | '+'
                             | '-'
                             | '@'
                             ;
relationalOperator           : '='
                             | '>'
                             | '<'
                             | '<='
                             | '>='
                             | '<>'
                             | 'in'
                             | 'is'
                             | 'as'
                             ;
//****************************
//section statement
//****************************

statement                    : ifStatement
                             | caseStatement
                             | repeatStatement
                             | whileStatement
                             | forStatement
                             | withStatement
                             | tryStatement
                             | raiseStatement
                             | assemblerStatement
                             | compoundStatement
                             | label ':' statement
                             | simpleStatement
                             ;
ifStatement                  : 'if' expression 'then' statement ('else' statement)?
                             ;
caseStatement                : 'case' expression 'of' (caseItem)* ('else' statementList (';')?)? 'end'
                             ;
caseItem                     : caseLabel (',' caseLabel)* ':' (statement)? (';')?
                             ;
caseLabel                    : expression ('..' expression)?
                             ;
repeatStatement              : 'repeat' (statementList)? 'until' expression
                             ;
whileStatement               : 'while' expression 'do' statement
                             ;
forStatement                 : 'for' designator ':=' expression 'to' expression 'do' statement
                             | 'for' designator ':=' expression 'downto' expression 'do' statement
                             | 'for' designator 'in' expression 'do' statement
                             ;
withStatement                : 'with' withItem 'do' statement
                             ;
withItem                     : designator 'as' designator       //ADDED
                             | designator (',' designator)*
                             ;
compoundStatement            : 'begin' (statementList)? 'end' -> ^('begin' (statementList)? 'end')
                             ;
statementList                : (statement)? (';' (statement)?)*
                             ;
simpleStatement              : designator ':=' expression
                             | designator // call
                             | gotoStatement
                             ;
gotoStatement                : 'goto' label
                             | 'exit' ('(' expression ')')?
                             | 'break'
                             | 'continue'
                             ;
//****************************
//section constExpression
//****************************
constExpression              : expression
                             | '(' (ident ':' constExpression (';')?)+ ')' // Record
                             | '(' (constExpression (',')?)+ ')' // Array
                             | '(' ')'
                             ;
//****************************
//section exceptionStatement
//****************************
tryStatement                 : 'try' (statementList)? 'except' handlerList 'end'
                             | 'try' (statementList)? 'finally' (statementList)? 'end'
                             ;
handlerList                  : (handler)* ('else' statementList)?
                             | statementList
                             ;
handler                      : 'on' (handlerIdent)? typeId 'do' handlerStatement  //CHANGED - ; is not required ; handlerIdent not required, example:  "on einvalidoperation do;"
                             ;
handlerIdent                 : ident ':'
                             ;
handlerStatement             : statement (';')? -> ^(TkExceptionHandler statement) (';')?
                             | ';' -> ^(TkExceptionHandler) ';'
                             ;
raiseStatement               : 'raise' (expression)? (AT expression)?
                             ;
//****************************
//section AssemblerStatement
//****************************
assemblerStatement           : 'asm' assemblerInstructions 'end' -> ^('asm' ^(TkAssemblerInstructions assemblerInstructions) 'end')
                             ;
assemblerInstructions        : ~('end')* // Skip asm statements
                             ;
//****************************
//section directive
//****************************
methodDirectiveSection       : ((';')? methodDirective)* ';'
                             | standaloneOverloadDirective
                             ;
functionDirectiveSection     : ((';')? functionDirective)* ';'
                             | standaloneOverloadDirective
                             ;
standaloneOverloadDirective  : ';' 'overload' (';')?
                             ;
methodDirective              : 'overload'
                             | 'reintroduce'
                             | bindingDirective
                             | abstractDirective // virtual;
                             | inlineDirective   // niet virtual or dynamic
                             | callConvention
                             | hintingDirective  // (niet abstract)
                             | oldCallConventionDirective
                             | dispIDDirective
                             ;
functionDirective            : 'forward'
                             | 'overload'
                             | inlineDirective
                             | callConvention
                             | oldCallConventionDirective
                             | hintingDirective
                             | externalDirective
                             | 'unsafe'  // .net?
                             ;
bindingDirective             : 'message' expression
                             | 'static'
                             | 'dynamic'
                             | 'override'
                             | 'virtual'
                             ;
abstractDirective            : 'abstract'
                             | 'final'
                             ;
inlineDirective              : 'inline'
                             | 'assembler' // deprecated
                             ;
callConvention               : 'cdecl'    //
                             | 'pascal'   //
                             | 'register' //
                             | 'safecall' //
                             | 'stdcall'  //
                             | 'export'   // deprecated
                             ;
oldCallConventionDirective   : 'far'      // deprecated
                             | 'local'    // niet in windows maakt functie niet exporteerbaar
                             | 'near'     // deprecated
                             ;
hintingDirective             : 'deprecated' (stringFactor)?
                             | 'experimental'  // added 2006
                             | 'platform'
                             | 'library'
                             ;
externalDirective            : 'varargs'   // alleen bij external cdecl
                             | 'external' (expression)? (externalSpecifier)* // expression = dll name
                             ;
externalSpecifier            : 'name' constExpression
                             | 'index' constExpression   // specific to a platform
                             ;
dispIDDirective              : 'dispid' expression
                             ;
//****************************
////section general
//****************************
ident                        : TkIdentifier
                             | '&' TkIdentifier
                             | keywordsUsedAsNames
                             ;
keywordsUsedAsNames          : (NAME | READONLY | ADD | AT | MESSAGE | POINTER | INDEX | DEFAULT | STRING | CONTINUE)
                             | (READ | WRITE | REGISTER | VARIANT | OPERATOR | REMOVE | LOCAL | REFERENCE | CONTAINS | FINAL)
                             | (BREAK | EXIT | STRICT | OUT | OBJECT | EXPORT | ANSISTRING | IMPLEMENTS | STORED | HELPER )
                             | (PACKAGE | DEPRECATED)
                             ;
keywords                     : (ABSOLUTE | ABSTRACT | ADD | AND | ANSISTRING | ARRAY | AS | ASM | ASSEMBLER | ASSEMBLY)
                             | (AT | AUTOMATED | BEGIN | BREAK | CASE | CDECL | CLASS | CONST | CONSTRUCTOR | CONTAINS)
                             | (CONTINUE | DEFAULT | DEPRECATED | DESTRUCTOR | DISPID | DISPINTERFACE | DIV | DO | DOWNTO)
                             | (DQ | DW | DYNAMIC | ELSE | END | EXCEPT | EXIT | EXPERIMENTAL | EXPORT | EXPORTS | EXTERNAL)
                             | (FAR | FILE | FINAL | FINALIZATION | FINALLY | FOR | FORWARD | FUNCTION | GOTO | HELPER | IF)
                             | (IMPLEMENTATION | IMPLEMENTS | IN | INDEX | INHERITED | INITIALIZATION | INLINE | INTERFACE)
                             | (IS | LABEL | LIBRARY | LOCAL | MESSAGE | MOD | NAME | NEAR | NIL | NODEFAULT | NOT | OBJECT)
                             | (OF | ON | OPERATOR | OR | OUT | OVERLOAD | OVERRIDE | PACKAGE | PACKED | PASCAL | PLATFORM)
                             | (POINTER | PRIVATE | PROCEDURE | PROGRAM | PROPERTY | PROTECTED | PUBLIC | PUBLISHED | RAISE)
                             | (READ | READONLY | RECORD | REFERENCE | REGISTER | REINTRODUCE | REMOVE | REPEAT | REQUIRES)
                             | (RESIDENT | RESOURCESTRING | SAFECALL | SEALED | SET | SHL | SHR | STATIC | STDCALL | STORED)
                             | (STRICT | STRING | THEN | THREADVAR | TO | TRY | TYPE | UNIT | UNSAFE | UNTIL | USES | VAR)
                             | (VARARGS | VARIANT | VIRTUAL |  WHILE | WITH | WRITE | WRITEONLY | XOR | FALSE | TRUE)
                             ;
identList                    : ident (',' ident)* -> ^(ident (ident)*)
                             ;
identListFlat                : ident (',' ident)* -> ident (ident)*   //ADDED used in formalParemeter
                             ;
label                        : TkIdentifier
                             | TkIntNum
                             | TkHexNum
                             | keywordsUsedAsNames
                             ;
intNum                       : TkIntNum
                             | TkHexNum
                             ;
realNum                      : TkRealNum
                             ;
namespacedQualifiedIdent     : (namespaceName '.')? qualifiedIdent
                             ;
namespaceName                : ident ('.' ident)*
                             ;
qualifiedIdent               : (ident '.')*  extendedIdent
                             ;

//----------------------------------------------------------------------------
// Keywords
//----------------------------------------------------------------------------
ABSOLUTE          : 'absolute'       	         ;
ABSTRACT          : 'abstract'       	         ;
ADD               : 'add'            	         ;
AND               : 'and'           	         ;
ANSISTRING        : 'ansistring'     	         ;
ARRAY             : 'array'          	         ;
AS                : 'as'             	         ;
ASM               : 'asm' { asmMode = true; }  ;
ASSEMBLER         : 'assembler'       	       ;
ASSEMBLY          : 'assembly'       	         ;
AT                : 'at'             	         ;
AUTOMATED         : 'automated'      	         ;
BEGIN             : 'begin'          	         ;
BREAK             : 'break'          	         ;
CASE              : 'case'           	         ;
CDECL             : 'cdecl'          	         ;
CLASS             : 'class'          	         ;
CONST             : 'const'           	       ;
CONSTRUCTOR       : 'constructor'              ;
CONTAINS          : 'contains'                 ;
CONTINUE          : 'continue'                 ;
DEFAULT           : 'default'                  ;
DEPRECATED        : 'deprecated'               ;
DESTRUCTOR        : 'destructor'               ;
DISPID            : 'dispid'                   ;
DISPINTERFACE     : 'dispinterface'            ;
DIV               : 'div'                      ;
DO                : 'do'                       ;
DOWNTO            : 'downto'                   ;
DQ                : 'dq'                       ;
DW                : 'dw'                       ;
DYNAMIC           : 'dynamic'        	         ;
ELSE              : 'else'           	         ;
END               : 'end' { asmMode = false; } ;
EXCEPT            : 'except'                   ;
EXIT              : 'exit'                     ;
EXPERIMENTAL      : 'experimental'             ;
EXPORT            : 'export'                   ;
EXPORTS           : 'exports'                  ;
EXTERNAL          : 'external'                 ;
FAR               : 'far'                      ;
FILE              : 'file'                     ;
FINAL             : 'final'                    ;
FINALIZATION      : 'finalization'             ;
FINALLY           : 'finally'                  ;
FOR               : 'for'                      ;
FORWARD           : 'forward'                  ;
FUNCTION          : 'function'                 ;
GOTO              : 'goto'                     ;
HELPER            : 'helper'                   ;
IF                : 'if'                       ;
IMPLEMENTATION    : 'implementation'           ;
IMPLEMENTS        : 'implements'               ;
IN                : 'in'                       ;
INDEX             : 'index'                    ;
INHERITED         : 'inherited'                ;
INITIALIZATION    : 'initialization'           ;
INLINE            : 'inline'                   ;
INTERFACE         : 'interface'                ;
IS                : 'is'                       ;
LABEL             : 'label'                    ;
LIBRARY           : 'library'                  ;
LOCAL             : 'local'                    ;
MESSAGE           : 'message'                  ;
MOD               : 'mod'                      ;
NAME              : 'name'                     ;
NEAR              : 'near'                     ;
NIL               : 'nil'                      ;
NODEFAULT         : 'nodefault'                ;
NOT               : 'not'                      ;
OBJECT            : 'object'                   ;
OF                : 'of'                       ;
ON                : 'on'                       ;
OPERATOR          : 'operator'                 ;
OR                : 'or'                       ;
OUT               : 'out'                      ;
OVERLOAD          : 'overload'                 ;
OVERRIDE          : 'override'                 ;
PACKAGE           : 'package'                  ;
PACKED            : 'packed'                   ;
PASCAL            : 'pascal'                   ;
PLATFORM          : 'platform'                 ;
POINTER           : 'pointer'                  ;
PRIVATE           : 'private'                  ;
PROCEDURE         : 'procedure'                ;
PROGRAM           : 'program'                  ;
PROPERTY          : 'property'                 ;
PROTECTED         : 'protected'                ;
PUBLIC            : 'public'                   ;
PUBLISHED         : 'published'                ;
RAISE             : 'raise'                    ;
READ              : 'read'                     ;
READONLY          : 'readonly'                 ;
RECORD            : 'record'                   ;
REFERENCE         : 'reference'                ;
REGISTER          : 'register'                 ;
REINTRODUCE       : 'reintroduce'              ;
REMOVE            : 'remove'                   ;
REPEAT            : 'repeat'                   ;
REQUIRES          : 'requires'                 ;
RESIDENT          : 'resident'                 ;
RESOURCESTRING    : 'resourcestring'           ;
SAFECALL          : 'safecall'                 ;
SEALED            : 'sealed'                   ;
SET               : 'set'                      ;
SHL               : 'shl'                      ;
SHR               : 'shr'                      ;
STATIC            : 'static'                   ;
STDCALL           : 'stdcall'                  ;
STORED            : 'stored'                   ;
STRICT            : 'strict'                   ;
STRING            : 'string'                   ;
THEN              : 'then'                     ;
THREADVAR         : 'threadvar'                ;
TO                : 'to'                       ;
TRY               : 'try'                      ;
TYPE              : 'type'                     ;
UNIT              : 'unit'                     ;
UNSAFE            : 'unsafe'                   ;
UNTIL             : 'until'                    ;
USES              : 'uses'                     ;
VAR               : 'var'                      ;
VARARGS           : 'varargs'                  ;
VARIANT           : 'variant'                  ;
VIRTUAL           : 'virtual'                  ;
WHILE             : 'while'                    ;
WITH              : 'with'                     ;
WRITE             : 'write'                    ;
WRITEONLY         : 'writeonly'                ;
XOR               : 'xor'                      ;
FALSE             : 'false'                    ;
TRUE              : 'true'                     ;

//----------------------------------------------------------------------------
// Operators
//----------------------------------------------------------------------------
PLUS              : '+'   ;
MINUS             : '-'   ;
STAR              : '*'   ;
SLASH             : '/'   ;
ASSIGN            : ':='  ;
COMMA             : ','   ;
SEMI              : ';'   ;
COLON             : ':'   ;
EQUAL             : '='   ;
NOT_EQUAL         : '<>'  ;
LT                : '<'   ;
LE                : '<='  ;
GE                : '>='  ;
GT                : '>'   ;
LPAREN            : '('   ;
RPAREN            : ')'   ;
LBRACK            : '['   ; // line_tab[line]
LBRACK2           : '(.'  ; // line_tab(.line.)
RBRACK            : ']'   ;
RBRACK2           : '.)'  ;
POINTER2          : '^'   ;
AT2               : '@'   ;
DOT               : '.'   ;
DOTDOT            : '..'  ;
LCURLY            : '{'   ;
RCURLY            : '}'   ;
AMPERSAND         : '&'   ;

//****************************
//section token
//****************************
TkGlobalFunction        : 'FUNCTION_GLOBAL'
                        ;
TkFunctionName          : 'FUNCTION_NAME'
                        ;
TkConstantName          : 'CONSTANT_NAME'
                        ;
TkFunctionArgs          : 'FUNCTION_ARGS'
                        ;
TkFunctionBody          : 'FUNCTION_BODY'
                        ;
TkFunctionReturn        : 'FUNCTION_RETURN'
                        ;
TkCustomAttribute       : 'CUSTOM_ATTRIBUTE'
                        ;
TkCustomAttributeArgs   : 'CUSTOM_ATTRIBUTE_ARGS'
                        ;
TkNewType               : 'NEW_TYPE'
                        ;
TkNewTypeName           : 'NEW_TYPE_NAME'
                        ;
TkNewTypeDecl           : 'NEW_TYPE_DECL'
                        ;
TkClass                 : 'CLASS'
                        ;
TkRecord                : 'RECORD_TYPE'
                        ;
TkRecordHelper          : 'RECORD_HELPER'
                        ;
TkInterface             : 'INTERFACE_TYPE'
                        ;
TkObject                : 'OBJECT_TYPE'
                        ;
TkClassOfType           : 'CLASS_OF_TYPE'
                        ;
TkVariableType          : 'VARIABLE_TYPE'
                        ;
TkVariableIdents        : 'VARIABLE_IDENTS'
                        ;
TkVariableParam         : 'VARIABLE_PARAM'
                        ;
TkGuid                  : 'INTERFACE_GUID'
                        ;
TkClassParents          : 'CLASS_PARENTS'
                        ;
TkClassField            : 'CLASS_FIELD'
                        ;
TkAnonymousExpression   : 'ANONYMOUS_EXPRESSION'
                        ;
TkAssemblerInstructions : 'ASSEMBLER_INSTRUCTIONS'
                        ;
TkBlockDeclSection      : 'BLOCK_DECL_SECTION'
                        ;
TkExceptionHandler      : 'EXCEPTION_HANDLER'
                        ;
TkIdentifier            : (Alpha | '_') (Alpha | Digit | '_')*
                        ;
TkIntNum                : Digitseq
                        ;
                        // We use a lookahead here to avoid lexer failures on range operations like '1..2'
TkRealNum               : Digitseq ({ input.LA(2) != '.' }? => '.' Digitseq)? (('e'|'E') ('+'|'-')? Digitseq)?
                        ;
TkHexNum                : '$' Hexdigitseq
                        ;
TkAsmHexNum             : { asmMode }? => Hexdigitseq ('h'|'H')
                        ;
TkAsmHexLabel           : { asmMode }? => Hexdigitseq ':'
                        ;
QuotedString            : '\'' ('\'\'' | ~('\''))* '\''
                        ;
ControlString           : Controlchar (Controlchar)*
                        ;
//----------------------------------------------------------------------------
// Fragments
//----------------------------------------------------------------------------
                       
fragment
Controlchar             : '#' Digitseq
                        | '#' '$' Hexdigitseq
                        ;
fragment
Alpha                   : 'a'..'z'
                        | 'A'..'Z'
                        | '\u0080'..'\uFFFE' ~('\uFEFF') // unicode support
                        ;
fragment
Digit                   : '0'..'9'
                        ;
fragment
Digitseq                : Digit (Digit)*
                        ;
fragment
Hexdigit                : Digit | 'a'..'f' | 'A'..'F'
                        ;
fragment
Hexdigitseq		          : Hexdigit (Hexdigit)*
			                  ;
//----------------------------------------------------------------------------
// Hidden
//----------------------------------------------------------------------------		
COMMENT                 :  '//' ~('\n'|'\r')* '\r'? '\n'               {$channel=HIDDEN;}
                        |  '(*' ( options {greedy=false;} : . )* '*)'  {$channel=HIDDEN;}
                        |  '{' ( options {greedy=false;} : . )* '}'    {$channel=HIDDEN;}
                        ;
WS                      : (' '|'\t'|'\r'|'\n'|'\f')+ {$channel=HIDDEN;}
                        ;
UnicodeBOM              : '\uFEFF' {$channel=HIDDEN;}
                        ;

